//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syscode.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SyscodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, HEX_LITERAL=2, OCT_LITERAL=3, DEC_LITERAL=4, BIN_LITERAL=5, 
		INTEGER=6, AS=7, BIN16=8, BIN32=9, BIN64=10, BIN8=11, BIN=12, BIT=13, 
		BY=14, CALL=15, DCL=16, DEC=17, DEF=18, ELIF=19, ELSE=20, ENUM=21, END=22, 
		FOR=23, FOREVER=24, FUNC=25, IF=26, IS=27, LIT=28, PATH=29, PROC=30, RETURN=31, 
		SCOPE=32, STRING=33, STRUCT=34, THEN=35, TO=36, UBIN16=37, UBIN32=38, 
		UBIN64=39, UBIN8=40, UBIN=41, UDEC=42, UNIT=43, UNTIL=44, WHILE=45, COLON=46, 
		CONC=47, LOGAND=48, LOGOR=49, AND=50, OR=51, NAND=52, NOR=53, XOR=54, 
		XNOR=55, NOT=56, GT=57, LT=58, GTE=59, LTE=60, NGT=61, NLT=62, NE=63, 
		POWER=64, STR_LITERAL=65, PLUS=66, MINUS=67, TIMES=68, DIVIDE=69, PCNT=70, 
		QUOTE=71, REDAND=72, REDOR=73, REDNOR=74, REDXOR=75, REDXNOR=76, REDNAND=77, 
		L_LOG_SHIFT=78, R_LOG_SHIFT=79, R_ART_SHIFT=80, L_ROTATE=81, R_ROTATE=82, 
		EQUALS=83, ASSIGN=84, COMPASSIGN=85, DOT=86, AT=87, SEMICOLON=88, COMMA=89, 
		LPAR=90, RPAR=91, RARROW=92, IDENTIFIER=93, CUSTOM_LITERAL=94, NEWLINE=95, 
		WS=96;
	public const int
		RULE_preamble = 0, RULE_statementSeparator = 1, RULE_emptyLines = 2, RULE_compilation = 3, 
		RULE_statement = 4, RULE_label = 5, RULE_scope = 6, RULE_blockScope = 7, 
		RULE_procedure = 8, RULE_struct = 9, RULE_enum = 10, RULE_call = 11, RULE_return = 12, 
		RULE_declare = 13, RULE_literal = 14, RULE_loop = 15, RULE_forLoop = 16, 
		RULE_whileLoop = 17, RULE_untilLoop = 18, RULE_whileCondition = 19, RULE_untilCondition = 20, 
		RULE_if = 21, RULE_exprThenBlock = 22, RULE_thenBlock = 23, RULE_elseBlock = 24, 
		RULE_elifBlock = 25, RULE_assignment = 26, RULE_reference = 27, RULE_basicReference = 28, 
		RULE_argumentsList = 29, RULE_structureQualificationList = 30, RULE_structureQualification = 31, 
		RULE_arguments = 32, RULE_subscriptCommalist = 33, RULE_expression = 34, 
		RULE_primitiveExpression = 35, RULE_strLiteral = 36, RULE_numericLiteral = 37, 
		RULE_hexLiteral = 38, RULE_binLiteral = 39, RULE_octLiteral = 40, RULE_decLiteral = 41, 
		RULE_customLiteral = 42, RULE_parenthesizedExpression = 43, RULE_prefixExpression = 44, 
		RULE_dimensionSuffix = 45, RULE_boundPair = 46, RULE_boundPairCommalist = 47, 
		RULE_lowerBound = 48, RULE_upperBound = 49, RULE_logand = 50, RULE_logor = 51, 
		RULE_concatenate = 52, RULE_power = 53, RULE_shiftRotate = 54, RULE_addSub = 55, 
		RULE_mulDiv = 56, RULE_boolAnd = 57, RULE_boolXor = 58, RULE_boolOr = 59, 
		RULE_comparison = 60, RULE_prefixOperator = 61, RULE_structDefinition = 62, 
		RULE_qualifiedName = 63, RULE_paramList = 64, RULE_constArrayList = 65, 
		RULE_structName = 66, RULE_structMembers = 67, RULE_enumMembers = 68, 
		RULE_structMember = 69, RULE_structField = 70, RULE_structStruct = 71, 
		RULE_enumMember = 72, RULE_identifier = 73, RULE_typename = 74, RULE_unitType = 75, 
		RULE_binaryType = 76, RULE_decimalType = 77, RULE_stringType = 78, RULE_bitstringType = 79, 
		RULE_memberSeparator = 80, RULE_endOfFile = 81, RULE_keyword = 82;
	public static readonly string[] ruleNames = {
		"preamble", "statementSeparator", "emptyLines", "compilation", "statement", 
		"label", "scope", "blockScope", "procedure", "struct", "enum", "call", 
		"return", "declare", "literal", "loop", "forLoop", "whileLoop", "untilLoop", 
		"whileCondition", "untilCondition", "if", "exprThenBlock", "thenBlock", 
		"elseBlock", "elifBlock", "assignment", "reference", "basicReference", 
		"argumentsList", "structureQualificationList", "structureQualification", 
		"arguments", "subscriptCommalist", "expression", "primitiveExpression", 
		"strLiteral", "numericLiteral", "hexLiteral", "binLiteral", "octLiteral", 
		"decLiteral", "customLiteral", "parenthesizedExpression", "prefixExpression", 
		"dimensionSuffix", "boundPair", "boundPairCommalist", "lowerBound", "upperBound", 
		"logand", "logor", "concatenate", "power", "shiftRotate", "addSub", "mulDiv", 
		"boolAnd", "boolXor", "boolOr", "comparison", "prefixOperator", "structDefinition", 
		"qualifiedName", "paramList", "constArrayList", "structName", "structMembers", 
		"enumMembers", "structMember", "structField", "structStruct", "enumMember", 
		"identifier", "typename", "unitType", "binaryType", "decimalType", "stringType", 
		"bitstringType", "memberSeparator", "endOfFile", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'as'", "'bin16'", "'bin32'", 
		"'bin64'", "'bin8'", "'bin'", "'bit'", "'by'", "'call'", "'dcl'", "'dec'", 
		"'def'", "'elif'", "'else'", "'enum'", "'end'", "'for'", "'forever'", 
		null, "'if'", "'is'", null, "'path'", null, "'return'", "'scope'", "'string'", 
		"'struct'", "'then'", "'to'", "'ubin16'", "'ubin32'", "'ubin64'", "'ubin8'", 
		"'ubin'", "'udec'", "'unit'", "'until'", "'while'", "':'", "'++'", "'&&'", 
		"'||'", "'&'", "'|'", "'~&'", "'~|'", null, null, "'~'", "'>'", "'<'", 
		null, null, "'~>'", "'~<'", null, null, null, "'+'", "'-'", "'*'", null, 
		"'%'", "'\"'", "'&('", "'|('", "'~|('", null, null, "'~&('", "'<<'", "'>>'", 
		"'>>>'", null, null, "'='", "'<-'", null, "'.'", "'@'", "';'", "','", 
		"'('", "')'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "HEX_LITERAL", "OCT_LITERAL", "DEC_LITERAL", "BIN_LITERAL", 
		"INTEGER", "AS", "BIN16", "BIN32", "BIN64", "BIN8", "BIN", "BIT", "BY", 
		"CALL", "DCL", "DEC", "DEF", "ELIF", "ELSE", "ENUM", "END", "FOR", "FOREVER", 
		"FUNC", "IF", "IS", "LIT", "PATH", "PROC", "RETURN", "SCOPE", "STRING", 
		"STRUCT", "THEN", "TO", "UBIN16", "UBIN32", "UBIN64", "UBIN8", "UBIN", 
		"UDEC", "UNIT", "UNTIL", "WHILE", "COLON", "CONC", "LOGAND", "LOGOR", 
		"AND", "OR", "NAND", "NOR", "XOR", "XNOR", "NOT", "GT", "LT", "GTE", "LTE", 
		"NGT", "NLT", "NE", "POWER", "STR_LITERAL", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "PCNT", "QUOTE", "REDAND", "REDOR", "REDNOR", "REDXOR", "REDXNOR", 
		"REDNAND", "L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE", "R_ROTATE", 
		"EQUALS", "ASSIGN", "COMPASSIGN", "DOT", "AT", "SEMICOLON", "COMMA", "LPAR", 
		"RPAR", "RARROW", "IDENTIFIER", "CUSTOM_LITERAL", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syscode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyscodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyscodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyscodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SyscodeParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SyscodeParser.SEMICOLON, i);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 0, RULE_preamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 166;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEMICOLON || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SyscodeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SyscodeParser.NEWLINE, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		public EmptyLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLines; } }
	}

	[RuleVersion(0)]
	public EmptyLinesContext emptyLines() {
		EmptyLinesContext _localctx = new EmptyLinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyLines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 173;
					Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndOfFileContext endOfFile() {
			return GetRuleContext<EndOfFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation; } }
	}

	[RuleVersion(0)]
	public CompilationContext compilation() {
		CompilationContext _localctx = new CompilationContext(Context, State);
		EnterRule(_localctx, 6, RULE_compilation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					statement();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 184;
			endOfFile();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON || _la==NEWLINE) {
				{
				State = 186;
				preamble();
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 189;
				assignment();
				}
				break;
			case 2:
				{
				State = 190;
				call();
				}
				break;
			case 3:
				{
				State = 191;
				@return();
				}
				break;
			case 4:
				{
				State = 192;
				label();
				}
				break;
			case 5:
				{
				State = 193;
				scope();
				}
				break;
			case 6:
				{
				State = 194;
				@enum();
				}
				break;
			case 7:
				{
				State = 195;
				@struct();
				}
				break;
			case 8:
				{
				State = 196;
				@if();
				}
				break;
			case 9:
				{
				State = 197;
				declare();
				}
				break;
			case 10:
				{
				State = 198;
				literal();
				}
				break;
			case 11:
				{
				State = 199;
				procedure();
				}
				break;
			case 12:
				{
				State = 200;
				forLoop();
				}
				break;
			case 13:
				{
				State = 201;
				whileLoop();
				}
				break;
			case 14:
				{
				State = 202;
				untilLoop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SyscodeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 10, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(AT);
			State = 206;
			identifier();
			State = 207;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeContext blockScope() {
			return GetRuleContext<BlockScopeContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 12, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			blockScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeContext : ParserRuleContext {
		public QualifiedNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScope; } }
	}

	[RuleVersion(0)]
	public BlockScopeContext blockScope() {
		BlockScopeContext _localctx = new BlockScopeContext(Context, State);
		EnterRule(_localctx, 14, RULE_blockScope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 211;
			Match(SCOPE);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 212;
				emptyLines();
				}
			}

			State = 215;
			_localctx.Name = qualifiedName();
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 216;
				emptyLines();
				}
				break;
			}
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 219;
					statement();
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 225;
				emptyLines();
				}
			}

			State = 228;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(PROC);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 231;
				emptyLines();
				}
			}

			State = 234;
			_localctx.Spelling = identifier();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 235;
				paramList();
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 238;
					statement();
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 244;
				emptyLines();
				}
			}

			State = 247;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(STRUCT);
			State = 250;
			structDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IdentifierContext Name;
		public EnumMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 20, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(ENUM);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 253;
				emptyLines();
				}
			}

			State = 256;
			_localctx.Name = identifier();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 257;
				emptyLines();
				}
			}

			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368337330048L) != 0) || _la==IDENTIFIER) {
				{
				State = 260;
				typename();
				}
			}

			State = 263;
			memberSeparator();
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 264;
				emptyLines();
				}
				break;
			}
			State = 267;
			_localctx.Members = enumMembers();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 268;
				emptyLines();
				}
			}

			State = 271;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 22, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(CALL);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 274;
				emptyLines();
				}
			}

			State = 277;
			reference(0);
			State = 278;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 24, RULE_return);
		int _la;
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 280;
				Match(RETURN);
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 281;
						emptyLines();
						}
					}

					State = 284;
					Match(LPAR);
					State = 285;
					expression(0);
					State = 286;
					Match(RPAR);
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 290;
				Match(RETURN);
				State = 295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 291;
						emptyLines();
						}
					}

					State = 294;
					expression(0);
					}
					break;
				}
				}
				State = 297;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 26, RULE_declare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(DCL);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 301;
				emptyLines();
				}
			}

			State = 304;
			_localctx.Spelling = identifier();
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 305;
				emptyLines();
				}
				break;
			}
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 308;
				_localctx.Bounds = dimensionSuffix();
				}
			}

			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 311;
				emptyLines();
				}
			}

			State = 314;
			typename();
			State = 315;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(LIT);
			State = 318;
			customLiteral();
			State = 319;
			Match(AS);
			State = 320;
			decLiteral();
			State = 321;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 30, RULE_loop);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				forLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324;
				whileLoop();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325;
				untilLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 32, RULE_forLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(FOR);
			State = 329;
			reference(0);
			State = 330;
			Match(EQUALS);
			State = 331;
			expression(0);
			State = 332;
			Match(TO);
			State = 333;
			expression(0);
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 334;
				Match(BY);
				State = 335;
				expression(0);
				}
				break;
			}
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 338;
				emptyLines();
				}
				break;
			}
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 341;
				whileCondition();
				State = 343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 342;
					emptyLines();
					}
					break;
				}
				State = 346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 345;
					untilCondition();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 348;
				untilCondition();
				State = 350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 349;
					emptyLines();
					}
					break;
				}
				State = 353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 352;
					whileCondition();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 355;
				whileCondition();
				}
				break;
			case 4:
				{
				State = 356;
				untilCondition();
				}
				break;
			}
			State = 362;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 359;
					statement();
					}
					} 
				}
				State = 364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 365;
				emptyLines();
				}
			}

			State = 368;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			whileCondition();
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 371;
				untilCondition();
				}
				break;
			}
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 374;
					statement();
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 380;
				emptyLines();
				}
			}

			State = 383;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 36, RULE_untilLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			untilCondition();
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 386;
				whileCondition();
				}
				break;
			}
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 389;
					statement();
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 395;
				emptyLines();
				}
			}

			State = 398;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCondition; } }
	}

	[RuleVersion(0)]
	public WhileConditionContext whileCondition() {
		WhileConditionContext _localctx = new WhileConditionContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(WHILE);
			State = 401;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UntilConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilCondition; } }
	}

	[RuleVersion(0)]
	public UntilConditionContext untilCondition() {
		UntilConditionContext _localctx = new UntilConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_untilCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(UNTIL);
			State = 404;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock() {
			return GetRuleContext<ExprThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 42, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(IF);
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 407;
				emptyLines();
				}
				break;
			}
			State = 410;
			exprThenBlock();
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 411;
				emptyLines();
				}
				break;
			}
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIF) {
				{
				State = 414;
				elifBlock();
				}
			}

			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 417;
				emptyLines();
				}
				break;
			}
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 420;
				elseBlock();
				}
			}

			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 423;
				emptyLines();
				}
			}

			State = 426;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ExprThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprThenBlock; } }
	}

	[RuleVersion(0)]
	public ExprThenBlockContext exprThenBlock() {
		ExprThenBlockContext _localctx = new ExprThenBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_exprThenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 428;
				emptyLines();
				}
			}

			State = 431;
			expression(0);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 432;
				emptyLines();
				}
			}

			State = 435;
			Match(THEN);
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 436;
				emptyLines();
				}
				break;
			}
			State = 439;
			thenBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_thenBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 441;
					statement();
					}
					} 
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 447;
			Match(ELSE);
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 448;
				emptyLines();
				}
				break;
			}
			State = 451;
			thenBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(SyscodeParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(SyscodeParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext[] exprThenBlock() {
			return GetRuleContexts<ExprThenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock(int i) {
			return GetRuleContext<ExprThenBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_elifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 453;
				Match(ELIF);
				State = 455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 454;
					emptyLines();
					}
					break;
				}
				State = 457;
				exprThenBlock();
				}
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELIF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ReferenceContext Target;
		public ExpressionContext Source;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_localctx.Target = reference(0);
			{
			State = 463;
			Match(EQUALS);
			}
			State = 464;
			_localctx.Source = expression(0);
			State = 465;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(SyscodeParser.RARROW, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 468;
			basicReference();
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 469;
				argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 480;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 472;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 473;
					Match(RARROW);
					State = 474;
					basicReference();
					State = 476;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 475;
						argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 483;
				structureQualificationList();
				}
				break;
			}
			State = 486;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 488;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 491;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 60, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 493;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SyscodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 62, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_localctx.Spelling = identifier();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 499;
				arguments();
				}
			}

			State = 502;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(LPAR);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72127962375258108L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 838868871L) != 0)) {
				{
				State = 505;
				subscriptCommalist();
				}
			}

			State = 508;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 66, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			expression(0);
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 511;
				Match(COMMA);
				State = 512;
				expression(0);
				}
				}
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprBinaryContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulDivContext mulDiv() {
			return GetRuleContext<MulDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubContext addSub() {
			return GetRuleContext<AddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftRotateContext shiftRotate() {
			return GetRuleContext<ShiftRotateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenateContext concatenate() {
			return GetRuleContext<ConcatenateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorContext boolXor() {
			return GetRuleContext<BoolXorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrContext boolOr() {
			return GetRuleContext<BoolOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogandContext logand() {
			return GetRuleContext<LogandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogorContext logor() {
			return GetRuleContext<LogorContext>(0);
		}
		public ExprBinaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case IF:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case WHILE:
			case STR_LITERAL:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 519;
				primitiveExpression();
				}
				break;
			case REDAND:
			case REDOR:
			case REDNOR:
			case REDXOR:
			case REDXNOR:
			case REDNAND:
			case LPAR:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 520;
				parenthesizedExpression();
				}
				break;
			case NOT:
			case PLUS:
			case MINUS:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 521;
				prefixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 634;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 524;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 526;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 525;
							emptyLines();
							}
						}

						State = 528;
						power();
						State = 530;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 529;
							emptyLines();
							}
						}

						State = 532;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 534;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 536;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 535;
							emptyLines();
							}
						}

						State = 538;
						mulDiv();
						State = 540;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 539;
							emptyLines();
							}
						}

						State = 542;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 544;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 546;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 545;
							emptyLines();
							}
						}

						State = 548;
						addSub();
						State = 550;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 549;
							emptyLines();
							}
						}

						State = 552;
						((ExprBinaryContext)_localctx).Rite = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 554;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 556;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 555;
							emptyLines();
							}
						}

						State = 558;
						shiftRotate();
						State = 560;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 559;
							emptyLines();
							}
						}

						State = 562;
						((ExprBinaryContext)_localctx).Rite = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 564;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 566;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 565;
							emptyLines();
							}
						}

						State = 568;
						concatenate();
						State = 570;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 569;
							emptyLines();
							}
						}

						State = 572;
						((ExprBinaryContext)_localctx).Rite = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 574;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 576;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 575;
							emptyLines();
							}
						}

						State = 578;
						comparison();
						State = 580;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 579;
							emptyLines();
							}
						}

						State = 582;
						((ExprBinaryContext)_localctx).Rite = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 584;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 585;
							emptyLines();
							}
						}

						State = 588;
						boolAnd();
						State = 590;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 589;
							emptyLines();
							}
						}

						State = 592;
						((ExprBinaryContext)_localctx).Rite = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 594;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 596;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 595;
							emptyLines();
							}
						}

						State = 598;
						boolXor();
						State = 600;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 599;
							emptyLines();
							}
						}

						State = 602;
						((ExprBinaryContext)_localctx).Rite = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 604;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 606;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 605;
							emptyLines();
							}
						}

						State = 608;
						boolOr();
						State = 610;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 609;
							emptyLines();
							}
						}

						State = 612;
						((ExprBinaryContext)_localctx).Rite = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 614;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 616;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 615;
							emptyLines();
							}
						}

						State = 618;
						logand();
						State = 620;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 619;
							emptyLines();
							}
						}

						State = 622;
						((ExprBinaryContext)_localctx).Rite = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 624;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 626;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 625;
							emptyLines();
							}
						}

						State = 628;
						logor();
						State = 630;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 629;
							emptyLines();
							}
						}

						State = 632;
						((ExprBinaryContext)_localctx).Rite = expression(2);
						}
						break;
					}
					} 
				}
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_primitiveExpression);
		try {
			State = 643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639;
				numericLiteral();
				}
				break;
			case STR_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 640;
				strLiteral();
				}
				break;
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 641;
				customLiteral();
				}
				break;
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case IF:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case WHILE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 642;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LITERAL() { return GetToken(SyscodeParser.STR_LITERAL, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 72, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(STR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinLiteralContext binLiteral() {
			return GetRuleContext<BinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctLiteralContext octLiteral() {
			return GetRuleContext<OctLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 74, RULE_numericLiteral);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647;
				binLiteral();
				}
				break;
			case OCT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648;
				octLiteral();
				}
				break;
			case HEX_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 649;
				hexLiteral();
				}
				break;
			case DEC_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 650;
				decLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(SyscodeParser.HEX_LITERAL, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 76, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 653;
			Match(HEX_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LITERAL() { return GetToken(SyscodeParser.BIN_LITERAL, 0); }
		public BinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binLiteral; } }
	}

	[RuleVersion(0)]
	public BinLiteralContext binLiteral() {
		BinLiteralContext _localctx = new BinLiteralContext(Context, State);
		EnterRule(_localctx, 78, RULE_binLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 655;
			Match(BIN_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(SyscodeParser.OCT_LITERAL, 0); }
		public OctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octLiteral; } }
	}

	[RuleVersion(0)]
	public OctLiteralContext octLiteral() {
		OctLiteralContext _localctx = new OctLiteralContext(Context, State);
		EnterRule(_localctx, 80, RULE_octLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 657;
			Match(OCT_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SyscodeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL() { return GetToken(SyscodeParser.DEC_LITERAL, 0); }
		public DecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLiteral; } }
	}

	[RuleVersion(0)]
	public DecLiteralContext decLiteral() {
		DecLiteralContext _localctx = new DecLiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_decLiteral);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 659;
				Match(INTEGER);
				}
				}
				break;
			case DEC_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 660;
				Match(DEC_LITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOM_LITERAL() { return GetToken(SyscodeParser.CUSTOM_LITERAL, 0); }
		public CustomLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customLiteral; } }
	}

	[RuleVersion(0)]
	public CustomLiteralContext customLiteral() {
		CustomLiteralContext _localctx = new CustomLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_customLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 663;
			Match(CUSTOM_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(SyscodeParser.REDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(SyscodeParser.REDOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR() { return GetToken(SyscodeParser.REDXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDNAND() { return GetToken(SyscodeParser.REDNAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDNOR() { return GetToken(SyscodeParser.REDNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXNOR() { return GetToken(SyscodeParser.REDXNOR, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_parenthesizedExpression);
		try {
			State = 693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665;
				Match(LPAR);
				State = 666;
				expression(0);
				State = 667;
				Match(RPAR);
				}
				break;
			case REDAND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669;
				Match(REDAND);
				State = 670;
				expression(0);
				State = 671;
				Match(RPAR);
				}
				break;
			case REDOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 673;
				Match(REDOR);
				State = 674;
				expression(0);
				State = 675;
				Match(RPAR);
				}
				break;
			case REDXOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 677;
				Match(REDXOR);
				State = 678;
				expression(0);
				State = 679;
				Match(RPAR);
				}
				break;
			case REDNAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 681;
				Match(REDNAND);
				State = 682;
				expression(0);
				State = 683;
				Match(RPAR);
				}
				break;
			case REDNOR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 685;
				Match(REDNOR);
				State = 686;
				expression(0);
				State = 687;
				Match(RPAR);
				}
				break;
			case REDXNOR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 689;
				Match(REDXNOR);
				State = 690;
				expression(0);
				State = 691;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			prefixOperator();
			State = 696;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 90, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(LPAR);
			State = 699;
			boundPairCommalist();
			State = 700;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SyscodeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 92, RULE_boundPair);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case IF:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case WHILE:
			case NOT:
			case STR_LITERAL:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDNOR:
			case REDXOR:
			case REDXNOR:
			case REDNAND:
			case LPAR:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 702;
					lowerBound();
					State = 703;
					Match(COLON);
					}
					break;
				}
				State = 707;
				upperBound();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 94, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			boundPair();
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 712;
				Match(COMMA);
				State = 713;
				boundPair();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 96, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 98, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(SyscodeParser.LOGAND, 0); }
		public LogandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logand; } }
	}

	[RuleVersion(0)]
	public LogandContext logand() {
		LogandContext _localctx = new LogandContext(Context, State);
		EnterRule(_localctx, 100, RULE_logand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			Match(LOGAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(SyscodeParser.LOGOR, 0); }
		public LogorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logor; } }
	}

	[RuleVersion(0)]
	public LogorContext logor() {
		LogorContext _localctx = new LogorContext(Context, State);
		EnterRule(_localctx, 102, RULE_logor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(LOGOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(SyscodeParser.CONC, 0); }
		public ConcatenateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate; } }
	}

	[RuleVersion(0)]
	public ConcatenateContext concatenate() {
		ConcatenateContext _localctx = new ConcatenateContext(Context, State);
		EnterRule(_localctx, 104, RULE_concatenate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(CONC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SyscodeParser.POWER, 0); }
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 106, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRotateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE() { return GetToken(SyscodeParser.L_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE() { return GetToken(SyscodeParser.R_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(SyscodeParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(SyscodeParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(SyscodeParser.R_ART_SHIFT, 0); }
		public ShiftRotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRotate; } }
	}

	[RuleVersion(0)]
	public ShiftRotateContext shiftRotate() {
		ShiftRotateContext _localctx = new ShiftRotateContext(Context, State);
		EnterRule(_localctx, 108, RULE_shiftRotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		public AddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSub; } }
	}

	[RuleVersion(0)]
	public AddSubContext addSub() {
		AddSubContext _localctx = new AddSubContext(Context, State);
		EnterRule(_localctx, 110, RULE_addSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SyscodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(SyscodeParser.PCNT, 0); }
		public MulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDiv; } }
	}

	[RuleVersion(0)]
	public MulDivContext mulDiv() {
		MulDivContext _localctx = new MulDivContext(Context, State);
		EnterRule(_localctx, 112, RULE_mulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SyscodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(SyscodeParser.NAND, 0); }
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(Context, State);
		EnterRule(_localctx, 114, RULE_boolAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(SyscodeParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(SyscodeParser.XNOR, 0); }
		public BoolXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXor; } }
	}

	[RuleVersion(0)]
	public BoolXorContext boolXor() {
		BoolXorContext _localctx = new BoolXorContext(Context, State);
		EnterRule(_localctx, 116, RULE_boolXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR || _la==XNOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SyscodeParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(SyscodeParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public BoolOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOr; } }
	}

	[RuleVersion(0)]
	public BoolOrContext boolOr() {
		BoolOrContext _localctx = new BoolOrContext(Context, State);
		EnterRule(_localctx, 118, RULE_boolOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 83316593106354176L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SyscodeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SyscodeParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SyscodeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SyscodeParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(SyscodeParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(SyscodeParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(SyscodeParser.NLT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 120, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 67108991L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 3073L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public StructMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMembersContext structMembers() {
			return GetRuleContext<StructMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			structName();
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 748;
				emptyLines();
				}
			}

			State = 751;
			memberSeparator();
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 752;
				emptyLines();
				}
				break;
			}
			State = 755;
			_localctx.Members = structMembers();
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 756;
				emptyLines();
				}
			}

			State = 759;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SyscodeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SyscodeParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			identifier();
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 762;
				Match(DOT);
				State = 763;
				identifier();
				}
				}
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 128, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(LPAR);
			State = 770;
			identifier();
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 771;
				Match(COMMA);
				State = 772;
				identifier();
				}
				}
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 778;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SyscodeParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SyscodeParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ConstArrayListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayList; } }
	}

	[RuleVersion(0)]
	public ConstArrayListContext constArrayList() {
		ConstArrayListContext _localctx = new ConstArrayListContext(Context, State);
		EnterRule(_localctx, 130, RULE_constArrayList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 780;
			Match(LPAR);
			State = 781;
			Match(INTEGER);
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 782;
				Match(COMMA);
				State = 783;
				Match(INTEGER);
				}
				}
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 789;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_structName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			_localctx.Spelling = identifier();
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 792;
				_localctx.Bounds = dimensionSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public StructMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMembers; } }
	}

	[RuleVersion(0)]
	public StructMembersContext structMembers() {
		StructMembersContext _localctx = new StructMembersContext(Context, State);
		EnterRule(_localctx, 134, RULE_structMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 795;
				emptyLines();
				}
			}

			State = 798;
			structMember();
			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 799;
				emptyLines();
				}
				break;
			}
			State = 812;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 802;
					memberSeparator();
					State = 804;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 803;
						emptyLines();
						}
					}

					State = 806;
					structMember();
					State = 808;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
					case 1:
						{
						State = 807;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 814;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 815;
				memberSeparator();
				}
			}

			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 818;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 136, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 821;
				emptyLines();
				}
			}

			State = 824;
			enumMember();
			State = 826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 825;
				emptyLines();
				}
				break;
			}
			State = 838;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 828;
					memberSeparator();
					State = 830;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 829;
						emptyLines();
						}
					}

					State = 832;
					enumMember();
					State = 834;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
					case 1:
						{
						State = 833;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 840;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 841;
				memberSeparator();
				}
			}

			State = 845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 844;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField() {
			return GetRuleContext<StructFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 138, RULE_structMember);
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				structField();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 848;
				structDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		public TypenameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 140, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 851;
			_localctx.Spelling = identifier();
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 852;
				emptyLines();
				}
			}

			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 855;
				_localctx.Bounds = dimensionSuffix();
				}
			}

			State = 858;
			_localctx.Type = typename();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public StructStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStruct; } }
	}

	[RuleVersion(0)]
	public StructStructContext structStruct() {
		StructStructContext _localctx = new StructStructContext(Context, State);
		EnterRule(_localctx, 142, RULE_structStruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			structDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 144, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 862;
			_localctx.Name = identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SyscodeParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_identifier);
		try {
			State = 866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case IF:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalTypeContext decimalType() {
			return GetRuleContext<DecimalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitstringTypeContext bitstringType() {
			return GetRuleContext<BitstringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType() {
			return GetRuleContext<UnitTypeContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 148, RULE_typename);
		try {
			State = 874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				binaryType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869;
				decimalType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870;
				stringType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 871;
				bitstringType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 872;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 873;
				unitType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			Match(UNIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_binaryType);
		int _la;
		try {
			State = 890;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 878;
				Match(BIN8);
				}
				break;
			case BIN16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 879;
				Match(BIN16);
				}
				break;
			case BIN32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 880;
				Match(BIN32);
				}
				break;
			case BIN64:
				EnterOuterAlt(_localctx, 4);
				{
				State = 881;
				Match(BIN64);
				}
				break;
			case UBIN8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 882;
				Match(UBIN8);
				}
				break;
			case UBIN16:
				EnterOuterAlt(_localctx, 6);
				{
				State = 883;
				Match(UBIN16);
				}
				break;
			case UBIN32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 884;
				Match(UBIN32);
				}
				break;
			case UBIN64:
				EnterOuterAlt(_localctx, 8);
				{
				State = 885;
				Match(UBIN64);
				}
				break;
			case BIN:
			case UBIN:
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 886;
				_la = TokenStream.LA(1);
				if ( !(_la==BIN || _la==UBIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 887;
					argumentsList();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		public DecimalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalType; } }
	}

	[RuleVersion(0)]
	public DecimalTypeContext decimalType() {
		DecimalTypeContext _localctx = new DecimalTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_decimalType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 892;
			_la = TokenStream.LA(1);
			if ( !(_la==DEC || _la==UDEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 893;
			argumentsList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_stringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(STRING);
			State = 897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 896;
				argumentsList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitstringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public BitstringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitstringType; } }
	}

	[RuleVersion(0)]
	public BitstringTypeContext bitstringType() {
		BitstringTypeContext _localctx = new BitstringTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_bitstringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(BIT);
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 900;
				argumentsList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SyscodeParser.COMMA, 0); }
		public MemberSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSeparator; } }
	}

	[RuleVersion(0)]
	public MemberSeparatorContext memberSeparator() {
		MemberSeparatorContext _localctx = new MemberSeparatorContext(Context, State);
		EnterRule(_localctx, 160, RULE_memberSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public EndOfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfFile; } }
	}

	[RuleVersion(0)]
	public EndOfFileContext endOfFile() {
		EndOfFileContext _localctx = new EndOfFileContext(Context, State);
		EnterRule(_localctx, 162, RULE_endOfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 905;
				emptyLines();
				}
			}

			State = 908;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(SyscodeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(SyscodeParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREVER() { return GetToken(SyscodeParser.FOREVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SyscodeParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 164, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368337330048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,96,913,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,4,0,168,8,0,11,0,
		12,0,169,1,1,1,1,1,2,4,2,175,8,2,11,2,12,2,176,1,3,5,3,180,8,3,10,3,12,
		3,183,9,3,1,3,1,3,1,4,3,4,188,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,3,4,204,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,3,7,214,
		8,7,1,7,1,7,3,7,218,8,7,1,7,5,7,221,8,7,10,7,12,7,224,9,7,1,7,3,7,227,
		8,7,1,7,1,7,1,8,1,8,3,8,233,8,8,1,8,1,8,3,8,237,8,8,1,8,5,8,240,8,8,10,
		8,12,8,243,9,8,1,8,3,8,246,8,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,3,10,255,
		8,10,1,10,1,10,3,10,259,8,10,1,10,3,10,262,8,10,1,10,1,10,3,10,266,8,10,
		1,10,1,10,3,10,270,8,10,1,10,1,10,1,11,1,11,3,11,276,8,11,1,11,1,11,1,
		11,1,12,1,12,3,12,283,8,12,1,12,1,12,1,12,1,12,3,12,289,8,12,1,12,1,12,
		3,12,293,8,12,1,12,3,12,296,8,12,1,12,3,12,299,8,12,1,13,1,13,3,13,303,
		8,13,1,13,1,13,3,13,307,8,13,1,13,3,13,310,8,13,1,13,3,13,313,8,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,327,8,15,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,337,8,16,1,16,3,16,340,8,16,
		1,16,1,16,3,16,344,8,16,1,16,3,16,347,8,16,1,16,1,16,3,16,351,8,16,1,16,
		3,16,354,8,16,1,16,1,16,3,16,358,8,16,1,16,5,16,361,8,16,10,16,12,16,364,
		9,16,1,16,3,16,367,8,16,1,16,1,16,1,17,1,17,3,17,373,8,17,1,17,5,17,376,
		8,17,10,17,12,17,379,9,17,1,17,3,17,382,8,17,1,17,1,17,1,18,1,18,3,18,
		388,8,18,1,18,5,18,391,8,18,10,18,12,18,394,9,18,1,18,3,18,397,8,18,1,
		18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,3,21,409,8,21,1,21,1,21,
		3,21,413,8,21,1,21,3,21,416,8,21,1,21,3,21,419,8,21,1,21,3,21,422,8,21,
		1,21,3,21,425,8,21,1,21,1,21,1,22,3,22,430,8,22,1,22,1,22,3,22,434,8,22,
		1,22,1,22,3,22,438,8,22,1,22,1,22,1,23,5,23,443,8,23,10,23,12,23,446,9,
		23,1,24,1,24,3,24,450,8,24,1,24,1,24,1,25,1,25,3,25,456,8,25,1,25,4,25,
		459,8,25,11,25,12,25,460,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,3,27,
		471,8,27,1,27,1,27,1,27,1,27,3,27,477,8,27,5,27,479,8,27,10,27,12,27,482,
		9,27,1,28,3,28,485,8,28,1,28,1,28,1,29,4,29,490,8,29,11,29,12,29,491,1,
		30,4,30,495,8,30,11,30,12,30,496,1,31,1,31,3,31,501,8,31,1,31,1,31,1,32,
		1,32,3,32,507,8,32,1,32,1,32,1,33,1,33,1,33,5,33,514,8,33,10,33,12,33,
		517,9,33,1,34,1,34,1,34,1,34,3,34,523,8,34,1,34,1,34,3,34,527,8,34,1,34,
		1,34,3,34,531,8,34,1,34,1,34,1,34,1,34,3,34,537,8,34,1,34,1,34,3,34,541,
		8,34,1,34,1,34,1,34,1,34,3,34,547,8,34,1,34,1,34,3,34,551,8,34,1,34,1,
		34,1,34,1,34,3,34,557,8,34,1,34,1,34,3,34,561,8,34,1,34,1,34,1,34,1,34,
		3,34,567,8,34,1,34,1,34,3,34,571,8,34,1,34,1,34,1,34,1,34,3,34,577,8,34,
		1,34,1,34,3,34,581,8,34,1,34,1,34,1,34,1,34,3,34,587,8,34,1,34,1,34,3,
		34,591,8,34,1,34,1,34,1,34,1,34,3,34,597,8,34,1,34,1,34,3,34,601,8,34,
		1,34,1,34,1,34,1,34,3,34,607,8,34,1,34,1,34,3,34,611,8,34,1,34,1,34,1,
		34,1,34,3,34,617,8,34,1,34,1,34,3,34,621,8,34,1,34,1,34,1,34,1,34,3,34,
		627,8,34,1,34,1,34,3,34,631,8,34,1,34,1,34,5,34,635,8,34,10,34,12,34,638,
		9,34,1,35,1,35,1,35,1,35,3,35,644,8,35,1,36,1,36,1,37,1,37,1,37,1,37,3,
		37,652,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,3,41,662,8,41,1,42,
		1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,3,43,694,8,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,
		46,706,8,46,1,46,1,46,3,46,710,8,46,1,47,1,47,1,47,5,47,715,8,47,10,47,
		12,47,718,9,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
		1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
		1,60,1,61,1,61,1,62,1,62,3,62,750,8,62,1,62,1,62,3,62,754,8,62,1,62,1,
		62,3,62,758,8,62,1,62,1,62,1,63,1,63,1,63,5,63,765,8,63,10,63,12,63,768,
		9,63,1,64,1,64,1,64,1,64,5,64,774,8,64,10,64,12,64,777,9,64,1,64,1,64,
		1,65,1,65,1,65,1,65,5,65,785,8,65,10,65,12,65,788,9,65,1,65,1,65,1,66,
		1,66,3,66,794,8,66,1,67,3,67,797,8,67,1,67,1,67,3,67,801,8,67,1,67,1,67,
		3,67,805,8,67,1,67,1,67,3,67,809,8,67,5,67,811,8,67,10,67,12,67,814,9,
		67,1,67,3,67,817,8,67,1,67,3,67,820,8,67,1,68,3,68,823,8,68,1,68,1,68,
		3,68,827,8,68,1,68,1,68,3,68,831,8,68,1,68,1,68,3,68,835,8,68,5,68,837,
		8,68,10,68,12,68,840,9,68,1,68,3,68,843,8,68,1,68,3,68,846,8,68,1,69,1,
		69,3,69,850,8,69,1,70,1,70,3,70,854,8,70,1,70,3,70,857,8,70,1,70,1,70,
		1,71,1,71,1,72,1,72,1,73,1,73,3,73,867,8,73,1,74,1,74,1,74,1,74,1,74,1,
		74,3,74,875,8,74,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
		1,76,3,76,889,8,76,3,76,891,8,76,1,77,1,77,1,77,1,78,1,78,3,78,898,8,78,
		1,79,1,79,3,79,902,8,79,1,80,1,80,1,81,3,81,907,8,81,1,81,1,81,1,82,1,
		82,1,82,0,2,54,68,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		160,162,164,0,12,2,0,88,88,95,95,1,0,78,82,1,0,66,67,1,0,68,70,2,0,50,
		50,52,52,1,0,54,55,3,0,51,51,53,53,56,56,2,0,57,63,83,83,2,0,56,56,66,
		67,2,0,12,12,41,41,2,0,17,17,42,42,3,0,7,21,23,26,29,45,1004,0,167,1,0,
		0,0,2,171,1,0,0,0,4,174,1,0,0,0,6,181,1,0,0,0,8,187,1,0,0,0,10,205,1,0,
		0,0,12,209,1,0,0,0,14,211,1,0,0,0,16,230,1,0,0,0,18,249,1,0,0,0,20,252,
		1,0,0,0,22,273,1,0,0,0,24,298,1,0,0,0,26,300,1,0,0,0,28,317,1,0,0,0,30,
		326,1,0,0,0,32,328,1,0,0,0,34,370,1,0,0,0,36,385,1,0,0,0,38,400,1,0,0,
		0,40,403,1,0,0,0,42,406,1,0,0,0,44,429,1,0,0,0,46,444,1,0,0,0,48,447,1,
		0,0,0,50,458,1,0,0,0,52,462,1,0,0,0,54,467,1,0,0,0,56,484,1,0,0,0,58,489,
		1,0,0,0,60,494,1,0,0,0,62,498,1,0,0,0,64,504,1,0,0,0,66,510,1,0,0,0,68,
		522,1,0,0,0,70,643,1,0,0,0,72,645,1,0,0,0,74,651,1,0,0,0,76,653,1,0,0,
		0,78,655,1,0,0,0,80,657,1,0,0,0,82,661,1,0,0,0,84,663,1,0,0,0,86,693,1,
		0,0,0,88,695,1,0,0,0,90,698,1,0,0,0,92,709,1,0,0,0,94,711,1,0,0,0,96,719,
		1,0,0,0,98,721,1,0,0,0,100,723,1,0,0,0,102,725,1,0,0,0,104,727,1,0,0,0,
		106,729,1,0,0,0,108,731,1,0,0,0,110,733,1,0,0,0,112,735,1,0,0,0,114,737,
		1,0,0,0,116,739,1,0,0,0,118,741,1,0,0,0,120,743,1,0,0,0,122,745,1,0,0,
		0,124,747,1,0,0,0,126,761,1,0,0,0,128,769,1,0,0,0,130,780,1,0,0,0,132,
		791,1,0,0,0,134,796,1,0,0,0,136,822,1,0,0,0,138,849,1,0,0,0,140,851,1,
		0,0,0,142,860,1,0,0,0,144,862,1,0,0,0,146,866,1,0,0,0,148,874,1,0,0,0,
		150,876,1,0,0,0,152,890,1,0,0,0,154,892,1,0,0,0,156,895,1,0,0,0,158,899,
		1,0,0,0,160,903,1,0,0,0,162,906,1,0,0,0,164,910,1,0,0,0,166,168,7,0,0,
		0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,
		1,1,0,0,0,171,172,7,0,0,0,172,3,1,0,0,0,173,175,5,95,0,0,174,173,1,0,0,
		0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,5,1,0,0,0,178,180,
		3,8,4,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,
		0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,3,162,81,0,185,7,1,0,0,0,186,
		188,3,0,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,203,1,0,0,0,189,204,3,
		52,26,0,190,204,3,22,11,0,191,204,3,24,12,0,192,204,3,10,5,0,193,204,3,
		12,6,0,194,204,3,20,10,0,195,204,3,18,9,0,196,204,3,42,21,0,197,204,3,
		26,13,0,198,204,3,28,14,0,199,204,3,16,8,0,200,204,3,32,16,0,201,204,3,
		34,17,0,202,204,3,36,18,0,203,189,1,0,0,0,203,190,1,0,0,0,203,191,1,0,
		0,0,203,192,1,0,0,0,203,193,1,0,0,0,203,194,1,0,0,0,203,195,1,0,0,0,203,
		196,1,0,0,0,203,197,1,0,0,0,203,198,1,0,0,0,203,199,1,0,0,0,203,200,1,
		0,0,0,203,201,1,0,0,0,203,202,1,0,0,0,204,9,1,0,0,0,205,206,5,87,0,0,206,
		207,3,146,73,0,207,208,3,2,1,0,208,11,1,0,0,0,209,210,3,14,7,0,210,13,
		1,0,0,0,211,213,5,32,0,0,212,214,3,4,2,0,213,212,1,0,0,0,213,214,1,0,0,
		0,214,215,1,0,0,0,215,217,3,126,63,0,216,218,3,4,2,0,217,216,1,0,0,0,217,
		218,1,0,0,0,218,222,1,0,0,0,219,221,3,8,4,0,220,219,1,0,0,0,221,224,1,
		0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,
		225,227,3,4,2,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,
		5,22,0,0,229,15,1,0,0,0,230,232,5,30,0,0,231,233,3,4,2,0,232,231,1,0,0,
		0,232,233,1,0,0,0,233,234,1,0,0,0,234,236,3,146,73,0,235,237,3,128,64,
		0,236,235,1,0,0,0,236,237,1,0,0,0,237,241,1,0,0,0,238,240,3,8,4,0,239,
		238,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,245,1,
		0,0,0,243,241,1,0,0,0,244,246,3,4,2,0,245,244,1,0,0,0,245,246,1,0,0,0,
		246,247,1,0,0,0,247,248,5,22,0,0,248,17,1,0,0,0,249,250,5,34,0,0,250,251,
		3,124,62,0,251,19,1,0,0,0,252,254,5,21,0,0,253,255,3,4,2,0,254,253,1,0,
		0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,258,3,146,73,0,257,259,3,4,2,0,
		258,257,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,262,3,148,74,0,261,
		260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,265,3,160,80,0,264,266,
		3,4,2,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,269,3,136,
		68,0,268,270,3,4,2,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,
		272,5,22,0,0,272,21,1,0,0,0,273,275,5,15,0,0,274,276,3,4,2,0,275,274,1,
		0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,3,54,27,0,278,279,3,2,1,
		0,279,23,1,0,0,0,280,288,5,31,0,0,281,283,3,4,2,0,282,281,1,0,0,0,282,
		283,1,0,0,0,283,284,1,0,0,0,284,285,5,90,0,0,285,286,3,68,34,0,286,287,
		5,91,0,0,287,289,1,0,0,0,288,282,1,0,0,0,288,289,1,0,0,0,289,299,1,0,0,
		0,290,295,5,31,0,0,291,293,3,4,2,0,292,291,1,0,0,0,292,293,1,0,0,0,293,
		294,1,0,0,0,294,296,3,68,34,0,295,292,1,0,0,0,295,296,1,0,0,0,296,297,
		1,0,0,0,297,299,3,2,1,0,298,280,1,0,0,0,298,290,1,0,0,0,299,25,1,0,0,0,
		300,302,5,16,0,0,301,303,3,4,2,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,
		1,0,0,0,304,306,3,146,73,0,305,307,3,4,2,0,306,305,1,0,0,0,306,307,1,0,
		0,0,307,309,1,0,0,0,308,310,3,90,45,0,309,308,1,0,0,0,309,310,1,0,0,0,
		310,312,1,0,0,0,311,313,3,4,2,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,
		1,0,0,0,314,315,3,148,74,0,315,316,3,2,1,0,316,27,1,0,0,0,317,318,5,28,
		0,0,318,319,3,84,42,0,319,320,5,7,0,0,320,321,3,82,41,0,321,322,3,2,1,
		0,322,29,1,0,0,0,323,327,3,32,16,0,324,327,3,34,17,0,325,327,3,36,18,0,
		326,323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,31,1,0,0,0,328,329,
		5,23,0,0,329,330,3,54,27,0,330,331,5,83,0,0,331,332,3,68,34,0,332,333,
		5,36,0,0,333,336,3,68,34,0,334,335,5,14,0,0,335,337,3,68,34,0,336,334,
		1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,340,3,4,2,0,339,338,1,0,0,
		0,339,340,1,0,0,0,340,357,1,0,0,0,341,343,3,38,19,0,342,344,3,4,2,0,343,
		342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,3,40,20,0,346,345,
		1,0,0,0,346,347,1,0,0,0,347,358,1,0,0,0,348,350,3,40,20,0,349,351,3,4,
		2,0,350,349,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,3,38,19,0,
		353,352,1,0,0,0,353,354,1,0,0,0,354,358,1,0,0,0,355,358,3,38,19,0,356,
		358,3,40,20,0,357,341,1,0,0,0,357,348,1,0,0,0,357,355,1,0,0,0,357,356,
		1,0,0,0,357,358,1,0,0,0,358,362,1,0,0,0,359,361,3,8,4,0,360,359,1,0,0,
		0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,364,
		362,1,0,0,0,365,367,3,4,2,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,
		0,0,0,368,369,5,22,0,0,369,33,1,0,0,0,370,372,3,38,19,0,371,373,3,40,20,
		0,372,371,1,0,0,0,372,373,1,0,0,0,373,377,1,0,0,0,374,376,3,8,4,0,375,
		374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,381,1,
		0,0,0,379,377,1,0,0,0,380,382,3,4,2,0,381,380,1,0,0,0,381,382,1,0,0,0,
		382,383,1,0,0,0,383,384,5,22,0,0,384,35,1,0,0,0,385,387,3,40,20,0,386,
		388,3,38,19,0,387,386,1,0,0,0,387,388,1,0,0,0,388,392,1,0,0,0,389,391,
		3,8,4,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,
		0,393,396,1,0,0,0,394,392,1,0,0,0,395,397,3,4,2,0,396,395,1,0,0,0,396,
		397,1,0,0,0,397,398,1,0,0,0,398,399,5,22,0,0,399,37,1,0,0,0,400,401,5,
		45,0,0,401,402,3,68,34,0,402,39,1,0,0,0,403,404,5,44,0,0,404,405,3,68,
		34,0,405,41,1,0,0,0,406,408,5,26,0,0,407,409,3,4,2,0,408,407,1,0,0,0,408,
		409,1,0,0,0,409,410,1,0,0,0,410,412,3,44,22,0,411,413,3,4,2,0,412,411,
		1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,50,25,0,415,414,1,0,
		0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,419,3,4,2,0,418,417,1,0,0,0,418,
		419,1,0,0,0,419,421,1,0,0,0,420,422,3,48,24,0,421,420,1,0,0,0,421,422,
		1,0,0,0,422,424,1,0,0,0,423,425,3,4,2,0,424,423,1,0,0,0,424,425,1,0,0,
		0,425,426,1,0,0,0,426,427,5,22,0,0,427,43,1,0,0,0,428,430,3,4,2,0,429,
		428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,433,3,68,34,0,432,434,
		3,4,2,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,437,5,35,0,
		0,436,438,3,4,2,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
		440,3,46,23,0,440,45,1,0,0,0,441,443,3,8,4,0,442,441,1,0,0,0,443,446,1,
		0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,47,1,0,0,0,446,444,1,0,0,0,447,
		449,5,20,0,0,448,450,3,4,2,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,
		0,0,0,451,452,3,46,23,0,452,49,1,0,0,0,453,455,5,19,0,0,454,456,3,4,2,
		0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,3,44,22,0,458,
		453,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,51,1,0,
		0,0,462,463,3,54,27,0,463,464,5,83,0,0,464,465,3,68,34,0,465,466,3,2,1,
		0,466,53,1,0,0,0,467,468,6,27,-1,0,468,470,3,56,28,0,469,471,3,58,29,0,
		470,469,1,0,0,0,470,471,1,0,0,0,471,480,1,0,0,0,472,473,10,2,0,0,473,474,
		5,92,0,0,474,476,3,56,28,0,475,477,3,58,29,0,476,475,1,0,0,0,476,477,1,
		0,0,0,477,479,1,0,0,0,478,472,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,
		480,481,1,0,0,0,481,55,1,0,0,0,482,480,1,0,0,0,483,485,3,60,30,0,484,483,
		1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,3,146,73,0,487,57,1,0,
		0,0,488,490,3,64,32,0,489,488,1,0,0,0,490,491,1,0,0,0,491,489,1,0,0,0,
		491,492,1,0,0,0,492,59,1,0,0,0,493,495,3,62,31,0,494,493,1,0,0,0,495,496,
		1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,61,1,0,0,0,498,500,3,146,73,
		0,499,501,3,64,32,0,500,499,1,0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,
		503,5,86,0,0,503,63,1,0,0,0,504,506,5,90,0,0,505,507,3,66,33,0,506,505,
		1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,91,0,0,509,65,1,0,0,
		0,510,515,3,68,34,0,511,512,5,89,0,0,512,514,3,68,34,0,513,511,1,0,0,0,
		514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,67,1,0,0,0,517,515,
		1,0,0,0,518,519,6,34,-1,0,519,523,3,70,35,0,520,523,3,86,43,0,521,523,
		3,88,44,0,522,518,1,0,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,636,1,0,
		0,0,524,526,10,11,0,0,525,527,3,4,2,0,526,525,1,0,0,0,526,527,1,0,0,0,
		527,528,1,0,0,0,528,530,3,106,53,0,529,531,3,4,2,0,530,529,1,0,0,0,530,
		531,1,0,0,0,531,532,1,0,0,0,532,533,3,68,34,11,533,635,1,0,0,0,534,536,
		10,10,0,0,535,537,3,4,2,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,
		0,0,538,540,3,112,56,0,539,541,3,4,2,0,540,539,1,0,0,0,540,541,1,0,0,0,
		541,542,1,0,0,0,542,543,3,68,34,11,543,635,1,0,0,0,544,546,10,9,0,0,545,
		547,3,4,2,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,550,3,
		110,55,0,549,551,3,4,2,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,
		0,552,553,3,68,34,10,553,635,1,0,0,0,554,556,10,8,0,0,555,557,3,4,2,0,
		556,555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,3,108,54,0,559,
		561,3,4,2,0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,3,
		68,34,9,563,635,1,0,0,0,564,566,10,7,0,0,565,567,3,4,2,0,566,565,1,0,0,
		0,566,567,1,0,0,0,567,568,1,0,0,0,568,570,3,104,52,0,569,571,3,4,2,0,570,
		569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,3,68,34,8,573,635,
		1,0,0,0,574,576,10,6,0,0,575,577,3,4,2,0,576,575,1,0,0,0,576,577,1,0,0,
		0,577,578,1,0,0,0,578,580,3,120,60,0,579,581,3,4,2,0,580,579,1,0,0,0,580,
		581,1,0,0,0,581,582,1,0,0,0,582,583,3,68,34,7,583,635,1,0,0,0,584,586,
		10,5,0,0,585,587,3,4,2,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,
		0,588,590,3,114,57,0,589,591,3,4,2,0,590,589,1,0,0,0,590,591,1,0,0,0,591,
		592,1,0,0,0,592,593,3,68,34,6,593,635,1,0,0,0,594,596,10,4,0,0,595,597,
		3,4,2,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,600,3,116,
		58,0,599,601,3,4,2,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,
		603,3,68,34,5,603,635,1,0,0,0,604,606,10,3,0,0,605,607,3,4,2,0,606,605,
		1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,610,3,118,59,0,609,611,3,4,
		2,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,68,34,4,
		613,635,1,0,0,0,614,616,10,2,0,0,615,617,3,4,2,0,616,615,1,0,0,0,616,617,
		1,0,0,0,617,618,1,0,0,0,618,620,3,100,50,0,619,621,3,4,2,0,620,619,1,0,
		0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,623,3,68,34,3,623,635,1,0,0,0,
		624,626,10,1,0,0,625,627,3,4,2,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,
		1,0,0,0,628,630,3,102,51,0,629,631,3,4,2,0,630,629,1,0,0,0,630,631,1,0,
		0,0,631,632,1,0,0,0,632,633,3,68,34,2,633,635,1,0,0,0,634,524,1,0,0,0,
		634,534,1,0,0,0,634,544,1,0,0,0,634,554,1,0,0,0,634,564,1,0,0,0,634,574,
		1,0,0,0,634,584,1,0,0,0,634,594,1,0,0,0,634,604,1,0,0,0,634,614,1,0,0,
		0,634,624,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,
		69,1,0,0,0,638,636,1,0,0,0,639,644,3,74,37,0,640,644,3,72,36,0,641,644,
		3,84,42,0,642,644,3,54,27,0,643,639,1,0,0,0,643,640,1,0,0,0,643,641,1,
		0,0,0,643,642,1,0,0,0,644,71,1,0,0,0,645,646,5,65,0,0,646,73,1,0,0,0,647,
		652,3,78,39,0,648,652,3,80,40,0,649,652,3,76,38,0,650,652,3,82,41,0,651,
		647,1,0,0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,0,0,652,75,1,0,
		0,0,653,654,5,2,0,0,654,77,1,0,0,0,655,656,5,5,0,0,656,79,1,0,0,0,657,
		658,5,3,0,0,658,81,1,0,0,0,659,662,5,6,0,0,660,662,5,4,0,0,661,659,1,0,
		0,0,661,660,1,0,0,0,662,83,1,0,0,0,663,664,5,94,0,0,664,85,1,0,0,0,665,
		666,5,90,0,0,666,667,3,68,34,0,667,668,5,91,0,0,668,694,1,0,0,0,669,670,
		5,72,0,0,670,671,3,68,34,0,671,672,5,91,0,0,672,694,1,0,0,0,673,674,5,
		73,0,0,674,675,3,68,34,0,675,676,5,91,0,0,676,694,1,0,0,0,677,678,5,75,
		0,0,678,679,3,68,34,0,679,680,5,91,0,0,680,694,1,0,0,0,681,682,5,77,0,
		0,682,683,3,68,34,0,683,684,5,91,0,0,684,694,1,0,0,0,685,686,5,74,0,0,
		686,687,3,68,34,0,687,688,5,91,0,0,688,694,1,0,0,0,689,690,5,76,0,0,690,
		691,3,68,34,0,691,692,5,91,0,0,692,694,1,0,0,0,693,665,1,0,0,0,693,669,
		1,0,0,0,693,673,1,0,0,0,693,677,1,0,0,0,693,681,1,0,0,0,693,685,1,0,0,
		0,693,689,1,0,0,0,694,87,1,0,0,0,695,696,3,122,61,0,696,697,3,68,34,0,
		697,89,1,0,0,0,698,699,5,90,0,0,699,700,3,94,47,0,700,701,5,91,0,0,701,
		91,1,0,0,0,702,703,3,96,48,0,703,704,5,46,0,0,704,706,1,0,0,0,705,702,
		1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,710,3,98,49,0,708,710,5,68,
		0,0,709,705,1,0,0,0,709,708,1,0,0,0,710,93,1,0,0,0,711,716,3,92,46,0,712,
		713,5,89,0,0,713,715,3,92,46,0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,
		1,0,0,0,716,717,1,0,0,0,717,95,1,0,0,0,718,716,1,0,0,0,719,720,3,68,34,
		0,720,97,1,0,0,0,721,722,3,68,34,0,722,99,1,0,0,0,723,724,5,48,0,0,724,
		101,1,0,0,0,725,726,5,49,0,0,726,103,1,0,0,0,727,728,5,47,0,0,728,105,
		1,0,0,0,729,730,5,64,0,0,730,107,1,0,0,0,731,732,7,1,0,0,732,109,1,0,0,
		0,733,734,7,2,0,0,734,111,1,0,0,0,735,736,7,3,0,0,736,113,1,0,0,0,737,
		738,7,4,0,0,738,115,1,0,0,0,739,740,7,5,0,0,740,117,1,0,0,0,741,742,7,
		6,0,0,742,119,1,0,0,0,743,744,7,7,0,0,744,121,1,0,0,0,745,746,7,8,0,0,
		746,123,1,0,0,0,747,749,3,132,66,0,748,750,3,4,2,0,749,748,1,0,0,0,749,
		750,1,0,0,0,750,751,1,0,0,0,751,753,3,160,80,0,752,754,3,4,2,0,753,752,
		1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,757,3,134,67,0,756,758,3,4,
		2,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,22,0,0,760,
		125,1,0,0,0,761,766,3,146,73,0,762,763,5,86,0,0,763,765,3,146,73,0,764,
		762,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,127,1,
		0,0,0,768,766,1,0,0,0,769,770,5,90,0,0,770,775,3,146,73,0,771,772,5,89,
		0,0,772,774,3,146,73,0,773,771,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,
		775,776,1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,779,5,91,0,0,779,129,
		1,0,0,0,780,781,5,90,0,0,781,786,5,6,0,0,782,783,5,89,0,0,783,785,5,6,
		0,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,
		789,1,0,0,0,788,786,1,0,0,0,789,790,5,91,0,0,790,131,1,0,0,0,791,793,3,
		146,73,0,792,794,3,90,45,0,793,792,1,0,0,0,793,794,1,0,0,0,794,133,1,0,
		0,0,795,797,3,4,2,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,
		800,3,138,69,0,799,801,3,4,2,0,800,799,1,0,0,0,800,801,1,0,0,0,801,812,
		1,0,0,0,802,804,3,160,80,0,803,805,3,4,2,0,804,803,1,0,0,0,804,805,1,0,
		0,0,805,806,1,0,0,0,806,808,3,138,69,0,807,809,3,4,2,0,808,807,1,0,0,0,
		808,809,1,0,0,0,809,811,1,0,0,0,810,802,1,0,0,0,811,814,1,0,0,0,812,810,
		1,0,0,0,812,813,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,815,817,3,160,
		80,0,816,815,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,820,3,4,2,0,819,
		818,1,0,0,0,819,820,1,0,0,0,820,135,1,0,0,0,821,823,3,4,2,0,822,821,1,
		0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,826,3,144,72,0,825,827,3,4,2,
		0,826,825,1,0,0,0,826,827,1,0,0,0,827,838,1,0,0,0,828,830,3,160,80,0,829,
		831,3,4,2,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,834,3,
		144,72,0,833,835,3,4,2,0,834,833,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,
		0,836,828,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,
		842,1,0,0,0,840,838,1,0,0,0,841,843,3,160,80,0,842,841,1,0,0,0,842,843,
		1,0,0,0,843,845,1,0,0,0,844,846,3,4,2,0,845,844,1,0,0,0,845,846,1,0,0,
		0,846,137,1,0,0,0,847,850,3,140,70,0,848,850,3,124,62,0,849,847,1,0,0,
		0,849,848,1,0,0,0,850,139,1,0,0,0,851,853,3,146,73,0,852,854,3,4,2,0,853,
		852,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,857,3,90,45,0,856,855,
		1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,3,148,74,0,859,141,1,0,
		0,0,860,861,3,124,62,0,861,143,1,0,0,0,862,863,3,146,73,0,863,145,1,0,
		0,0,864,867,3,164,82,0,865,867,5,93,0,0,866,864,1,0,0,0,866,865,1,0,0,
		0,867,147,1,0,0,0,868,875,3,152,76,0,869,875,3,154,77,0,870,875,3,156,
		78,0,871,875,3,158,79,0,872,875,3,146,73,0,873,875,3,150,75,0,874,868,
		1,0,0,0,874,869,1,0,0,0,874,870,1,0,0,0,874,871,1,0,0,0,874,872,1,0,0,
		0,874,873,1,0,0,0,875,149,1,0,0,0,876,877,5,43,0,0,877,151,1,0,0,0,878,
		891,5,11,0,0,879,891,5,8,0,0,880,891,5,9,0,0,881,891,5,10,0,0,882,891,
		5,40,0,0,883,891,5,37,0,0,884,891,5,38,0,0,885,891,5,39,0,0,886,888,7,
		9,0,0,887,889,3,58,29,0,888,887,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,
		0,890,878,1,0,0,0,890,879,1,0,0,0,890,880,1,0,0,0,890,881,1,0,0,0,890,
		882,1,0,0,0,890,883,1,0,0,0,890,884,1,0,0,0,890,885,1,0,0,0,890,886,1,
		0,0,0,891,153,1,0,0,0,892,893,7,10,0,0,893,894,3,58,29,0,894,155,1,0,0,
		0,895,897,5,33,0,0,896,898,3,58,29,0,897,896,1,0,0,0,897,898,1,0,0,0,898,
		157,1,0,0,0,899,901,5,13,0,0,900,902,3,58,29,0,901,900,1,0,0,0,901,902,
		1,0,0,0,902,159,1,0,0,0,903,904,5,89,0,0,904,161,1,0,0,0,905,907,3,4,2,
		0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,909,5,0,0,1,909,
		163,1,0,0,0,910,911,7,11,0,0,911,165,1,0,0,0,129,169,176,181,187,203,213,
		217,222,226,232,236,241,245,254,258,261,265,269,275,282,288,292,295,298,
		302,306,309,312,326,336,339,343,346,350,353,357,362,366,372,377,381,387,
		392,396,408,412,415,418,421,424,429,433,437,444,449,455,460,470,476,480,
		484,491,496,500,506,515,522,526,530,536,540,546,550,556,560,566,570,576,
		580,586,590,596,600,606,610,616,620,626,630,634,636,643,651,661,693,705,
		709,716,749,753,757,766,775,786,793,796,800,804,808,812,816,819,822,826,
		830,834,838,842,845,849,853,856,866,874,888,890,897,901,906
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
