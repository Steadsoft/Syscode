//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syscode.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SyscodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINECOM=2, HYPERCOMMENT=3, HEX_LITERAL=4, OCT_LITERAL=5, DEC_LITERAL=6, 
		BIN_LITERAL=7, INTEGER=8, ALIGNED=9, AS=10, BIN16=11, BIN32=12, BIN64=13, 
		BIN8=14, BIN=15, BIT=16, BY=17, CALL=18, CONST=19, DCL=20, DEC=21, DEF=22, 
		ELIF=23, ELSE=24, END=25, ENTRY=26, ENUM=27, FOR=28, FOREVER=29, FUNC=30, 
		GOTO=31, IF=32, IS=33, LABEL=34, LIT=35, PATH=36, PROC=37, RETURN=38, 
		SCOPE=39, STRING=40, STRUCT=41, THEN=42, TO=43, TYPE=44, UBIN16=45, UBIN32=46, 
		UBIN64=47, UBIN8=48, UBIN=49, UDEC=50, UNALIGNED=51, UNIT=52, UNTIL=53, 
		WHILE=54, COLON=55, CONC=56, LOGAND=57, LOGOR=58, AND=59, OR=60, NAND=61, 
		NOR=62, XOR=63, XNOR=64, NOT=65, GT=66, LT=67, GTE=68, LTE=69, NGT=70, 
		NLT=71, NE=72, POWER=73, STR_LITERAL=74, PLUS=75, MINUS=76, TIMES=77, 
		LCOM=78, DIVIDE=79, PCNT=80, QUOTE=81, REDAND=82, REDOR=83, REDXOR=84, 
		L_LOG_SHIFT=85, R_LOG_SHIFT=86, R_ART_SHIFT=87, L_ROTATE=88, R_ROTATE=89, 
		EQUALS=90, ASSIGN=91, COMPASSIGN=92, DOT=93, AT=94, SEMICOLON=95, COMMA=96, 
		LPAR=97, RPAR=98, RARROW=99, IDENTIFIER=100, CUSTOM_LITERAL=101, NEWLINE=102, 
		WS=103;
	public const int
		RULE_preamble = 0, RULE_statementSeparator = 1, RULE_emptyLines = 2, RULE_compilation = 3, 
		RULE_statement = 4, RULE_structBody = 5, RULE_structField = 6, RULE_label = 7, 
		RULE_labelSubscript = 8, RULE_goto = 9, RULE_gotoSubscript = 10, RULE_scope = 11, 
		RULE_blockScope = 12, RULE_procedure = 13, RULE_enum = 14, RULE_call = 15, 
		RULE_return = 16, RULE_declare = 17, RULE_type = 18, RULE_literal = 19, 
		RULE_loop = 20, RULE_forLoop = 21, RULE_whileLoop = 22, RULE_untilLoop = 23, 
		RULE_whileCondition = 24, RULE_untilCondition = 25, RULE_if = 26, RULE_exprThenBlock = 27, 
		RULE_thenBlock = 28, RULE_elseBlock = 29, RULE_elifBlock = 30, RULE_assignment = 31, 
		RULE_comparer = 32, RULE_reference = 33, RULE_basicReference = 34, RULE_argumentsList = 35, 
		RULE_structureQualificationList = 36, RULE_structureQualification = 37, 
		RULE_arguments = 38, RULE_subscriptCommalist = 39, RULE_expression = 40, 
		RULE_primitiveExpression = 41, RULE_strLiteral = 42, RULE_numericLiteral = 43, 
		RULE_hexLiteral = 44, RULE_binLiteral = 45, RULE_octLiteral = 46, RULE_decLiteral = 47, 
		RULE_customLiteral = 48, RULE_parenthesizedExpression = 49, RULE_prefixExpression = 50, 
		RULE_dimensionSuffix = 51, RULE_boundPair = 52, RULE_boundPairCommalist = 53, 
		RULE_lowerBound = 54, RULE_upperBound = 55, RULE_logand = 56, RULE_logor = 57, 
		RULE_concatenate = 58, RULE_power = 59, RULE_shiftRotate = 60, RULE_addSub = 61, 
		RULE_mulDiv = 62, RULE_boolAnd = 63, RULE_boolXor = 64, RULE_boolOr = 65, 
		RULE_comparison = 66, RULE_prefixOperator = 67, RULE_qualifiedName = 68, 
		RULE_paramList = 69, RULE_constArrayList = 70, RULE_enumMembers = 71, 
		RULE_enumMember = 72, RULE_identifier = 73, RULE_typename = 74, RULE_labelType = 75, 
		RULE_entryType = 76, RULE_entryList = 77, RULE_structAttributes = 78, 
		RULE_memberAttributes = 79, RULE_constAttribute = 80, RULE_alignedAttribute = 81, 
		RULE_unalignedAttribute = 82, RULE_unitType = 83, RULE_binaryType = 84, 
		RULE_decimalType = 85, RULE_stringType = 86, RULE_bitstringType = 87, 
		RULE_memberSeparator = 88, RULE_endOfFile = 89, RULE_keyword = 90;
	public static readonly string[] ruleNames = {
		"preamble", "statementSeparator", "emptyLines", "compilation", "statement", 
		"structBody", "structField", "label", "labelSubscript", "goto", "gotoSubscript", 
		"scope", "blockScope", "procedure", "enum", "call", "return", "declare", 
		"type", "literal", "loop", "forLoop", "whileLoop", "untilLoop", "whileCondition", 
		"untilCondition", "if", "exprThenBlock", "thenBlock", "elseBlock", "elifBlock", 
		"assignment", "comparer", "reference", "basicReference", "argumentsList", 
		"structureQualificationList", "structureQualification", "arguments", "subscriptCommalist", 
		"expression", "primitiveExpression", "strLiteral", "numericLiteral", "hexLiteral", 
		"binLiteral", "octLiteral", "decLiteral", "customLiteral", "parenthesizedExpression", 
		"prefixExpression", "dimensionSuffix", "boundPair", "boundPairCommalist", 
		"lowerBound", "upperBound", "logand", "logor", "concatenate", "power", 
		"shiftRotate", "addSub", "mulDiv", "boolAnd", "boolXor", "boolOr", "comparison", 
		"prefixOperator", "qualifiedName", "paramList", "constArrayList", "enumMembers", 
		"enumMember", "identifier", "typename", "labelType", "entryType", "entryList", 
		"structAttributes", "memberAttributes", "constAttribute", "alignedAttribute", 
		"unalignedAttribute", "unitType", "binaryType", "decimalType", "stringType", 
		"bitstringType", "memberSeparator", "endOfFile", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'aligned'", "'as'", 
		"'bin16'", "'bin32'", "'bin64'", "'bin8'", "'bin'", "'bit'", "'by'", "'call'", 
		"'const'", "'dcl'", "'dec'", "'def'", "'elif'", "'else'", "'end'", "'entry'", 
		"'enum'", "'for'", "'forever'", null, "'goto'", "'if'", "'is'", "'label'", 
		null, "'path'", null, "'return'", "'scope'", "'string'", "'struct'", "'then'", 
		"'to'", "'type'", "'ubin16'", "'ubin32'", "'ubin64'", "'ubin8'", "'ubin'", 
		"'udec'", "'unaligned'", "'unit'", "'until'", "'while'", "':'", "'++'", 
		"'&&'", "'||'", "'&'", "'|'", "'~&'", "'~|'", null, null, "'~'", "'>'", 
		"'<'", null, null, "'~>'", "'~<'", null, null, null, "'+'", "'-'", "'*'", 
		"'//'", null, "'%'", "'\"'", "'<&'", "'<|'", "'<^'", "'<<'", "'>>'", "'>>>'", 
		null, null, "'='", "'<-'", null, "'.'", "'@'", "';'", "','", "'('", "')'", 
		"'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINECOM", "HYPERCOMMENT", "HEX_LITERAL", "OCT_LITERAL", 
		"DEC_LITERAL", "BIN_LITERAL", "INTEGER", "ALIGNED", "AS", "BIN16", "BIN32", 
		"BIN64", "BIN8", "BIN", "BIT", "BY", "CALL", "CONST", "DCL", "DEC", "DEF", 
		"ELIF", "ELSE", "END", "ENTRY", "ENUM", "FOR", "FOREVER", "FUNC", "GOTO", 
		"IF", "IS", "LABEL", "LIT", "PATH", "PROC", "RETURN", "SCOPE", "STRING", 
		"STRUCT", "THEN", "TO", "TYPE", "UBIN16", "UBIN32", "UBIN64", "UBIN8", 
		"UBIN", "UDEC", "UNALIGNED", "UNIT", "UNTIL", "WHILE", "COLON", "CONC", 
		"LOGAND", "LOGOR", "AND", "OR", "NAND", "NOR", "XOR", "XNOR", "NOT", "GT", 
		"LT", "GTE", "LTE", "NGT", "NLT", "NE", "POWER", "STR_LITERAL", "PLUS", 
		"MINUS", "TIMES", "LCOM", "DIVIDE", "PCNT", "QUOTE", "REDAND", "REDOR", 
		"REDXOR", "L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE", "R_ROTATE", 
		"EQUALS", "ASSIGN", "COMPASSIGN", "DOT", "AT", "SEMICOLON", "COMMA", "LPAR", 
		"RPAR", "RARROW", "IDENTIFIER", "CUSTOM_LITERAL", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syscode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyscodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyscodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyscodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SyscodeParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SyscodeParser.SEMICOLON, i);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 0, RULE_preamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 182;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEMICOLON || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SyscodeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SyscodeParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==SEMICOLON || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		public EmptyLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLines; } }
	}

	[RuleVersion(0)]
	public EmptyLinesContext emptyLines() {
		EmptyLinesContext _localctx = new EmptyLinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyLines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 189;
					Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndOfFileContext endOfFile() {
			return GetRuleContext<EndOfFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation; } }
	}

	[RuleVersion(0)]
	public CompilationContext compilation() {
		CompilationContext _localctx = new CompilationContext(Context, State);
		EnterRule(_localctx, 6, RULE_compilation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194;
					statement();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 200;
			endOfFile();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoContext @goto() {
			return GetRuleContext<GotoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON || _la==NEWLINE) {
				{
				State = 202;
				preamble();
				}
			}

			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 205;
				call();
				}
				break;
			case 2:
				{
				State = 206;
				@return();
				}
				break;
			case 3:
				{
				State = 207;
				label();
				}
				break;
			case 4:
				{
				State = 208;
				scope();
				}
				break;
			case 5:
				{
				State = 209;
				@enum();
				}
				break;
			case 6:
				{
				State = 210;
				@if();
				}
				break;
			case 7:
				{
				State = 211;
				declare();
				}
				break;
			case 8:
				{
				State = 212;
				type();
				}
				break;
			case 9:
				{
				State = 213;
				literal();
				}
				break;
			case 10:
				{
				State = 214;
				procedure();
				}
				break;
			case 11:
				{
				State = 215;
				forLoop();
				}
				break;
			case 12:
				{
				State = 216;
				whileLoop();
				}
				break;
			case 13:
				{
				State = 217;
				untilLoop();
				}
				break;
			case 14:
				{
				State = 218;
				@goto();
				}
				break;
			case 15:
				{
				State = 219;
				assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAttributesContext structAttributes() {
			return GetRuleContext<StructAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext[] structBody() {
			return GetRuleContexts<StructBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody(int i) {
			return GetRuleContext<StructBodyContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_structBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_localctx.Spelling = identifier();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 223;
				dimensionSuffix();
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALIGNED || _la==UNALIGNED) {
				{
				State = 226;
				structAttributes();
				}
			}

			State = 229;
			statementSeparator();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 230;
				emptyLines();
				}
			}

			State = 242;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 235;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 233;
						structField();
						}
						break;
					case 2:
						{
						State = 234;
						structBody();
						}
						break;
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 237;
						emptyLines();
						}
					}

					}
					} 
				}
				State = 244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 245;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public TypenameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext memberAttributes() {
			return GetRuleContext<MemberAttributesContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_localctx.Spelling = identifier();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 248;
				dimensionSuffix();
				}
			}

			State = 251;
			_localctx.Type = typename();
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799814210048L) != 0)) {
				{
				State = 252;
				memberAttributes();
				}
			}

			State = 255;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SyscodeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelSubscriptContext labelSubscript() {
			return GetRuleContext<LabelSubscriptContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(AT);
			State = 258;
			_localctx.Spelling = identifier();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 259;
				labelSubscript();
				}
			}

			State = 262;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public LabelSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelSubscript; } }
	}

	[RuleVersion(0)]
	public LabelSubscriptContext labelSubscript() {
		LabelSubscriptContext _localctx = new LabelSubscriptContext(Context, State);
		EnterRule(_localctx, 16, RULE_labelSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(LPAR);
			State = 265;
			decLiteral();
			State = 266;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public GotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto; } }
	}

	[RuleVersion(0)]
	public GotoContext @goto() {
		GotoContext _localctx = new GotoContext(Context, State);
		EnterRule(_localctx, 18, RULE_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(GOTO);
			State = 269;
			reference(0);
			State = 270;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public GotoSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoSubscript; } }
	}

	[RuleVersion(0)]
	public GotoSubscriptContext gotoSubscript() {
		GotoSubscriptContext _localctx = new GotoSubscriptContext(Context, State);
		EnterRule(_localctx, 20, RULE_gotoSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(LPAR);
			State = 273;
			expression(0);
			State = 274;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeContext blockScope() {
			return GetRuleContext<BlockScopeContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 22, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			blockScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeContext : ParserRuleContext {
		public QualifiedNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScope; } }
	}

	[RuleVersion(0)]
	public BlockScopeContext blockScope() {
		BlockScopeContext _localctx = new BlockScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockScope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 278;
			Match(SCOPE);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 279;
				emptyLines();
				}
			}

			State = 282;
			_localctx.Name = qualifiedName();
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 283;
				emptyLines();
				}
				break;
			}
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					statement();
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 292;
				emptyLines();
				}
			}

			State = 295;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 26, RULE_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(PROC);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 298;
				emptyLines();
				}
			}

			State = 301;
			_localctx.Spelling = identifier();
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 302;
				paramList();
				}
			}

			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 305;
					statement();
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 311;
				emptyLines();
				}
			}

			State = 314;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IdentifierContext Name;
		public EnumMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 28, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(ENUM);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 317;
				emptyLines();
				}
			}

			State = 320;
			_localctx.Name = identifier();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 321;
				emptyLines();
				}
			}

			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36028797018963456L) != 0) || _la==IDENTIFIER) {
				{
				State = 324;
				typename();
				}
			}

			State = 327;
			memberSeparator();
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 328;
				emptyLines();
				}
				break;
			}
			State = 331;
			_localctx.Members = enumMembers();
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 332;
				emptyLines();
				}
			}

			State = 335;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 30, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(CALL);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 338;
				emptyLines();
				}
			}

			State = 341;
			reference(0);
			State = 342;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 32, RULE_return);
		int _la;
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 344;
				Match(RETURN);
				State = 352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 345;
						emptyLines();
						}
					}

					State = 348;
					Match(LPAR);
					State = 349;
					expression(0);
					State = 350;
					Match(RPAR);
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 354;
				Match(RETURN);
				State = 359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 355;
						emptyLines();
						}
					}

					State = 358;
					expression(0);
					}
					break;
				}
				}
				State = 361;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		public TypenameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext[] memberAttributes() {
			return GetRuleContexts<MemberAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext memberAttributes(int i) {
			return GetRuleContext<MemberAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 34, RULE_declare);
		int _la;
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				Match(DCL);
				State = 365;
				structBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366;
				Match(DCL);
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 367;
					emptyLines();
					}
				}

				State = 370;
				_localctx.Spelling = identifier();
				State = 372;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 371;
					emptyLines();
					}
					break;
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 374;
					_localctx.Bounds = dimensionSuffix();
					}
				}

				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 377;
					emptyLines();
					}
				}

				State = 380;
				_localctx.Type = typename();
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799814210048L) != 0)) {
					{
					{
					State = 381;
					memberAttributes();
					}
					}
					State = 386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 387;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(TYPE);
			State = 392;
			structBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(LIT);
			State = 395;
			customLiteral();
			State = 396;
			Match(AS);
			State = 397;
			decLiteral();
			State = 398;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 40, RULE_loop);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				forLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				whileLoop();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				untilLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 42, RULE_forLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(FOR);
			State = 406;
			reference(0);
			State = 407;
			Match(EQUALS);
			State = 408;
			expression(0);
			State = 409;
			Match(TO);
			State = 410;
			expression(0);
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 411;
				Match(BY);
				State = 412;
				expression(0);
				}
				break;
			}
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 415;
				emptyLines();
				}
				break;
			}
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 418;
				whileCondition();
				State = 420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 419;
					emptyLines();
					}
					break;
				}
				State = 423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 422;
					untilCondition();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 425;
				untilCondition();
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 426;
					emptyLines();
					}
					break;
				}
				State = 430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 429;
					whileCondition();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 432;
				whileCondition();
				}
				break;
			case 4:
				{
				State = 433;
				untilCondition();
				}
				break;
			}
			State = 439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 436;
					statement();
					}
					} 
				}
				State = 441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 442;
				emptyLines();
				}
			}

			State = 445;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 44, RULE_whileLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			whileCondition();
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 448;
				untilCondition();
				}
				break;
			}
			State = 454;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 451;
					statement();
					}
					} 
				}
				State = 456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 457;
				emptyLines();
				}
			}

			State = 460;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 46, RULE_untilLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			untilCondition();
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 463;
				whileCondition();
				}
				break;
			}
			State = 469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 466;
					statement();
					}
					} 
				}
				State = 471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 472;
				emptyLines();
				}
			}

			State = 475;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCondition; } }
	}

	[RuleVersion(0)]
	public WhileConditionContext whileCondition() {
		WhileConditionContext _localctx = new WhileConditionContext(Context, State);
		EnterRule(_localctx, 48, RULE_whileCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(WHILE);
			State = 478;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UntilConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilCondition; } }
	}

	[RuleVersion(0)]
	public UntilConditionContext untilCondition() {
		UntilConditionContext _localctx = new UntilConditionContext(Context, State);
		EnterRule(_localctx, 50, RULE_untilCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			Match(UNTIL);
			State = 481;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock() {
			return GetRuleContext<ExprThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 52, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(IF);
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 484;
				emptyLines();
				}
				break;
			}
			State = 487;
			exprThenBlock();
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 488;
				emptyLines();
				}
				break;
			}
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIF) {
				{
				State = 491;
				elifBlock();
				}
			}

			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 494;
				emptyLines();
				}
				break;
			}
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 497;
				elseBlock();
				}
			}

			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 500;
				emptyLines();
				}
			}

			State = 503;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ExprThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprThenBlock; } }
	}

	[RuleVersion(0)]
	public ExprThenBlockContext exprThenBlock() {
		ExprThenBlockContext _localctx = new ExprThenBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_exprThenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 505;
				emptyLines();
				}
			}

			State = 508;
			expression(0);
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 509;
				emptyLines();
				}
			}

			State = 512;
			Match(THEN);
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 513;
				emptyLines();
				}
				break;
			}
			State = 516;
			thenBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_thenBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					statement();
					}
					} 
				}
				State = 523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 524;
			Match(ELSE);
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 525;
				emptyLines();
				}
				break;
			}
			State = 528;
			thenBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(SyscodeParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(SyscodeParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext[] exprThenBlock() {
			return GetRuleContexts<ExprThenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock(int i) {
			return GetRuleContext<ExprThenBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_elifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 530;
				Match(ELIF);
				State = 532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 531;
					emptyLines();
					}
					break;
				}
				State = 534;
				exprThenBlock();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELIF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparerContext comparer() {
			return GetRuleContext<ComparerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 62, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			reference(0);
			State = 540;
			comparer();
			State = 541;
			expression(0);
			State = 542;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPASSIGN() { return GetToken(SyscodeParser.COMPASSIGN, 0); }
		public ComparerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparer; } }
	}

	[RuleVersion(0)]
	public ComparerContext comparer() {
		ComparerContext _localctx = new ComparerContext(Context, State);
		EnterRule(_localctx, 64, RULE_comparer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(SyscodeParser.RARROW, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 547;
			basicReference();
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 548;
				argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 551;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 552;
					Match(RARROW);
					State = 553;
					basicReference();
					State = 555;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						State = 554;
						argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 68, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 562;
				structureQualificationList();
				}
				break;
			}
			State = 565;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 70, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 567;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 72, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 572;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SyscodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 74, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_localctx.Spelling = identifier();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 578;
				arguments();
				}
			}

			State = 581;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 76, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(LPAR);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36028797018963952L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 107375103489L) != 0)) {
				{
				State = 584;
				subscriptCommalist();
				}
			}

			State = 587;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 78, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			expression(0);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 590;
				Match(COMMA);
				State = 591;
				expression(0);
				}
				}
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprBinaryContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulDivContext mulDiv() {
			return GetRuleContext<MulDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubContext addSub() {
			return GetRuleContext<AddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftRotateContext shiftRotate() {
			return GetRuleContext<ShiftRotateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenateContext concatenate() {
			return GetRuleContext<ConcatenateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorContext boolXor() {
			return GetRuleContext<BoolXorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrContext boolOr() {
			return GetRuleContext<BoolOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogandContext logand() {
			return GetRuleContext<LogandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogorContext logor() {
			return GetRuleContext<LogorContext>(0);
		}
		public ExprBinaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case WHILE:
			case STR_LITERAL:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 598;
				primitiveExpression();
				}
				break;
			case LPAR:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 599;
				parenthesizedExpression();
				}
				break;
			case NOT:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 600;
				prefixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 713;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 603;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 605;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 604;
							emptyLines();
							}
						}

						State = 607;
						power();
						State = 609;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 608;
							emptyLines();
							}
						}

						State = 611;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 613;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 615;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 614;
							emptyLines();
							}
						}

						State = 617;
						mulDiv();
						State = 619;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 618;
							emptyLines();
							}
						}

						State = 621;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 623;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 624;
							emptyLines();
							}
						}

						State = 627;
						addSub();
						State = 629;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 628;
							emptyLines();
							}
						}

						State = 631;
						((ExprBinaryContext)_localctx).Rite = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 633;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 635;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 634;
							emptyLines();
							}
						}

						State = 637;
						shiftRotate();
						State = 639;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 638;
							emptyLines();
							}
						}

						State = 641;
						((ExprBinaryContext)_localctx).Rite = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 643;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 645;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 644;
							emptyLines();
							}
						}

						State = 647;
						concatenate();
						State = 649;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 648;
							emptyLines();
							}
						}

						State = 651;
						((ExprBinaryContext)_localctx).Rite = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 653;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 655;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 654;
							emptyLines();
							}
						}

						State = 657;
						comparison();
						State = 659;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 658;
							emptyLines();
							}
						}

						State = 661;
						((ExprBinaryContext)_localctx).Rite = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 663;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 665;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 664;
							emptyLines();
							}
						}

						State = 667;
						boolAnd();
						State = 669;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 668;
							emptyLines();
							}
						}

						State = 671;
						((ExprBinaryContext)_localctx).Rite = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 673;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 675;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 674;
							emptyLines();
							}
						}

						State = 677;
						boolXor();
						State = 679;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 678;
							emptyLines();
							}
						}

						State = 681;
						((ExprBinaryContext)_localctx).Rite = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 683;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 685;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 684;
							emptyLines();
							}
						}

						State = 687;
						boolOr();
						State = 689;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 688;
							emptyLines();
							}
						}

						State = 691;
						((ExprBinaryContext)_localctx).Rite = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 693;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 695;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 694;
							emptyLines();
							}
						}

						State = 697;
						logand();
						State = 699;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 698;
							emptyLines();
							}
						}

						State = 701;
						((ExprBinaryContext)_localctx).Rite = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 703;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 705;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 704;
							emptyLines();
							}
						}

						State = 707;
						logor();
						State = 709;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 708;
							emptyLines();
							}
						}

						State = 711;
						((ExprBinaryContext)_localctx).Rite = expression(2);
						}
						break;
					}
					} 
				}
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_primitiveExpression);
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				numericLiteral();
				}
				break;
			case STR_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719;
				strLiteral();
				}
				break;
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720;
				customLiteral();
				}
				break;
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case WHILE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 721;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LITERAL() { return GetToken(SyscodeParser.STR_LITERAL, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(STR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinLiteralContext binLiteral() {
			return GetRuleContext<BinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctLiteralContext octLiteral() {
			return GetRuleContext<OctLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_numericLiteral);
		try {
			State = 730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				binLiteral();
				}
				break;
			case OCT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				octLiteral();
				}
				break;
			case HEX_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 728;
				hexLiteral();
				}
				break;
			case DEC_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 729;
				decLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(SyscodeParser.HEX_LITERAL, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 732;
			Match(HEX_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LITERAL() { return GetToken(SyscodeParser.BIN_LITERAL, 0); }
		public BinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binLiteral; } }
	}

	[RuleVersion(0)]
	public BinLiteralContext binLiteral() {
		BinLiteralContext _localctx = new BinLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_binLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 734;
			Match(BIN_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(SyscodeParser.OCT_LITERAL, 0); }
		public OctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octLiteral; } }
	}

	[RuleVersion(0)]
	public OctLiteralContext octLiteral() {
		OctLiteralContext _localctx = new OctLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_octLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 736;
			Match(OCT_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SyscodeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL() { return GetToken(SyscodeParser.DEC_LITERAL, 0); }
		public DecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLiteral; } }
	}

	[RuleVersion(0)]
	public DecLiteralContext decLiteral() {
		DecLiteralContext _localctx = new DecLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_decLiteral);
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 738;
				Match(INTEGER);
				}
				}
				break;
			case DEC_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 739;
				Match(DEC_LITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOM_LITERAL() { return GetToken(SyscodeParser.CUSTOM_LITERAL, 0); }
		public CustomLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customLiteral; } }
	}

	[RuleVersion(0)]
	public CustomLiteralContext customLiteral() {
		CustomLiteralContext _localctx = new CustomLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_customLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 742;
			Match(CUSTOM_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(LPAR);
			State = 745;
			expression(0);
			State = 746;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			prefixOperator();
			State = 749;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(LPAR);
			State = 752;
			boundPairCommalist();
			State = 753;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SyscodeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 104, RULE_boundPair);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case WHILE:
			case NOT:
			case STR_LITERAL:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
			case LPAR:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 755;
					lowerBound();
					State = 756;
					Match(COLON);
					}
					break;
				}
				State = 760;
				upperBound();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 106, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			boundPair();
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 765;
				Match(COMMA);
				State = 766;
				boundPair();
				}
				}
				State = 771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 108, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 110, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(SyscodeParser.LOGAND, 0); }
		public LogandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logand; } }
	}

	[RuleVersion(0)]
	public LogandContext logand() {
		LogandContext _localctx = new LogandContext(Context, State);
		EnterRule(_localctx, 112, RULE_logand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(LOGAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(SyscodeParser.LOGOR, 0); }
		public LogorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logor; } }
	}

	[RuleVersion(0)]
	public LogorContext logor() {
		LogorContext _localctx = new LogorContext(Context, State);
		EnterRule(_localctx, 114, RULE_logor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			Match(LOGOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(SyscodeParser.CONC, 0); }
		public ConcatenateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate; } }
	}

	[RuleVersion(0)]
	public ConcatenateContext concatenate() {
		ConcatenateContext _localctx = new ConcatenateContext(Context, State);
		EnterRule(_localctx, 116, RULE_concatenate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(CONC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SyscodeParser.POWER, 0); }
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 118, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRotateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE() { return GetToken(SyscodeParser.L_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE() { return GetToken(SyscodeParser.R_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(SyscodeParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(SyscodeParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(SyscodeParser.R_ART_SHIFT, 0); }
		public ShiftRotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRotate; } }
	}

	[RuleVersion(0)]
	public ShiftRotateContext shiftRotate() {
		ShiftRotateContext _localctx = new ShiftRotateContext(Context, State);
		EnterRule(_localctx, 120, RULE_shiftRotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		public AddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSub; } }
	}

	[RuleVersion(0)]
	public AddSubContext addSub() {
		AddSubContext _localctx = new AddSubContext(Context, State);
		EnterRule(_localctx, 122, RULE_addSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SyscodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(SyscodeParser.PCNT, 0); }
		public MulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDiv; } }
	}

	[RuleVersion(0)]
	public MulDivContext mulDiv() {
		MulDivContext _localctx = new MulDivContext(Context, State);
		EnterRule(_localctx, 124, RULE_mulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SyscodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(SyscodeParser.NAND, 0); }
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(Context, State);
		EnterRule(_localctx, 126, RULE_boolAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(SyscodeParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(SyscodeParser.XNOR, 0); }
		public BoolXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXor; } }
	}

	[RuleVersion(0)]
	public BoolXorContext boolXor() {
		BoolXorContext _localctx = new BoolXorContext(Context, State);
		EnterRule(_localctx, 128, RULE_boolXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR || _la==XNOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SyscodeParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(SyscodeParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public BoolOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOr; } }
	}

	[RuleVersion(0)]
	public BoolOrContext boolOr() {
		BoolOrContext _localctx = new BoolOrContext(Context, State);
		EnterRule(_localctx, 130, RULE_boolOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 37L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SyscodeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SyscodeParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SyscodeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SyscodeParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(SyscodeParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(SyscodeParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(SyscodeParser.NLT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 132, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 16777343L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(SyscodeParser.REDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(SyscodeParser.REDOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR() { return GetToken(SyscodeParser.REDXOR, 0); }
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 134, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 920577L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SyscodeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SyscodeParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			identifier();
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 801;
				Match(DOT);
				State = 802;
				identifier();
				}
				}
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 138, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(LPAR);
			State = 809;
			identifier();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 810;
				Match(COMMA);
				State = 811;
				identifier();
				}
				}
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 817;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SyscodeParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SyscodeParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ConstArrayListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayList; } }
	}

	[RuleVersion(0)]
	public ConstArrayListContext constArrayList() {
		ConstArrayListContext _localctx = new ConstArrayListContext(Context, State);
		EnterRule(_localctx, 140, RULE_constArrayList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 819;
			Match(LPAR);
			State = 820;
			Match(INTEGER);
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 821;
				Match(COMMA);
				State = 822;
				Match(INTEGER);
				}
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 828;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 142, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 830;
				emptyLines();
				}
			}

			State = 833;
			enumMember();
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 834;
				emptyLines();
				}
				break;
			}
			State = 847;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 837;
					memberSeparator();
					State = 839;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 838;
						emptyLines();
						}
					}

					State = 841;
					enumMember();
					State = 843;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
					case 1:
						{
						State = 842;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 849;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 850;
				memberSeparator();
				}
			}

			State = 854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 853;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 144, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 856;
			_localctx.Name = identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SyscodeParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_identifier);
		try {
			State = 860;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case PROC:
			case RETURN:
			case SCOPE:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalTypeContext decimalType() {
			return GetRuleContext<DecimalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitstringTypeContext bitstringType() {
			return GetRuleContext<BitstringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType() {
			return GetRuleContext<UnitTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelTypeContext labelType() {
			return GetRuleContext<LabelTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryTypeContext entryType() {
			return GetRuleContext<EntryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 148, RULE_typename);
		try {
			State = 870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 862;
				binaryType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 863;
				decimalType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 864;
				stringType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 865;
				bitstringType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 866;
				unitType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 867;
				labelType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 868;
				entryType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 869;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		public LabelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelType; } }
	}

	[RuleVersion(0)]
	public LabelTypeContext labelType() {
		LabelTypeContext _localctx = new LabelTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_labelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryListContext entryList() {
			return GetRuleContext<EntryListContext>(0);
		}
		public EntryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryType; } }
	}

	[RuleVersion(0)]
	public EntryTypeContext entryType() {
		EntryTypeContext _localctx = new EntryTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_entryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(ENTRY);
			{
			State = 875;
			entryList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public EntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryList; } }
	}

	[RuleVersion(0)]
	public EntryListContext entryList() {
		EntryListContext _localctx = new EntryListContext(Context, State);
		EnterRule(_localctx, 154, RULE_entryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			Match(LPAR);
			State = 878;
			typename();
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 879;
				Match(COMMA);
				State = 880;
				typename();
				}
				}
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 886;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		public StructAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAttributes; } }
	}

	[RuleVersion(0)]
	public StructAttributesContext structAttributes() {
		StructAttributesContext _localctx = new StructAttributesContext(Context, State);
		EnterRule(_localctx, 156, RULE_structAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			_la = TokenStream.LA(1);
			if ( !(_la==ALIGNED || _la==UNALIGNED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAttributesContext : ParserRuleContext {
		public MemberAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAttributes; } }
	 
		public MemberAttributesContext() { }
		public virtual void CopyFrom(MemberAttributesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribUnalignedContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnalignedAttributeContext unalignedAttribute() {
			return GetRuleContext<UnalignedAttributeContext>(0);
		}
		public AttribUnalignedContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribConstContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstAttributeContext constAttribute() {
			return GetRuleContext<ConstAttributeContext>(0);
		}
		public AttribConstContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribAlignedContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlignedAttributeContext alignedAttribute() {
			return GetRuleContext<AlignedAttributeContext>(0);
		}
		public AttribAlignedContext(MemberAttributesContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public MemberAttributesContext memberAttributes() {
		MemberAttributesContext _localctx = new MemberAttributesContext(Context, State);
		EnterRule(_localctx, 158, RULE_memberAttributes);
		try {
			State = 893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				_localctx = new AttribConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 890;
				constAttribute();
				}
				break;
			case ALIGNED:
				_localctx = new AttribAlignedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 891;
				alignedAttribute();
				}
				break;
			case UNALIGNED:
				_localctx = new AttribUnalignedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 892;
				unalignedAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		public ConstAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAttribute; } }
	}

	[RuleVersion(0)]
	public ConstAttributeContext constAttribute() {
		ConstAttributeContext _localctx = new ConstAttributeContext(Context, State);
		EnterRule(_localctx, 160, RULE_constAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		public AlignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedAttribute; } }
	}

	[RuleVersion(0)]
	public AlignedAttributeContext alignedAttribute() {
		AlignedAttributeContext _localctx = new AlignedAttributeContext(Context, State);
		EnterRule(_localctx, 162, RULE_alignedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(ALIGNED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnalignedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		public UnalignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unalignedAttribute; } }
	}

	[RuleVersion(0)]
	public UnalignedAttributeContext unalignedAttribute() {
		UnalignedAttributeContext _localctx = new UnalignedAttributeContext(Context, State);
		EnterRule(_localctx, 164, RULE_unalignedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(UNALIGNED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(UNIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_binaryType);
		int _la;
		try {
			State = 915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 903;
				Match(BIN8);
				}
				break;
			case BIN16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 904;
				Match(BIN16);
				}
				break;
			case BIN32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 905;
				Match(BIN32);
				}
				break;
			case BIN64:
				EnterOuterAlt(_localctx, 4);
				{
				State = 906;
				Match(BIN64);
				}
				break;
			case UBIN8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 907;
				Match(UBIN8);
				}
				break;
			case UBIN16:
				EnterOuterAlt(_localctx, 6);
				{
				State = 908;
				Match(UBIN16);
				}
				break;
			case UBIN32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 909;
				Match(UBIN32);
				}
				break;
			case UBIN64:
				EnterOuterAlt(_localctx, 8);
				{
				State = 910;
				Match(UBIN64);
				}
				break;
			case BIN:
			case UBIN:
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 911;
				_la = TokenStream.LA(1);
				if ( !(_la==BIN || _la==UBIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 912;
					arguments();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		public DecimalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalType; } }
	}

	[RuleVersion(0)]
	public DecimalTypeContext decimalType() {
		DecimalTypeContext _localctx = new DecimalTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_decimalType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 917;
			_la = TokenStream.LA(1);
			if ( !(_la==DEC || _la==UDEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 918;
			arguments();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_stringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(STRING);
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 921;
				argumentsList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitstringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public BitstringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitstringType; } }
	}

	[RuleVersion(0)]
	public BitstringTypeContext bitstringType() {
		BitstringTypeContext _localctx = new BitstringTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_bitstringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(BIT);
			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 925;
				argumentsList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SyscodeParser.COMMA, 0); }
		public MemberSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSeparator; } }
	}

	[RuleVersion(0)]
	public MemberSeparatorContext memberSeparator() {
		MemberSeparatorContext _localctx = new MemberSeparatorContext(Context, State);
		EnterRule(_localctx, 176, RULE_memberSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public EndOfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfFile; } }
	}

	[RuleVersion(0)]
	public EndOfFileContext endOfFile() {
		EndOfFileContext _localctx = new EndOfFileContext(Context, State);
		EnterRule(_localctx, 178, RULE_endOfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 930;
				emptyLines();
				}
			}

			State = 933;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(SyscodeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(SyscodeParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREVER() { return GetToken(SyscodeParser.FOREVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SyscodeParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SyscodeParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 180, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 36028797018963456L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 40: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,103,938,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,4,0,184,
		8,0,11,0,12,0,185,1,1,1,1,1,2,4,2,191,8,2,11,2,12,2,192,1,3,5,3,196,8,
		3,10,3,12,3,199,9,3,1,3,1,3,1,4,3,4,204,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,221,8,4,1,5,1,5,3,5,225,8,5,1,5,
		3,5,228,8,5,1,5,1,5,3,5,232,8,5,1,5,1,5,3,5,236,8,5,1,5,3,5,239,8,5,5,
		5,241,8,5,10,5,12,5,244,9,5,1,5,1,5,1,6,1,6,3,6,250,8,6,1,6,1,6,3,6,254,
		8,6,1,6,1,6,1,7,1,7,1,7,3,7,261,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,3,12,281,8,12,1,12,1,12,
		3,12,285,8,12,1,12,5,12,288,8,12,10,12,12,12,291,9,12,1,12,3,12,294,8,
		12,1,12,1,12,1,13,1,13,3,13,300,8,13,1,13,1,13,3,13,304,8,13,1,13,5,13,
		307,8,13,10,13,12,13,310,9,13,1,13,3,13,313,8,13,1,13,1,13,1,14,1,14,3,
		14,319,8,14,1,14,1,14,3,14,323,8,14,1,14,3,14,326,8,14,1,14,1,14,3,14,
		330,8,14,1,14,1,14,3,14,334,8,14,1,14,1,14,1,15,1,15,3,15,340,8,15,1,15,
		1,15,1,15,1,16,1,16,3,16,347,8,16,1,16,1,16,1,16,1,16,3,16,353,8,16,1,
		16,1,16,3,16,357,8,16,1,16,3,16,360,8,16,1,16,3,16,363,8,16,1,17,1,17,
		1,17,1,17,3,17,369,8,17,1,17,1,17,3,17,373,8,17,1,17,3,17,376,8,17,1,17,
		3,17,379,8,17,1,17,1,17,5,17,383,8,17,10,17,12,17,386,9,17,1,17,1,17,3,
		17,390,8,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		3,20,404,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,414,8,21,1,
		21,3,21,417,8,21,1,21,1,21,3,21,421,8,21,1,21,3,21,424,8,21,1,21,1,21,
		3,21,428,8,21,1,21,3,21,431,8,21,1,21,1,21,3,21,435,8,21,1,21,5,21,438,
		8,21,10,21,12,21,441,9,21,1,21,3,21,444,8,21,1,21,1,21,1,22,1,22,3,22,
		450,8,22,1,22,5,22,453,8,22,10,22,12,22,456,9,22,1,22,3,22,459,8,22,1,
		22,1,22,1,23,1,23,3,23,465,8,23,1,23,5,23,468,8,23,10,23,12,23,471,9,23,
		1,23,3,23,474,8,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,
		26,486,8,26,1,26,1,26,3,26,490,8,26,1,26,3,26,493,8,26,1,26,3,26,496,8,
		26,1,26,3,26,499,8,26,1,26,3,26,502,8,26,1,26,1,26,1,27,3,27,507,8,27,
		1,27,1,27,3,27,511,8,27,1,27,1,27,3,27,515,8,27,1,27,1,27,1,28,5,28,520,
		8,28,10,28,12,28,523,9,28,1,29,1,29,3,29,527,8,29,1,29,1,29,1,30,1,30,
		3,30,533,8,30,1,30,4,30,536,8,30,11,30,12,30,537,1,31,1,31,1,31,1,31,1,
		31,1,32,1,32,1,33,1,33,1,33,3,33,550,8,33,1,33,1,33,1,33,1,33,3,33,556,
		8,33,5,33,558,8,33,10,33,12,33,561,9,33,1,34,3,34,564,8,34,1,34,1,34,1,
		35,4,35,569,8,35,11,35,12,35,570,1,36,4,36,574,8,36,11,36,12,36,575,1,
		37,1,37,3,37,580,8,37,1,37,1,37,1,38,1,38,3,38,586,8,38,1,38,1,38,1,39,
		1,39,1,39,5,39,593,8,39,10,39,12,39,596,9,39,1,40,1,40,1,40,1,40,3,40,
		602,8,40,1,40,1,40,3,40,606,8,40,1,40,1,40,3,40,610,8,40,1,40,1,40,1,40,
		1,40,3,40,616,8,40,1,40,1,40,3,40,620,8,40,1,40,1,40,1,40,1,40,3,40,626,
		8,40,1,40,1,40,3,40,630,8,40,1,40,1,40,1,40,1,40,3,40,636,8,40,1,40,1,
		40,3,40,640,8,40,1,40,1,40,1,40,1,40,3,40,646,8,40,1,40,1,40,3,40,650,
		8,40,1,40,1,40,1,40,1,40,3,40,656,8,40,1,40,1,40,3,40,660,8,40,1,40,1,
		40,1,40,1,40,3,40,666,8,40,1,40,1,40,3,40,670,8,40,1,40,1,40,1,40,1,40,
		3,40,676,8,40,1,40,1,40,3,40,680,8,40,1,40,1,40,1,40,1,40,3,40,686,8,40,
		1,40,1,40,3,40,690,8,40,1,40,1,40,1,40,1,40,3,40,696,8,40,1,40,1,40,3,
		40,700,8,40,1,40,1,40,1,40,1,40,3,40,706,8,40,1,40,1,40,3,40,710,8,40,
		1,40,1,40,5,40,714,8,40,10,40,12,40,717,9,40,1,41,1,41,1,41,1,41,3,41,
		723,8,41,1,42,1,42,1,43,1,43,1,43,1,43,3,43,731,8,43,1,44,1,44,1,45,1,
		45,1,46,1,46,1,47,1,47,3,47,741,8,47,1,48,1,48,1,49,1,49,1,49,1,49,1,50,
		1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,759,8,52,1,52,1,52,3,
		52,763,8,52,1,53,1,53,1,53,5,53,768,8,53,10,53,12,53,771,9,53,1,54,1,54,
		1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
		1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
		1,68,5,68,804,8,68,10,68,12,68,807,9,68,1,69,1,69,1,69,1,69,5,69,813,8,
		69,10,69,12,69,816,9,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,824,8,70,10,
		70,12,70,827,9,70,1,70,1,70,1,71,3,71,832,8,71,1,71,1,71,3,71,836,8,71,
		1,71,1,71,3,71,840,8,71,1,71,1,71,3,71,844,8,71,5,71,846,8,71,10,71,12,
		71,849,9,71,1,71,3,71,852,8,71,1,71,3,71,855,8,71,1,72,1,72,1,73,1,73,
		3,73,861,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,871,8,74,1,
		75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,882,8,77,10,77,12,77,885,
		9,77,1,77,1,77,1,78,1,78,1,79,1,79,1,79,3,79,894,8,79,1,80,1,80,1,81,1,
		81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
		84,3,84,914,8,84,3,84,916,8,84,1,85,1,85,1,85,1,86,1,86,3,86,923,8,86,
		1,87,1,87,3,87,927,8,87,1,88,1,88,1,89,3,89,932,8,89,1,89,1,89,1,90,1,
		90,1,90,0,2,66,80,91,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		160,162,164,166,168,170,172,174,176,178,180,0,15,2,0,95,95,102,102,2,1,
		95,95,102,102,2,0,90,90,92,92,1,0,85,89,1,0,75,76,2,0,77,77,79,80,2,0,
		59,59,61,61,1,0,63,64,3,0,60,60,62,62,65,65,2,0,66,72,90,90,3,0,65,65,
		75,76,82,84,2,0,9,9,51,51,2,0,15,15,49,49,2,0,21,21,50,50,1,0,9,54,1018,
		0,183,1,0,0,0,2,187,1,0,0,0,4,190,1,0,0,0,6,197,1,0,0,0,8,203,1,0,0,0,
		10,222,1,0,0,0,12,247,1,0,0,0,14,257,1,0,0,0,16,264,1,0,0,0,18,268,1,0,
		0,0,20,272,1,0,0,0,22,276,1,0,0,0,24,278,1,0,0,0,26,297,1,0,0,0,28,316,
		1,0,0,0,30,337,1,0,0,0,32,362,1,0,0,0,34,389,1,0,0,0,36,391,1,0,0,0,38,
		394,1,0,0,0,40,403,1,0,0,0,42,405,1,0,0,0,44,447,1,0,0,0,46,462,1,0,0,
		0,48,477,1,0,0,0,50,480,1,0,0,0,52,483,1,0,0,0,54,506,1,0,0,0,56,521,1,
		0,0,0,58,524,1,0,0,0,60,535,1,0,0,0,62,539,1,0,0,0,64,544,1,0,0,0,66,546,
		1,0,0,0,68,563,1,0,0,0,70,568,1,0,0,0,72,573,1,0,0,0,74,577,1,0,0,0,76,
		583,1,0,0,0,78,589,1,0,0,0,80,601,1,0,0,0,82,722,1,0,0,0,84,724,1,0,0,
		0,86,730,1,0,0,0,88,732,1,0,0,0,90,734,1,0,0,0,92,736,1,0,0,0,94,740,1,
		0,0,0,96,742,1,0,0,0,98,744,1,0,0,0,100,748,1,0,0,0,102,751,1,0,0,0,104,
		762,1,0,0,0,106,764,1,0,0,0,108,772,1,0,0,0,110,774,1,0,0,0,112,776,1,
		0,0,0,114,778,1,0,0,0,116,780,1,0,0,0,118,782,1,0,0,0,120,784,1,0,0,0,
		122,786,1,0,0,0,124,788,1,0,0,0,126,790,1,0,0,0,128,792,1,0,0,0,130,794,
		1,0,0,0,132,796,1,0,0,0,134,798,1,0,0,0,136,800,1,0,0,0,138,808,1,0,0,
		0,140,819,1,0,0,0,142,831,1,0,0,0,144,856,1,0,0,0,146,860,1,0,0,0,148,
		870,1,0,0,0,150,872,1,0,0,0,152,874,1,0,0,0,154,877,1,0,0,0,156,888,1,
		0,0,0,158,893,1,0,0,0,160,895,1,0,0,0,162,897,1,0,0,0,164,899,1,0,0,0,
		166,901,1,0,0,0,168,915,1,0,0,0,170,917,1,0,0,0,172,920,1,0,0,0,174,924,
		1,0,0,0,176,928,1,0,0,0,178,931,1,0,0,0,180,935,1,0,0,0,182,184,7,0,0,
		0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
		1,1,0,0,0,187,188,7,1,0,0,188,3,1,0,0,0,189,191,5,102,0,0,190,189,1,0,
		0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,5,1,0,0,0,194,
		196,3,8,4,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,
		0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,3,178,89,0,201,7,1,0,0,0,
		202,204,3,0,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,220,1,0,0,0,205,221,
		3,30,15,0,206,221,3,32,16,0,207,221,3,14,7,0,208,221,3,22,11,0,209,221,
		3,28,14,0,210,221,3,52,26,0,211,221,3,34,17,0,212,221,3,36,18,0,213,221,
		3,38,19,0,214,221,3,26,13,0,215,221,3,42,21,0,216,221,3,44,22,0,217,221,
		3,46,23,0,218,221,3,18,9,0,219,221,3,62,31,0,220,205,1,0,0,0,220,206,1,
		0,0,0,220,207,1,0,0,0,220,208,1,0,0,0,220,209,1,0,0,0,220,210,1,0,0,0,
		220,211,1,0,0,0,220,212,1,0,0,0,220,213,1,0,0,0,220,214,1,0,0,0,220,215,
		1,0,0,0,220,216,1,0,0,0,220,217,1,0,0,0,220,218,1,0,0,0,220,219,1,0,0,
		0,221,9,1,0,0,0,222,224,3,146,73,0,223,225,3,102,51,0,224,223,1,0,0,0,
		224,225,1,0,0,0,225,227,1,0,0,0,226,228,3,156,78,0,227,226,1,0,0,0,227,
		228,1,0,0,0,228,229,1,0,0,0,229,231,3,2,1,0,230,232,3,4,2,0,231,230,1,
		0,0,0,231,232,1,0,0,0,232,242,1,0,0,0,233,236,3,12,6,0,234,236,3,10,5,
		0,235,233,1,0,0,0,235,234,1,0,0,0,236,238,1,0,0,0,237,239,3,4,2,0,238,
		237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,235,1,0,0,0,241,244,1,
		0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,
		245,246,5,25,0,0,246,11,1,0,0,0,247,249,3,146,73,0,248,250,3,102,51,0,
		249,248,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,253,3,148,74,0,252,
		254,3,158,79,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,
		3,2,1,0,256,13,1,0,0,0,257,258,5,94,0,0,258,260,3,146,73,0,259,261,3,16,
		8,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,3,2,1,0,263,
		15,1,0,0,0,264,265,5,97,0,0,265,266,3,94,47,0,266,267,5,98,0,0,267,17,
		1,0,0,0,268,269,5,31,0,0,269,270,3,66,33,0,270,271,3,2,1,0,271,19,1,0,
		0,0,272,273,5,97,0,0,273,274,3,80,40,0,274,275,5,98,0,0,275,21,1,0,0,0,
		276,277,3,24,12,0,277,23,1,0,0,0,278,280,5,39,0,0,279,281,3,4,2,0,280,
		279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,284,3,136,68,0,283,285,
		3,4,2,0,284,283,1,0,0,0,284,285,1,0,0,0,285,289,1,0,0,0,286,288,3,8,4,
		0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,
		293,1,0,0,0,291,289,1,0,0,0,292,294,3,4,2,0,293,292,1,0,0,0,293,294,1,
		0,0,0,294,295,1,0,0,0,295,296,5,25,0,0,296,25,1,0,0,0,297,299,5,37,0,0,
		298,300,3,4,2,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,303,
		3,146,73,0,302,304,3,138,69,0,303,302,1,0,0,0,303,304,1,0,0,0,304,308,
		1,0,0,0,305,307,3,8,4,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,
		0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,313,3,4,2,0,312,
		311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,25,0,0,315,27,1,
		0,0,0,316,318,5,27,0,0,317,319,3,4,2,0,318,317,1,0,0,0,318,319,1,0,0,0,
		319,320,1,0,0,0,320,322,3,146,73,0,321,323,3,4,2,0,322,321,1,0,0,0,322,
		323,1,0,0,0,323,325,1,0,0,0,324,326,3,148,74,0,325,324,1,0,0,0,325,326,
		1,0,0,0,326,327,1,0,0,0,327,329,3,176,88,0,328,330,3,4,2,0,329,328,1,0,
		0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,333,3,142,71,0,332,334,3,4,2,0,
		333,332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,5,25,0,0,336,29,
		1,0,0,0,337,339,5,18,0,0,338,340,3,4,2,0,339,338,1,0,0,0,339,340,1,0,0,
		0,340,341,1,0,0,0,341,342,3,66,33,0,342,343,3,2,1,0,343,31,1,0,0,0,344,
		352,5,38,0,0,345,347,3,4,2,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,
		0,0,0,348,349,5,97,0,0,349,350,3,80,40,0,350,351,5,98,0,0,351,353,1,0,
		0,0,352,346,1,0,0,0,352,353,1,0,0,0,353,363,1,0,0,0,354,359,5,38,0,0,355,
		357,3,4,2,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,3,
		80,40,0,359,356,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,363,3,2,1,
		0,362,344,1,0,0,0,362,354,1,0,0,0,363,33,1,0,0,0,364,365,5,20,0,0,365,
		390,3,10,5,0,366,368,5,20,0,0,367,369,3,4,2,0,368,367,1,0,0,0,368,369,
		1,0,0,0,369,370,1,0,0,0,370,372,3,146,73,0,371,373,3,4,2,0,372,371,1,0,
		0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,376,3,102,51,0,375,374,1,0,0,0,
		375,376,1,0,0,0,376,378,1,0,0,0,377,379,3,4,2,0,378,377,1,0,0,0,378,379,
		1,0,0,0,379,380,1,0,0,0,380,384,3,148,74,0,381,383,3,158,79,0,382,381,
		1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,
		0,386,384,1,0,0,0,387,388,3,2,1,0,388,390,1,0,0,0,389,364,1,0,0,0,389,
		366,1,0,0,0,390,35,1,0,0,0,391,392,5,44,0,0,392,393,3,10,5,0,393,37,1,
		0,0,0,394,395,5,35,0,0,395,396,3,96,48,0,396,397,5,10,0,0,397,398,3,94,
		47,0,398,399,3,2,1,0,399,39,1,0,0,0,400,404,3,42,21,0,401,404,3,44,22,
		0,402,404,3,46,23,0,403,400,1,0,0,0,403,401,1,0,0,0,403,402,1,0,0,0,404,
		41,1,0,0,0,405,406,5,28,0,0,406,407,3,66,33,0,407,408,5,90,0,0,408,409,
		3,80,40,0,409,410,5,43,0,0,410,413,3,80,40,0,411,412,5,17,0,0,412,414,
		3,80,40,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,4,
		2,0,416,415,1,0,0,0,416,417,1,0,0,0,417,434,1,0,0,0,418,420,3,48,24,0,
		419,421,3,4,2,0,420,419,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,424,
		3,50,25,0,423,422,1,0,0,0,423,424,1,0,0,0,424,435,1,0,0,0,425,427,3,50,
		25,0,426,428,3,4,2,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,
		431,3,48,24,0,430,429,1,0,0,0,430,431,1,0,0,0,431,435,1,0,0,0,432,435,
		3,48,24,0,433,435,3,50,25,0,434,418,1,0,0,0,434,425,1,0,0,0,434,432,1,
		0,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,439,1,0,0,0,436,438,3,8,4,0,
		437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,443,
		1,0,0,0,441,439,1,0,0,0,442,444,3,4,2,0,443,442,1,0,0,0,443,444,1,0,0,
		0,444,445,1,0,0,0,445,446,5,25,0,0,446,43,1,0,0,0,447,449,3,48,24,0,448,
		450,3,50,25,0,449,448,1,0,0,0,449,450,1,0,0,0,450,454,1,0,0,0,451,453,
		3,8,4,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,
		0,455,458,1,0,0,0,456,454,1,0,0,0,457,459,3,4,2,0,458,457,1,0,0,0,458,
		459,1,0,0,0,459,460,1,0,0,0,460,461,5,25,0,0,461,45,1,0,0,0,462,464,3,
		50,25,0,463,465,3,48,24,0,464,463,1,0,0,0,464,465,1,0,0,0,465,469,1,0,
		0,0,466,468,3,8,4,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,
		470,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,472,474,3,4,2,0,473,472,1,
		0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,5,25,0,0,476,47,1,0,0,0,
		477,478,5,54,0,0,478,479,3,80,40,0,479,49,1,0,0,0,480,481,5,53,0,0,481,
		482,3,80,40,0,482,51,1,0,0,0,483,485,5,32,0,0,484,486,3,4,2,0,485,484,
		1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,489,3,54,27,0,488,490,3,4,
		2,0,489,488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,60,30,0,
		492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,3,4,2,0,495,494,
		1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,499,3,58,29,0,498,497,1,0,
		0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,502,3,4,2,0,501,500,1,0,0,0,501,
		502,1,0,0,0,502,503,1,0,0,0,503,504,5,25,0,0,504,53,1,0,0,0,505,507,3,
		4,2,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,3,80,40,
		0,509,511,3,4,2,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,
		514,5,42,0,0,513,515,3,4,2,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,
		0,0,0,516,517,3,56,28,0,517,55,1,0,0,0,518,520,3,8,4,0,519,518,1,0,0,0,
		520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,57,1,0,0,0,523,521,
		1,0,0,0,524,526,5,24,0,0,525,527,3,4,2,0,526,525,1,0,0,0,526,527,1,0,0,
		0,527,528,1,0,0,0,528,529,3,56,28,0,529,59,1,0,0,0,530,532,5,23,0,0,531,
		533,3,4,2,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,536,3,
		54,27,0,535,530,1,0,0,0,536,537,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,
		0,538,61,1,0,0,0,539,540,3,66,33,0,540,541,3,64,32,0,541,542,3,80,40,0,
		542,543,3,2,1,0,543,63,1,0,0,0,544,545,7,2,0,0,545,65,1,0,0,0,546,547,
		6,33,-1,0,547,549,3,68,34,0,548,550,3,70,35,0,549,548,1,0,0,0,549,550,
		1,0,0,0,550,559,1,0,0,0,551,552,10,2,0,0,552,553,5,99,0,0,553,555,3,68,
		34,0,554,556,3,70,35,0,555,554,1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,
		557,551,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,67,
		1,0,0,0,561,559,1,0,0,0,562,564,3,72,36,0,563,562,1,0,0,0,563,564,1,0,
		0,0,564,565,1,0,0,0,565,566,3,146,73,0,566,69,1,0,0,0,567,569,3,76,38,
		0,568,567,1,0,0,0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,
		71,1,0,0,0,572,574,3,74,37,0,573,572,1,0,0,0,574,575,1,0,0,0,575,573,1,
		0,0,0,575,576,1,0,0,0,576,73,1,0,0,0,577,579,3,146,73,0,578,580,3,76,38,
		0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,5,93,0,0,582,
		75,1,0,0,0,583,585,5,97,0,0,584,586,3,78,39,0,585,584,1,0,0,0,585,586,
		1,0,0,0,586,587,1,0,0,0,587,588,5,98,0,0,588,77,1,0,0,0,589,594,3,80,40,
		0,590,591,5,96,0,0,591,593,3,80,40,0,592,590,1,0,0,0,593,596,1,0,0,0,594,
		592,1,0,0,0,594,595,1,0,0,0,595,79,1,0,0,0,596,594,1,0,0,0,597,598,6,40,
		-1,0,598,602,3,82,41,0,599,602,3,98,49,0,600,602,3,100,50,0,601,597,1,
		0,0,0,601,599,1,0,0,0,601,600,1,0,0,0,602,715,1,0,0,0,603,605,10,11,0,
		0,604,606,3,4,2,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,
		609,3,118,59,0,608,610,3,4,2,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,
		1,0,0,0,611,612,3,80,40,11,612,714,1,0,0,0,613,615,10,10,0,0,614,616,3,
		4,2,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,619,3,124,62,
		0,618,620,3,4,2,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,
		622,3,80,40,11,622,714,1,0,0,0,623,625,10,9,0,0,624,626,3,4,2,0,625,624,
		1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,629,3,122,61,0,628,630,3,4,
		2,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,3,80,40,10,
		632,714,1,0,0,0,633,635,10,8,0,0,634,636,3,4,2,0,635,634,1,0,0,0,635,636,
		1,0,0,0,636,637,1,0,0,0,637,639,3,120,60,0,638,640,3,4,2,0,639,638,1,0,
		0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,642,3,80,40,9,642,714,1,0,0,0,
		643,645,10,7,0,0,644,646,3,4,2,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,
		1,0,0,0,647,649,3,116,58,0,648,650,3,4,2,0,649,648,1,0,0,0,649,650,1,0,
		0,0,650,651,1,0,0,0,651,652,3,80,40,8,652,714,1,0,0,0,653,655,10,6,0,0,
		654,656,3,4,2,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,659,
		3,132,66,0,658,660,3,4,2,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,
		0,0,661,662,3,80,40,7,662,714,1,0,0,0,663,665,10,5,0,0,664,666,3,4,2,0,
		665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,669,3,126,63,0,668,
		670,3,4,2,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,672,3,
		80,40,6,672,714,1,0,0,0,673,675,10,4,0,0,674,676,3,4,2,0,675,674,1,0,0,
		0,675,676,1,0,0,0,676,677,1,0,0,0,677,679,3,128,64,0,678,680,3,4,2,0,679,
		678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,3,80,40,5,682,714,
		1,0,0,0,683,685,10,3,0,0,684,686,3,4,2,0,685,684,1,0,0,0,685,686,1,0,0,
		0,686,687,1,0,0,0,687,689,3,130,65,0,688,690,3,4,2,0,689,688,1,0,0,0,689,
		690,1,0,0,0,690,691,1,0,0,0,691,692,3,80,40,4,692,714,1,0,0,0,693,695,
		10,2,0,0,694,696,3,4,2,0,695,694,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,
		0,697,699,3,112,56,0,698,700,3,4,2,0,699,698,1,0,0,0,699,700,1,0,0,0,700,
		701,1,0,0,0,701,702,3,80,40,3,702,714,1,0,0,0,703,705,10,1,0,0,704,706,
		3,4,2,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,709,3,114,
		57,0,708,710,3,4,2,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,
		712,3,80,40,2,712,714,1,0,0,0,713,603,1,0,0,0,713,613,1,0,0,0,713,623,
		1,0,0,0,713,633,1,0,0,0,713,643,1,0,0,0,713,653,1,0,0,0,713,663,1,0,0,
		0,713,673,1,0,0,0,713,683,1,0,0,0,713,693,1,0,0,0,713,703,1,0,0,0,714,
		717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,81,1,0,0,0,717,715,1,0,
		0,0,718,723,3,86,43,0,719,723,3,84,42,0,720,723,3,96,48,0,721,723,3,66,
		33,0,722,718,1,0,0,0,722,719,1,0,0,0,722,720,1,0,0,0,722,721,1,0,0,0,723,
		83,1,0,0,0,724,725,5,74,0,0,725,85,1,0,0,0,726,731,3,90,45,0,727,731,3,
		92,46,0,728,731,3,88,44,0,729,731,3,94,47,0,730,726,1,0,0,0,730,727,1,
		0,0,0,730,728,1,0,0,0,730,729,1,0,0,0,731,87,1,0,0,0,732,733,5,4,0,0,733,
		89,1,0,0,0,734,735,5,7,0,0,735,91,1,0,0,0,736,737,5,5,0,0,737,93,1,0,0,
		0,738,741,5,8,0,0,739,741,5,6,0,0,740,738,1,0,0,0,740,739,1,0,0,0,741,
		95,1,0,0,0,742,743,5,101,0,0,743,97,1,0,0,0,744,745,5,97,0,0,745,746,3,
		80,40,0,746,747,5,98,0,0,747,99,1,0,0,0,748,749,3,134,67,0,749,750,3,80,
		40,0,750,101,1,0,0,0,751,752,5,97,0,0,752,753,3,106,53,0,753,754,5,98,
		0,0,754,103,1,0,0,0,755,756,3,108,54,0,756,757,5,55,0,0,757,759,1,0,0,
		0,758,755,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,763,3,110,55,0,761,
		763,5,77,0,0,762,758,1,0,0,0,762,761,1,0,0,0,763,105,1,0,0,0,764,769,3,
		104,52,0,765,766,5,96,0,0,766,768,3,104,52,0,767,765,1,0,0,0,768,771,1,
		0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,107,1,0,0,0,771,769,1,0,0,0,
		772,773,3,80,40,0,773,109,1,0,0,0,774,775,3,80,40,0,775,111,1,0,0,0,776,
		777,5,57,0,0,777,113,1,0,0,0,778,779,5,58,0,0,779,115,1,0,0,0,780,781,
		5,56,0,0,781,117,1,0,0,0,782,783,5,73,0,0,783,119,1,0,0,0,784,785,7,3,
		0,0,785,121,1,0,0,0,786,787,7,4,0,0,787,123,1,0,0,0,788,789,7,5,0,0,789,
		125,1,0,0,0,790,791,7,6,0,0,791,127,1,0,0,0,792,793,7,7,0,0,793,129,1,
		0,0,0,794,795,7,8,0,0,795,131,1,0,0,0,796,797,7,9,0,0,797,133,1,0,0,0,
		798,799,7,10,0,0,799,135,1,0,0,0,800,805,3,146,73,0,801,802,5,93,0,0,802,
		804,3,146,73,0,803,801,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,
		1,0,0,0,806,137,1,0,0,0,807,805,1,0,0,0,808,809,5,97,0,0,809,814,3,146,
		73,0,810,811,5,96,0,0,811,813,3,146,73,0,812,810,1,0,0,0,813,816,1,0,0,
		0,814,812,1,0,0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,
		818,5,98,0,0,818,139,1,0,0,0,819,820,5,97,0,0,820,825,5,8,0,0,821,822,
		5,96,0,0,822,824,5,8,0,0,823,821,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,
		0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,829,5,98,0,0,829,
		141,1,0,0,0,830,832,3,4,2,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,
		0,0,0,833,835,3,144,72,0,834,836,3,4,2,0,835,834,1,0,0,0,835,836,1,0,0,
		0,836,847,1,0,0,0,837,839,3,176,88,0,838,840,3,4,2,0,839,838,1,0,0,0,839,
		840,1,0,0,0,840,841,1,0,0,0,841,843,3,144,72,0,842,844,3,4,2,0,843,842,
		1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,837,1,0,0,0,846,849,1,0,0,
		0,847,845,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,850,
		852,3,176,88,0,851,850,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,855,
		3,4,2,0,854,853,1,0,0,0,854,855,1,0,0,0,855,143,1,0,0,0,856,857,3,146,
		73,0,857,145,1,0,0,0,858,861,3,180,90,0,859,861,5,100,0,0,860,858,1,0,
		0,0,860,859,1,0,0,0,861,147,1,0,0,0,862,871,3,168,84,0,863,871,3,170,85,
		0,864,871,3,172,86,0,865,871,3,174,87,0,866,871,3,166,83,0,867,871,3,150,
		75,0,868,871,3,152,76,0,869,871,3,146,73,0,870,862,1,0,0,0,870,863,1,0,
		0,0,870,864,1,0,0,0,870,865,1,0,0,0,870,866,1,0,0,0,870,867,1,0,0,0,870,
		868,1,0,0,0,870,869,1,0,0,0,871,149,1,0,0,0,872,873,5,34,0,0,873,151,1,
		0,0,0,874,875,5,26,0,0,875,876,3,154,77,0,876,153,1,0,0,0,877,878,5,97,
		0,0,878,883,3,148,74,0,879,880,5,96,0,0,880,882,3,148,74,0,881,879,1,0,
		0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,
		883,1,0,0,0,886,887,5,98,0,0,887,155,1,0,0,0,888,889,7,11,0,0,889,157,
		1,0,0,0,890,894,3,160,80,0,891,894,3,162,81,0,892,894,3,164,82,0,893,890,
		1,0,0,0,893,891,1,0,0,0,893,892,1,0,0,0,894,159,1,0,0,0,895,896,5,19,0,
		0,896,161,1,0,0,0,897,898,5,9,0,0,898,163,1,0,0,0,899,900,5,51,0,0,900,
		165,1,0,0,0,901,902,5,52,0,0,902,167,1,0,0,0,903,916,5,14,0,0,904,916,
		5,11,0,0,905,916,5,12,0,0,906,916,5,13,0,0,907,916,5,48,0,0,908,916,5,
		45,0,0,909,916,5,46,0,0,910,916,5,47,0,0,911,913,7,12,0,0,912,914,3,76,
		38,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,903,1,0,0,0,915,
		904,1,0,0,0,915,905,1,0,0,0,915,906,1,0,0,0,915,907,1,0,0,0,915,908,1,
		0,0,0,915,909,1,0,0,0,915,910,1,0,0,0,915,911,1,0,0,0,916,169,1,0,0,0,
		917,918,7,13,0,0,918,919,3,76,38,0,919,171,1,0,0,0,920,922,5,40,0,0,921,
		923,3,70,35,0,922,921,1,0,0,0,922,923,1,0,0,0,923,173,1,0,0,0,924,926,
		5,16,0,0,925,927,3,70,35,0,926,925,1,0,0,0,926,927,1,0,0,0,927,175,1,0,
		0,0,928,929,5,96,0,0,929,177,1,0,0,0,930,932,3,4,2,0,931,930,1,0,0,0,931,
		932,1,0,0,0,932,933,1,0,0,0,933,934,5,0,0,1,934,179,1,0,0,0,935,936,7,
		14,0,0,936,181,1,0,0,0,127,185,192,197,203,220,224,227,231,235,238,242,
		249,253,260,280,284,289,293,299,303,308,312,318,322,325,329,333,339,346,
		352,356,359,362,368,372,375,378,384,389,403,413,416,420,423,427,430,434,
		439,443,449,454,458,464,469,473,485,489,492,495,498,501,506,510,514,521,
		526,532,537,549,555,559,563,570,575,579,585,594,601,605,609,615,619,625,
		629,635,639,645,649,655,659,665,669,675,679,685,689,695,699,705,709,713,
		715,722,730,740,758,762,769,805,814,825,831,835,839,843,847,851,854,860,
		870,883,893,913,915,922,926,931
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
