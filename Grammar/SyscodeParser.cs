//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syscode.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SyscodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINECOM=2, HYPERCOMMENT=3, HEX_LITERAL=4, OCT_LITERAL=5, BIN_LITERAL=6, 
		DEC_LITERAL=7, ALIGNED=8, AS=9, ASC=10, AT=11, AUTO=12, BASED=13, BIN16=14, 
		BIN32=15, BIN64=16, BIN8=17, BIN=18, BIT=19, BUILTIN=20, BY=21, BYTEPAD=22, 
		CALL=23, CONST=24, DCL=25, DEC=26, DEF=27, DESC=28, DO=29, DOUBLE=30, 
		ELIF=31, ELSE=32, END=33, ENTRY=34, ENUM=35, EXTERNAL=36, FOR=37, FOREVER=38, 
		FUNCTION=39, GOTO=40, IF=41, INIT=42, INTERNAL=43, IS=44, LABEL=45, LEAVE=46, 
		LIT=47, LOOP=48, MAIN=49, OFFSET=50, OPTIONS=51, ORDER=52, PACKAGE=53, 
		PACKED=54, PAD=55, PATH=56, POINTER=57, PROCEDURE=58, RETURN=59, SINGLE=60, 
		SCOPE=61, STACK=62, STATIC=63, STRING=64, STRUCT=65, THEN=66, TO=67, TYPE=68, 
		UBIN16=69, UBIN32=70, UBIN64=71, UBIN8=72, UBIN=73, UDEC=74, UNIT=75, 
		UNTIL=76, VARIABLE=77, WHILE=78, COLON=79, CONC=80, LOGAND=81, LOGOR=82, 
		AND=83, OR=84, NAND=85, NOR=86, XOR=87, XNOR=88, NOT=89, GT=90, LT=91, 
		GTE=92, LTE=93, NGT=94, NLT=95, NE=96, POWER=97, STR_LITERAL=98, PLUS=99, 
		OPLUS=100, SPLUS=101, MINUS=102, OMINUS=103, SMINUS=104, TIMES=105, OTIMES=106, 
		STIMES=107, LCOM=108, DIVIDE=109, PCNT=110, QUOTE=111, REDAND=112, REDOR=113, 
		REDXOR=114, L_LOG_SHIFT=115, R_LOG_SHIFT=116, R_ART_SHIFT=117, L_ROTATE=118, 
		R_ROTATE=119, EQUALS=120, ASSIGN=121, COMPASSIGN=122, DOT=123, ATSIGN=124, 
		SEMICOLON=125, COMMA=126, LPAR=127, RPAR=128, LBRACK=129, RBRACK=130, 
		RARROW=131, IDENTIFIER=132, NEWLINE=133, WS=134;
	public const int
		RULE_preamble = 0, RULE_statementSeparator = 1, RULE_emptyLines = 2, RULE_compilation = 3, 
		RULE_statement = 4, RULE_structBody = 5, RULE_structField = 6, RULE_alabel = 7, 
		RULE_labelName = 8, RULE_labelSubscript = 9, RULE_goto = 10, RULE_gotoSubscript = 11, 
		RULE_scope = 12, RULE_blockScope = 13, RULE_procedure = 14, RULE_function = 15, 
		RULE_procOptions = 16, RULE_enum = 17, RULE_call = 18, RULE_return = 19, 
		RULE_declare = 20, RULE_dataAttribute = 21, RULE_attribute = 22, RULE_type = 23, 
		RULE_leave = 24, RULE_loop = 25, RULE_forLoop = 26, RULE_whileLoop = 27, 
		RULE_untilLoop = 28, RULE_loopLoop = 29, RULE_whileCondition = 30, RULE_untilCondition = 31, 
		RULE_if = 32, RULE_exprThenBlock = 33, RULE_thenBlock = 34, RULE_elseBlock = 35, 
		RULE_elifBlock = 36, RULE_typeSpecifier = 37, RULE_asType = 38, RULE_integerType = 39, 
		RULE_bitType = 40, RULE_builtinType = 41, RULE_bytepadType = 42, RULE_stringType = 43, 
		RULE_entryType = 44, RULE_labelType = 45, RULE_pointerType = 46, RULE_typeCode = 47, 
		RULE_assignment = 48, RULE_comparer = 49, RULE_reference = 50, RULE_basicReference = 51, 
		RULE_argumentsList = 52, RULE_structureQualificationList = 53, RULE_structureQualification = 54, 
		RULE_arguments = 55, RULE_subscriptCommalist = 56, RULE_expression = 57, 
		RULE_primitiveExpression = 58, RULE_stringLiteral = 59, RULE_numericLiteral = 60, 
		RULE_hexLiteral = 61, RULE_binLiteral = 62, RULE_octLiteral = 63, RULE_decLiteral = 64, 
		RULE_parenthesizedExpression = 65, RULE_prefixExpression = 66, RULE_dimensionSuffix = 67, 
		RULE_boundPair = 68, RULE_boundPairCommalist = 69, RULE_lowerBound = 70, 
		RULE_upperBound = 71, RULE_logand = 72, RULE_logor = 73, RULE_concatenate = 74, 
		RULE_power = 75, RULE_shiftRotate = 76, RULE_addSub = 77, RULE_mulDiv = 78, 
		RULE_boolAnd = 79, RULE_boolXor = 80, RULE_boolOr = 81, RULE_comparison = 82, 
		RULE_prefixOperator = 83, RULE_qualifiedName = 84, RULE_paramList = 85, 
		RULE_constArrayList = 86, RULE_enumMembers = 87, RULE_enumMember = 88, 
		RULE_identifier = 89, RULE_varying = 90, RULE_structAttributes = 91, RULE_atAttribute = 92, 
		RULE_orderAttribute = 93, RULE_constAttribute = 94, RULE_alignedAttribute = 95, 
		RULE_offsetAttribute = 96, RULE_packedAttribute = 97, RULE_externalAttribute = 98, 
		RULE_internalAttribute = 99, RULE_staticAttribute = 100, RULE_basedAttribute = 101, 
		RULE_stackAttribute = 102, RULE_initAttribute = 103, RULE_unitType = 104, 
		RULE_entryArgTypes = 105, RULE_returnDescriptor = 106, RULE_memberSeparator = 107, 
		RULE_endOfFile = 108, RULE_keyword = 109;
	public static readonly string[] ruleNames = {
		"preamble", "statementSeparator", "emptyLines", "compilation", "statement", 
		"structBody", "structField", "alabel", "labelName", "labelSubscript", 
		"goto", "gotoSubscript", "scope", "blockScope", "procedure", "function", 
		"procOptions", "enum", "call", "return", "declare", "dataAttribute", "attribute", 
		"type", "leave", "loop", "forLoop", "whileLoop", "untilLoop", "loopLoop", 
		"whileCondition", "untilCondition", "if", "exprThenBlock", "thenBlock", 
		"elseBlock", "elifBlock", "typeSpecifier", "asType", "integerType", "bitType", 
		"builtinType", "bytepadType", "stringType", "entryType", "labelType", 
		"pointerType", "typeCode", "assignment", "comparer", "reference", "basicReference", 
		"argumentsList", "structureQualificationList", "structureQualification", 
		"arguments", "subscriptCommalist", "expression", "primitiveExpression", 
		"stringLiteral", "numericLiteral", "hexLiteral", "binLiteral", "octLiteral", 
		"decLiteral", "parenthesizedExpression", "prefixExpression", "dimensionSuffix", 
		"boundPair", "boundPairCommalist", "lowerBound", "upperBound", "logand", 
		"logor", "concatenate", "power", "shiftRotate", "addSub", "mulDiv", "boolAnd", 
		"boolXor", "boolOr", "comparison", "prefixOperator", "qualifiedName", 
		"paramList", "constArrayList", "enumMembers", "enumMember", "identifier", 
		"varying", "structAttributes", "atAttribute", "orderAttribute", "constAttribute", 
		"alignedAttribute", "offsetAttribute", "packedAttribute", "externalAttribute", 
		"internalAttribute", "staticAttribute", "basedAttribute", "stackAttribute", 
		"initAttribute", "unitType", "entryArgTypes", "returnDescriptor", "memberSeparator", 
		"endOfFile", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'aligned'", "'as'", null, 
		"'at'", "'auto'", "'based'", "'bin16'", "'bin32'", "'bin64'", "'bin8'", 
		"'bin'", "'bit'", "'builtin'", "'by'", "'bytepad'", "'call'", "'const'", 
		"'dcl'", "'dec'", "'def'", null, "'do'", "'double'", "'elif'", "'else'", 
		"'end'", "'entry'", "'enum'", null, "'for'", "'forever'", null, "'goto'", 
		"'if'", "'init'", "'internal'", "'is'", "'label'", "'leave'", null, "'loop'", 
		"'main'", "'offset'", "'options'", "'order'", "'package'", "'packed'", 
		"'pad'", "'path'", null, null, "'return'", "'single'", "'scope'", "'stack'", 
		"'static'", "'string'", null, "'then'", "'to'", "'type'", "'ubin16'", 
		"'ubin32'", "'ubin64'", "'ubin8'", "'ubin'", "'udec'", "'unit'", "'until'", 
		null, "'while'", "':'", "'++'", "'&&'", "'||'", "'&'", "'|'", "'~&'", 
		"'~|'", null, null, "'~'", "'>'", "'<'", null, null, "'~>'", "'~<'", null, 
		null, null, "'+'", "'[+]'", "'(+)'", "'-'", "'[-]'", "'(-)'", "'*'", "'[*]'", 
		"'(*)'", "'//'", null, "'%'", "'\"'", "'<&'", "'<|'", "'<^'", "'<<'", 
		"'>>'", "'>>>'", null, null, "'='", "'<-'", null, "'.'", "'@'", "';'", 
		"','", "'('", "')'", "'['", "']'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINECOM", "HYPERCOMMENT", "HEX_LITERAL", "OCT_LITERAL", 
		"BIN_LITERAL", "DEC_LITERAL", "ALIGNED", "AS", "ASC", "AT", "AUTO", "BASED", 
		"BIN16", "BIN32", "BIN64", "BIN8", "BIN", "BIT", "BUILTIN", "BY", "BYTEPAD", 
		"CALL", "CONST", "DCL", "DEC", "DEF", "DESC", "DO", "DOUBLE", "ELIF", 
		"ELSE", "END", "ENTRY", "ENUM", "EXTERNAL", "FOR", "FOREVER", "FUNCTION", 
		"GOTO", "IF", "INIT", "INTERNAL", "IS", "LABEL", "LEAVE", "LIT", "LOOP", 
		"MAIN", "OFFSET", "OPTIONS", "ORDER", "PACKAGE", "PACKED", "PAD", "PATH", 
		"POINTER", "PROCEDURE", "RETURN", "SINGLE", "SCOPE", "STACK", "STATIC", 
		"STRING", "STRUCT", "THEN", "TO", "TYPE", "UBIN16", "UBIN32", "UBIN64", 
		"UBIN8", "UBIN", "UDEC", "UNIT", "UNTIL", "VARIABLE", "WHILE", "COLON", 
		"CONC", "LOGAND", "LOGOR", "AND", "OR", "NAND", "NOR", "XOR", "XNOR", 
		"NOT", "GT", "LT", "GTE", "LTE", "NGT", "NLT", "NE", "POWER", "STR_LITERAL", 
		"PLUS", "OPLUS", "SPLUS", "MINUS", "OMINUS", "SMINUS", "TIMES", "OTIMES", 
		"STIMES", "LCOM", "DIVIDE", "PCNT", "QUOTE", "REDAND", "REDOR", "REDXOR", 
		"L_LOG_SHIFT", "R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE", "R_ROTATE", "EQUALS", 
		"ASSIGN", "COMPASSIGN", "DOT", "ATSIGN", "SEMICOLON", "COMMA", "LPAR", 
		"RPAR", "LBRACK", "RBRACK", "RARROW", "IDENTIFIER", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syscode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyscodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyscodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyscodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SyscodeParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SyscodeParser.SEMICOLON, i);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 0, RULE_preamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEMICOLON || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SyscodeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SyscodeParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==SEMICOLON || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		public EmptyLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLines; } }
	}

	[RuleVersion(0)]
	public EmptyLinesContext emptyLines() {
		EmptyLinesContext _localctx = new EmptyLinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyLines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 227;
					Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndOfFileContext endOfFile() {
			return GetRuleContext<EndOfFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation; } }
	}

	[RuleVersion(0)]
	public CompilationContext compilation() {
		CompilationContext _localctx = new CompilationContext(Context, State);
		EnterRule(_localctx, 6, RULE_compilation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 232;
					statement();
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 238;
			endOfFile();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlabelContext alabel() {
			return GetRuleContext<AlabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoContext @goto() {
			return GetRuleContext<GotoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveContext leave() {
			return GetRuleContext<LeaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON || _la==NEWLINE) {
				{
				State = 240;
				preamble();
				}
			}

			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 243;
				call();
				}
				break;
			case 2:
				{
				State = 244;
				@return();
				}
				break;
			case 3:
				{
				State = 245;
				alabel();
				}
				break;
			case 4:
				{
				State = 246;
				@enum();
				}
				break;
			case 5:
				{
				State = 247;
				@if();
				}
				break;
			case 6:
				{
				State = 248;
				declare();
				}
				break;
			case 7:
				{
				State = 249;
				type();
				}
				break;
			case 8:
				{
				State = 250;
				procedure();
				}
				break;
			case 9:
				{
				State = 251;
				function();
				}
				break;
			case 10:
				{
				State = 252;
				loop();
				}
				break;
			case 11:
				{
				State = 253;
				@goto();
				}
				break;
			case 12:
				{
				State = 254;
				leave();
				}
				break;
			case 13:
				{
				State = 255;
				assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public StructFieldContext Field;
		public StructBodyContext Struct;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAttributesContext[] structAttributes() {
			return GetRuleContexts<StructAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAttributesContext structAttributes(int i) {
			return GetRuleContext<StructAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext[] structBody() {
			return GetRuleContexts<StructBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody(int i) {
			return GetRuleContext<StructBodyContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_structBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(STRUCT);
			State = 259;
			_localctx.Spelling = identifier();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 260;
				dimensionSuffix();
				}
			}

			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 22517998136867072L) != 0)) {
				{
				{
				State = 263;
				structAttributes();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269;
			statementSeparator();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 270;
				emptyLines();
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 275;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 273;
						_localctx.Field = structField();
						}
						break;
					case 2:
						{
						State = 274;
						_localctx.Struct = structBody();
						}
						break;
					}
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 277;
						emptyLines();
						}
					}

					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 285;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public TypeSpecifierContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_localctx.Spelling = identifier();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 288;
				dimensionSuffix();
				}
			}

			State = 291;
			_localctx.Type = typeSpecifier();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4574518058624737280L) != 0)) {
				{
				{
				State = 292;
				attribute();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlabelContext : ParserRuleContext {
		public LabelNameContext Name;
		public LabelSubscriptContext Subscript;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelSubscriptContext labelSubscript() {
			return GetRuleContext<LabelSubscriptContext>(0);
		}
		public AlabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alabel; } }
	}

	[RuleVersion(0)]
	public AlabelContext alabel() {
		AlabelContext _localctx = new AlabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_alabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_localctx.Name = labelName();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 301;
				_localctx.Subscript = labelSubscript();
				}
			}

			State = 304;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelNameContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATSIGN() { return GetToken(SyscodeParser.ATSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelName; } }
	}

	[RuleVersion(0)]
	public LabelNameContext labelName() {
		LabelNameContext _localctx = new LabelNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_labelName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(ATSIGN);
			State = 307;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelSubscriptContext : ParserRuleContext {
		public DecLiteralContext Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public LabelSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelSubscript; } }
	}

	[RuleVersion(0)]
	public LabelSubscriptContext labelSubscript() {
		LabelSubscriptContext _localctx = new LabelSubscriptContext(Context, State);
		EnterRule(_localctx, 18, RULE_labelSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(LPAR);
			State = 310;
			_localctx.Literal = decLiteral();
			State = 311;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoContext : ParserRuleContext {
		public ReferenceContext Ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public GotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto; } }
	}

	[RuleVersion(0)]
	public GotoContext @goto() {
		GotoContext _localctx = new GotoContext(Context, State);
		EnterRule(_localctx, 20, RULE_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(GOTO);
			State = 314;
			_localctx.Ref = reference(0);
			State = 315;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public GotoSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoSubscript; } }
	}

	[RuleVersion(0)]
	public GotoSubscriptContext gotoSubscript() {
		GotoSubscriptContext _localctx = new GotoSubscriptContext(Context, State);
		EnterRule(_localctx, 22, RULE_gotoSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(LPAR);
			State = 318;
			expression(0);
			State = 319;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeContext blockScope() {
			return GetRuleContext<BlockScopeContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			blockScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeContext : ParserRuleContext {
		public QualifiedNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SyscodeParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScope; } }
	}

	[RuleVersion(0)]
	public BlockScopeContext blockScope() {
		BlockScopeContext _localctx = new BlockScopeContext(Context, State);
		EnterRule(_localctx, 26, RULE_blockScope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 323;
			Match(PACKAGE);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 324;
				emptyLines();
				}
			}

			State = 327;
			_localctx.Name = qualifiedName();
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 328;
				emptyLines();
				}
				break;
			}
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331;
					statement();
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 337;
				emptyLines();
				}
			}

			State = 340;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public ParamListContext Params;
		public ProcOptionsContext Options;
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(SyscodeParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcOptionsContext procOptions() {
			return GetRuleContext<ProcOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 28, RULE_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(PROCEDURE);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 343;
				emptyLines();
				}
			}

			State = 346;
			_localctx.Spelling = identifier();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 347;
				_localctx.Params = paramList();
				}
			}

			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 350;
				_localctx.Options = procOptions();
				}
				break;
			}
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 353;
					_localctx._statement = statement();
					_localctx._Statements.Add(_localctx._statement);
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 359;
				emptyLines();
				}
			}

			State = 362;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public ParamListContext Params;
		public ProcOptionsContext Options;
		public ReturnDescriptorContext Type;
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SyscodeParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcOptionsContext procOptions() {
			return GetRuleContext<ProcOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(FUNCTION);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 365;
				emptyLines();
				}
			}

			State = 368;
			_localctx.Spelling = identifier();
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 369;
				_localctx.Params = paramList();
				}
			}

			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 372;
				_localctx.Options = procOptions();
				}
			}

			State = 375;
			Match(AS);
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 376;
				_localctx.Type = returnDescriptor();
				}
				break;
			}
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 379;
					_localctx._statement = statement();
					_localctx._Statements.Add(_localctx._statement);
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 385;
				emptyLines();
				}
			}

			State = 388;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcOptionsContext : ParserRuleContext {
		public IToken Main;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(SyscodeParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(SyscodeParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(SyscodeParser.MAIN, i);
		}
		public ProcOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procOptions; } }
	}

	[RuleVersion(0)]
	public ProcOptionsContext procOptions() {
		ProcOptionsContext _localctx = new ProcOptionsContext(Context, State);
		EnterRule(_localctx, 32, RULE_procOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(OPTIONS);
			State = 391;
			Match(LPAR);
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 392;
				_localctx.Main = Match(MAIN);
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAIN );
			State = 397;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IdentifierContext Name;
		public EnumMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 34, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(ENUM);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 400;
				emptyLines();
				}
			}

			State = 403;
			_localctx.Name = identifier();
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 404;
				emptyLines();
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144150389701198336L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2017L) != 0)) {
				{
				State = 407;
				typeSpecifier();
				}
			}

			State = 410;
			memberSeparator();
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 411;
				emptyLines();
				}
				break;
			}
			State = 414;
			_localctx.Members = enumMembers();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 415;
				emptyLines();
				}
			}

			State = 418;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ReferenceContext Ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 36, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(CALL);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 421;
				emptyLines();
				}
			}

			State = 424;
			_localctx.Ref = reference(0);
			State = 425;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 38, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 427;
			Match(RETURN);
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 428;
					emptyLines();
					}
				}

				State = 431;
				_localctx.Exp = expression(0);
				}
				break;
			}
			}
			State = 434;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public StructBodyContext Struct;
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		public DataAttributeContext _dataAttribute;
		public IList<DataAttributeContext> _DataAttributes = new List<DataAttributeContext>();
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataAttributeContext[] dataAttribute() {
			return GetRuleContexts<DataAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataAttributeContext dataAttribute(int i) {
			return GetRuleContext<DataAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 40, RULE_declare);
		int _la;
		try {
			State = 460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436;
				Match(DCL);
				State = 437;
				_localctx.Struct = structBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				Match(DCL);
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 439;
					emptyLines();
					}
				}

				State = 442;
				_localctx.Spelling = identifier();
				State = 444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 443;
					emptyLines();
					}
					break;
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 446;
					_localctx.Bounds = dimensionSuffix();
					}
				}

				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 449;
					emptyLines();
					}
				}

				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 454;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALIGNED:
					case AS:
					case BIN16:
					case BIN32:
					case BIN64:
					case BIN8:
					case BIN:
					case BIT:
					case DEC:
					case DOUBLE:
					case ENTRY:
					case LABEL:
					case PACKED:
					case POINTER:
					case SINGLE:
					case STRING:
					case UBIN16:
					case UBIN32:
					case UBIN64:
					case UBIN8:
					case UBIN:
					case UDEC:
					case VARIABLE:
						{
						State = 452;
						_localctx._dataAttribute = dataAttribute();
						_localctx._DataAttributes.Add(_localctx._dataAttribute);
						}
						break;
					case BASED:
					case BUILTIN:
					case CONST:
					case EXTERNAL:
					case INIT:
					case INTERNAL:
					case OFFSET:
					case PAD:
					case STACK:
					case STATIC:
						{
						State = 453;
						_localctx._attribute = attribute();
						_localctx._Attributes.Add(_localctx._attribute);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -3259431764738710784L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 10209L) != 0) );
				State = 458;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataAttributeContext : ParserRuleContext {
		public DataAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataAttribute; } }
	 
		public DataAttributeContext() { }
		public virtual void CopyFrom(DataAttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : DataAttributeContext {
		public IntegerTypeContext Integer;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public IntegerContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class PackedContext : DataAttributeContext {
		public PackedAttributeContext Packed;
		[System.Diagnostics.DebuggerNonUserCode] public PackedAttributeContext packedAttribute() {
			return GetRuleContext<PackedAttributeContext>(0);
		}
		public PackedContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class EntryContext : DataAttributeContext {
		public EntryTypeContext Entry;
		[System.Diagnostics.DebuggerNonUserCode] public EntryTypeContext entryType() {
			return GetRuleContext<EntryTypeContext>(0);
		}
		public EntryContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class AsContext : DataAttributeContext {
		public AsTypeContext As;
		[System.Diagnostics.DebuggerNonUserCode] public AsTypeContext asType() {
			return GetRuleContext<AsTypeContext>(0);
		}
		public AsContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class VariableContext : DataAttributeContext {
		public IToken Var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public VariableContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class SingleContext : DataAttributeContext {
		public IToken Single;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE() { return GetToken(SyscodeParser.SINGLE, 0); }
		public SingleContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class LabelContext : DataAttributeContext {
		public LabelTypeContext Label;
		[System.Diagnostics.DebuggerNonUserCode] public LabelTypeContext labelType() {
			return GetRuleContext<LabelTypeContext>(0);
		}
		public LabelContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class PointerContext : DataAttributeContext {
		public PointerTypeContext Pointer;
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public PointerContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class StringContext : DataAttributeContext {
		public StringTypeContext String;
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		public StringContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class AlignedContext : DataAttributeContext {
		public AlignedAttributeContext Aligned;
		[System.Diagnostics.DebuggerNonUserCode] public AlignedAttributeContext alignedAttribute() {
			return GetRuleContext<AlignedAttributeContext>(0);
		}
		public AlignedContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class BitContext : DataAttributeContext {
		public BitTypeContext Bit;
		[System.Diagnostics.DebuggerNonUserCode] public BitTypeContext bitType() {
			return GetRuleContext<BitTypeContext>(0);
		}
		public BitContext(DataAttributeContext context) { CopyFrom(context); }
	}
	public partial class DoubleContext : DataAttributeContext {
		public IToken Double;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SyscodeParser.DOUBLE, 0); }
		public DoubleContext(DataAttributeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public DataAttributeContext dataAttribute() {
		DataAttributeContext _localctx = new DataAttributeContext(Context, State);
		EnterRule(_localctx, 42, RULE_dataAttribute);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
				_localctx = new AlignedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				((AlignedContext)_localctx).Aligned = alignedAttribute();
				}
				break;
			case LABEL:
				_localctx = new LabelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				((LabelContext)_localctx).Label = labelType();
				}
				break;
			case POINTER:
				_localctx = new PointerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 464;
				((PointerContext)_localctx).Pointer = pointerType();
				}
				break;
			case PACKED:
				_localctx = new PackedContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 465;
				((PackedContext)_localctx).Packed = packedAttribute();
				}
				break;
			case VARIABLE:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 466;
				((VariableContext)_localctx).Var = Match(VARIABLE);
				}
				break;
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case DEC:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 467;
				((IntegerContext)_localctx).Integer = integerType();
				}
				break;
			case BIT:
				_localctx = new BitContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 468;
				((BitContext)_localctx).Bit = bitType();
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 469;
				((StringContext)_localctx).String = stringType();
				}
				break;
			case ENTRY:
				_localctx = new EntryContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 470;
				((EntryContext)_localctx).Entry = entryType();
				}
				break;
			case AS:
				_localctx = new AsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 471;
				((AsContext)_localctx).As = asType();
				}
				break;
			case DOUBLE:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 472;
				((DoubleContext)_localctx).Double = Match(DOUBLE);
				}
				break;
			case SINGLE:
				_localctx = new SingleContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 473;
				((SingleContext)_localctx).Single = Match(SINGLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAttributeContext initAttribute() {
			return GetRuleContext<InitAttributeContext>(0);
		}
		public InitContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class PadContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(SyscodeParser.PAD, 0); }
		public PadContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class ConstContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstAttributeContext constAttribute() {
			return GetRuleContext<ConstAttributeContext>(0);
		}
		public ConstContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class InternalContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalAttributeContext internalAttribute() {
			return GetRuleContext<InternalAttributeContext>(0);
		}
		public InternalContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class ExternalContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalAttributeContext externalAttribute() {
			return GetRuleContext<ExternalAttributeContext>(0);
		}
		public ExternalContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class StaticContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticAttributeContext staticAttribute() {
			return GetRuleContext<StaticAttributeContext>(0);
		}
		public StaticContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class BasedContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasedAttributeContext basedAttribute() {
			return GetRuleContext<BasedAttributeContext>(0);
		}
		public BasedContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class OffsetContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public OffsetAttributeContext offsetAttribute() {
			return GetRuleContext<OffsetAttributeContext>(0);
		}
		public OffsetContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class StackContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public StackAttributeContext stackAttribute() {
			return GetRuleContext<StackAttributeContext>(0);
		}
		public StackContext(AttributeContext context) { CopyFrom(context); }
	}
	public partial class BuiltinContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		public BuiltinContext(AttributeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 44, RULE_attribute);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				_localctx = new ConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				constAttribute();
				}
				break;
			case OFFSET:
				_localctx = new OffsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				offsetAttribute();
				}
				break;
			case EXTERNAL:
				_localctx = new ExternalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 478;
				externalAttribute();
				}
				break;
			case INTERNAL:
				_localctx = new InternalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				internalAttribute();
				}
				break;
			case STATIC:
				_localctx = new StaticContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 480;
				staticAttribute();
				}
				break;
			case BASED:
				_localctx = new BasedContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 481;
				basedAttribute();
				}
				break;
			case STACK:
				_localctx = new StackContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 482;
				stackAttribute();
				}
				break;
			case INIT:
				_localctx = new InitContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 483;
				initAttribute();
				}
				break;
			case BUILTIN:
				_localctx = new BuiltinContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 484;
				builtinType();
				}
				break;
			case PAD:
				_localctx = new PadContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 485;
				Match(PAD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public StructBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(TYPE);
			State = 489;
			_localctx.Body = structBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveContext : ParserRuleContext {
		public ReferenceContext Ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(SyscodeParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public LeaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leave; } }
	}

	[RuleVersion(0)]
	public LeaveContext leave() {
		LeaveContext _localctx = new LeaveContext(Context, State);
		EnterRule(_localctx, 48, RULE_leave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(LEAVE);
			State = 492;
			_localctx.Ref = reference(0);
			State = 493;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopLoopContext Loop;
		public ForLoopContext For;
		public WhileLoopContext While;
		public UntilLoopContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public LoopLoopContext loopLoop() {
			return GetRuleContext<LoopLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 50, RULE_loop);
		try {
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495;
				_localctx.Loop = loopLoop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				_localctx.For = forLoop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 497;
				_localctx.While = whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 498;
				_localctx.Until = untilLoop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public LabelNameContext Name;
		public ReferenceContext For;
		public ExpressionContext From;
		public ExpressionContext To;
		public ExpressionContext By;
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 52, RULE_forLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(DO);
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 502;
				_localctx.Name = labelName();
				}
				break;
			}
			State = 505;
			_localctx.For = reference(0);
			State = 506;
			Match(EQUALS);
			State = 507;
			_localctx.From = expression(0);
			State = 508;
			Match(TO);
			State = 509;
			_localctx.To = expression(0);
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 510;
				Match(BY);
				State = 511;
				_localctx.By = expression(0);
				}
				break;
			}
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 514;
				emptyLines();
				}
				break;
			}
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 517;
				_localctx.While = whileCondition();
				State = 519;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 518;
					emptyLines();
					}
					break;
				}
				State = 522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 521;
					_localctx.Until = untilCondition();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 524;
				_localctx.Until = untilCondition();
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 525;
					emptyLines();
					}
					break;
				}
				State = 529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 528;
					_localctx.While = whileCondition();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 531;
				_localctx.While = whileCondition();
				}
				break;
			case 4:
				{
				State = 532;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 538;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 535;
					statement();
					}
					} 
				}
				State = 540;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 541;
				emptyLines();
				}
			}

			State = 544;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public LabelNameContext Name;
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_whileLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(DO);
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATSIGN) {
				{
				State = 547;
				_localctx.Name = labelName();
				}
			}

			State = 550;
			_localctx.While = whileCondition();
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 551;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 554;
					statement();
					}
					} 
				}
				State = 559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 560;
				emptyLines();
				}
			}

			State = 563;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : ParserRuleContext {
		public LabelNameContext Name;
		public UntilConditionContext Until;
		public WhileConditionContext While;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 56, RULE_untilLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(DO);
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATSIGN) {
				{
				State = 566;
				_localctx.Name = labelName();
				}
			}

			State = 569;
			_localctx.Until = untilCondition();
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 570;
				_localctx.While = whileCondition();
				}
				break;
			}
			State = 576;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 573;
					statement();
					}
					} 
				}
				State = 578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 579;
				emptyLines();
				}
			}

			State = 582;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopLoopContext : ParserRuleContext {
		public LabelNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(SyscodeParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		public LoopLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopLoop; } }
	}

	[RuleVersion(0)]
	public LoopLoopContext loopLoop() {
		LoopLoopContext _localctx = new LoopLoopContext(Context, State);
		EnterRule(_localctx, 58, RULE_loopLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(DO);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATSIGN) {
				{
				State = 585;
				_localctx.Name = labelName();
				}
			}

			State = 588;
			Match(LOOP);
			State = 592;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 589;
					statement();
					}
					} 
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 595;
				emptyLines();
				}
			}

			State = 598;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCondition; } }
	}

	[RuleVersion(0)]
	public WhileConditionContext whileCondition() {
		WhileConditionContext _localctx = new WhileConditionContext(Context, State);
		EnterRule(_localctx, 60, RULE_whileCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(WHILE);
			State = 601;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UntilConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilCondition; } }
	}

	[RuleVersion(0)]
	public UntilConditionContext untilCondition() {
		UntilConditionContext _localctx = new UntilConditionContext(Context, State);
		EnterRule(_localctx, 62, RULE_untilCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(UNTIL);
			State = 604;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public LabelNameContext Name;
		public ExprThenBlockContext ExprThen;
		public ElifBlockContext Elif;
		public ElseBlockContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock() {
			return GetRuleContext<ExprThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 64, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(IF);
			State = 608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 607;
				_localctx.Name = labelName();
				}
				break;
			}
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 610;
				emptyLines();
				}
				break;
			}
			State = 613;
			_localctx.ExprThen = exprThenBlock();
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 614;
				emptyLines();
				}
				break;
			}
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIF) {
				{
				State = 617;
				_localctx.Elif = elifBlock();
				}
			}

			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 620;
				emptyLines();
				}
				break;
			}
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 623;
				_localctx.Else = elseBlock();
				}
			}

			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 626;
				emptyLines();
				}
			}

			State = 629;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprThenBlockContext : ParserRuleContext {
		public ExpressionContext Exp;
		public ThenBlockContext Then;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ExprThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprThenBlock; } }
	}

	[RuleVersion(0)]
	public ExprThenBlockContext exprThenBlock() {
		ExprThenBlockContext _localctx = new ExprThenBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_exprThenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 631;
				emptyLines();
				}
			}

			State = 634;
			_localctx.Exp = expression(0);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 635;
				emptyLines();
				}
			}

			State = 638;
			Match(THEN);
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 639;
				emptyLines();
				}
				break;
			}
			State = 642;
			_localctx.Then = thenBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_thenBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 644;
					statement();
					}
					} 
				}
				State = 649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ThenBlockContext Then;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 650;
			Match(ELSE);
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 651;
				emptyLines();
				}
				break;
			}
			State = 654;
			_localctx.Then = thenBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		public ExprThenBlockContext _exprThenBlock;
		public IList<ExprThenBlockContext> _ExprThen = new List<ExprThenBlockContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(SyscodeParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(SyscodeParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext[] exprThenBlock() {
			return GetRuleContexts<ExprThenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock(int i) {
			return GetRuleContext<ExprThenBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_elifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 656;
				Match(ELIF);
				State = 658;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 657;
					emptyLines();
					}
					break;
				}
				State = 660;
				_localctx._exprThenBlock = exprThenBlock();
				_localctx._ExprThen.Add(_localctx._exprThenBlock);
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELIF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public IntegerTypeContext Integer;
		public BitTypeContext Bit;
		public StringTypeContext String;
		public EntryTypeContext Entry;
		public LabelTypeContext Label;
		public PointerTypeContext Pointer;
		public AsTypeContext As;
		public BytepadTypeContext Bytes;
		public BuiltinTypeContext Builtin;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitTypeContext bitType() {
			return GetRuleContext<BitTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryTypeContext entryType() {
			return GetRuleContext<EntryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelTypeContext labelType() {
			return GetRuleContext<LabelTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsTypeContext asType() {
			return GetRuleContext<AsTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BytepadTypeContext bytepadType() {
			return GetRuleContext<BytepadTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeSpecifier);
		try {
			State = 674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case DEC:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665;
				_localctx.Integer = integerType();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666;
				_localctx.Bit = bitType();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 667;
				_localctx.String = stringType();
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 668;
				_localctx.Entry = entryType();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 669;
				_localctx.Label = labelType();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 670;
				_localctx.Pointer = pointerType();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 671;
				_localctx.As = asType();
				}
				break;
			case BYTEPAD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 672;
				_localctx.Bytes = bytepadType();
				}
				break;
			case BUILTIN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 673;
				_localctx.Builtin = builtinType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeContext : ParserRuleContext {
		public IdentifierContext Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asType; } }
	}

	[RuleVersion(0)]
	public AsTypeContext asType() {
		AsTypeContext _localctx = new AsTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_asType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(AS);
			State = 677;
			_localctx.Typename = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public int digits;
		public String typename;
		public Boolean signed;
		public ArgumentsContext Args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_integerType);
		int _la;
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 695;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIN8:
					{
					State = 679;
					Match(BIN8);
					_localctx.digits = 8;  _localctx.typename = "bin";  _localctx.signed = true;
					}
					break;
				case BIN16:
					{
					State = 681;
					Match(BIN16);
					_localctx.digits = 16; _localctx.typename = "bin";  _localctx.signed = true;
					}
					break;
				case BIN32:
					{
					State = 683;
					Match(BIN32);
					_localctx.digits = 32; _localctx.typename = "bin";  _localctx.signed = true;
					}
					break;
				case BIN64:
					{
					State = 685;
					Match(BIN64);
					_localctx.digits = 64; _localctx.typename = "bin";  _localctx.signed = true;
					}
					break;
				case UBIN8:
					{
					State = 687;
					Match(UBIN8);
					_localctx.digits = 8;  _localctx.typename = "ubin"; _localctx.signed = false;
					}
					break;
				case UBIN16:
					{
					State = 689;
					Match(UBIN16);
					_localctx.digits = 16; _localctx.typename = "ubin"; _localctx.signed = false;
					}
					break;
				case UBIN32:
					{
					State = 691;
					Match(UBIN32);
					_localctx.digits = 32; _localctx.typename = "ubin"; _localctx.signed = false;
					}
					break;
				case UBIN64:
					{
					State = 693;
					Match(UBIN64);
					_localctx.digits = 64; _localctx.typename = "ubin"; _localctx.signed = false;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case BIN:
			case DEC:
			case UBIN:
			case UDEC:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 705;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIN:
					{
					State = 697;
					Match(BIN);
					_localctx.typename = "bin";_localctx.signed = true;
					}
					break;
				case UBIN:
					{
					State = 699;
					Match(UBIN);
					_localctx.typename = "ubin";_localctx.signed = false;
					}
					break;
				case DEC:
					{
					State = 701;
					Match(DEC);
					_localctx.typename = "dec";_localctx.signed = true;
					}
					break;
				case UDEC:
					{
					State = 703;
					Match(UDEC);
					_localctx.typename = "udec";_localctx.signed = false;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 707;
					_localctx.Args = arguments();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitTypeContext : ParserRuleContext {
		public IToken Typename;
		public ExpressionContext Length;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitType; } }
	}

	[RuleVersion(0)]
	public BitTypeContext bitType() {
		BitTypeContext _localctx = new BitTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_bitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			_localctx.Typename = Match(BIT);
			State = 713;
			Match(LPAR);
			State = 714;
			_localctx.Length = expression(0);
			State = 715;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinTypeContext : ParserRuleContext {
		public IToken Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(SyscodeParser.BUILTIN, 0); }
		public BuiltinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinType; } }
	}

	[RuleVersion(0)]
	public BuiltinTypeContext builtinType() {
		BuiltinTypeContext _localctx = new BuiltinTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_builtinType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			_localctx.Typename = Match(BUILTIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BytepadTypeContext : ParserRuleContext {
		public DecLiteralContext Len;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTEPAD() { return GetToken(SyscodeParser.BYTEPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public BytepadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bytepadType; } }
	}

	[RuleVersion(0)]
	public BytepadTypeContext bytepadType() {
		BytepadTypeContext _localctx = new BytepadTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_bytepadType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(BYTEPAD);
			State = 720;
			Match(LPAR);
			State = 721;
			_localctx.Len = decLiteral();
			State = 722;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		public IToken Typename;
		public ExpressionContext Length;
		public IToken Varying;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_stringType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			_localctx.Typename = Match(STRING);
			State = 725;
			Match(LPAR);
			State = 726;
			_localctx.Length = expression(0);
			State = 727;
			Match(RPAR);
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 728;
				_localctx.Varying = Match(VARIABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryTypeContext : ParserRuleContext {
		public IToken Typename;
		public EntryArgTypesContext Args;
		public ReturnDescriptorContext Ret;
		public IToken Var;
		public IToken var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryArgTypesContext entryArgTypes() {
			return GetRuleContext<EntryArgTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public EntryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryType; } }
	}

	[RuleVersion(0)]
	public EntryTypeContext entryType() {
		EntryTypeContext _localctx = new EntryTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_entryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			_localctx.Typename = Match(ENTRY);
			State = 787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 733;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 737;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 736;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				State = 740;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 739;
					_localctx.Var = Match(VARIABLE);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 742;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 746;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 745;
					_localctx.Var = Match(VARIABLE);
					}
					break;
				}
				State = 749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 748;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 751;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 754;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 757;
					_localctx.Var = Match(VARIABLE);
					}
					break;
				}
				}
				break;
			case 5:
				{
				State = 761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 760;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 763;
					_localctx.Var = Match(VARIABLE);
					}
					break;
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 766;
					_localctx.Args = entryArgTypes();
					}
				}

				}
				break;
			case 6:
				{
				State = 770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 769;
					_localctx.Var = Match(VARIABLE);
					}
					break;
				}
				State = 773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 772;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 775;
					_localctx.Args = entryArgTypes();
					}
				}

				}
				break;
			case 7:
				{
				State = 779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 778;
					_localctx.var = Match(VARIABLE);
					}
					break;
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 781;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 785;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 784;
					_localctx.Ret = returnDescriptor();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelTypeContext : ParserRuleContext {
		public IToken Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		public LabelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelType; } }
	}

	[RuleVersion(0)]
	public LabelTypeContext labelType() {
		LabelTypeContext _localctx = new LabelTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_labelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			_localctx.Typename = Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		public IToken Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			_localctx.Typename = Match(POINTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryArgTypesContext entryArgTypes() {
			return GetRuleContext<EntryArgTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		public TypeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCode; } }
	}

	[RuleVersion(0)]
	public TypeCodeContext typeCode() {
		TypeCodeContext _localctx = new TypeCodeContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeCode);
		int _la;
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793;
				Match(BIN8);
				}
				break;
			case BIN16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794;
				Match(BIN16);
				}
				break;
			case BIN32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 795;
				Match(BIN32);
				}
				break;
			case BIN64:
				EnterOuterAlt(_localctx, 4);
				{
				State = 796;
				Match(BIN64);
				}
				break;
			case UBIN8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 797;
				Match(UBIN8);
				}
				break;
			case UBIN16:
				EnterOuterAlt(_localctx, 6);
				{
				State = 798;
				Match(UBIN16);
				}
				break;
			case UBIN32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 799;
				Match(UBIN32);
				}
				break;
			case UBIN64:
				EnterOuterAlt(_localctx, 8);
				{
				State = 800;
				Match(UBIN64);
				}
				break;
			case BIN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 801;
				Match(BIN);
				}
				break;
			case UBIN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 802;
				Match(UBIN);
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 11);
				{
				State = 803;
				Match(DEC);
				}
				break;
			case UDEC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 804;
				Match(UDEC);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 13);
				{
				State = 805;
				Match(STRING);
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 806;
				Match(BIT);
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 807;
				Match(LABEL);
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 16);
				{
				{
				State = 808;
				Match(ENTRY);
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 809;
					entryArgTypes();
					}
				}

				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 812;
					returnDescriptor();
					}
				}

				}
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 17);
				{
				State = 815;
				Match(POINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ReferenceContext Ref;
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ComparerContext comparer() {
			return GetRuleContext<ComparerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 96, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_localctx.Ref = reference(0);
			State = 819;
			comparer();
			State = 820;
			_localctx.Exp = expression(0);
			State = 821;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPASSIGN() { return GetToken(SyscodeParser.COMPASSIGN, 0); }
		public ComparerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparer; } }
	}

	[RuleVersion(0)]
	public ComparerContext comparer() {
		ComparerContext _localctx = new ComparerContext(Context, State);
		EnterRule(_localctx, 98, RULE_comparer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ReferenceContext Pointer;
		public BasicReferenceContext Basic;
		public ArgumentsListContext ArgsList;
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(SyscodeParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 826;
			_localctx.Basic = basicReference();
			State = 828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 827;
				_localctx.ArgsList = argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 838;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					_localctx.Pointer = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 830;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 831;
					Match(RARROW);
					State = 832;
					_localctx.Basic = basicReference();
					State = 834;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
					case 1:
						{
						State = 833;
						_localctx.ArgsList = argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 840;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 102, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 841;
				structureQualificationList();
				}
				break;
			}
			State = 844;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		public ArgumentsContext _arguments;
		public IList<ArgumentsContext> _ArgsSet = new List<ArgumentsContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 104, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 846;
					_localctx._arguments = arguments();
					_localctx._ArgsSet.Add(_localctx._arguments);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 849;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 106, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 851;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 854;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SyscodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 108, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			_localctx.Spelling = identifier();
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 857;
				arguments();
				}
			}

			State = 860;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public SubscriptCommalistContext List;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 110, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(LPAR);
			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2310346609109502992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -8068479880959852545L) != 0) || _la==IDENTIFIER) {
				{
				State = 863;
				_localctx.List = subscriptCommalist();
				}
			}

			State = 866;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exp = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 112, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			_localctx._expression = expression(0);
			_localctx._Exp.Add(_localctx._expression);
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 869;
				Match(COMMA);
				State = 870;
				_localctx._expression = expression(0);
				_localctx._Exp.Add(_localctx._expression);
				}
				}
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		public ParenthesizedExpressionContext Parenthesized;
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprBinaryContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulDivContext mulDiv() {
			return GetRuleContext<MulDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubContext addSub() {
			return GetRuleContext<AddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftRotateContext shiftRotate() {
			return GetRuleContext<ShiftRotateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenateContext concatenate() {
			return GetRuleContext<ConcatenateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorContext boolXor() {
			return GetRuleContext<BoolXorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrContext boolOr() {
			return GetRuleContext<BoolOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogandContext logand() {
			return GetRuleContext<LogandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogorContext logor() {
			return GetRuleContext<LogorContext>(0);
		}
		public ExprBinaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		public PrefixExpressionContext Prefixed;
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		public PrimitiveExpressionContext Primitive;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BIN_LITERAL:
			case DEC_LITERAL:
			case ALIGNED:
			case AS:
			case AUTO:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BUILTIN:
			case BY:
			case BYTEPAD:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case DOUBLE:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNCTION:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LEAVE:
			case LIT:
			case LOOP:
			case MAIN:
			case OFFSET:
			case OPTIONS:
			case PACKAGE:
			case PACKED:
			case PAD:
			case PATH:
			case POINTER:
			case PROCEDURE:
			case RETURN:
			case SINGLE:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case STR_LITERAL:
			case ATSIGN:
			case IDENTIFIER:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 877;
				((ExprPrimitiveContext)_localctx).Primitive = primitiveExpression();
				}
				break;
			case LPAR:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 878;
				((ExprParenthesizedContext)_localctx).Parenthesized = parenthesizedExpression();
				}
				break;
			case NOT:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 879;
				((ExprPrefixedContext)_localctx).Prefixed = prefixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 994;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 992;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 882;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 884;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 883;
							emptyLines();
							}
						}

						State = 886;
						power();
						State = 888;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 887;
							emptyLines();
							}
						}

						State = 890;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 892;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 894;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 893;
							emptyLines();
							}
						}

						State = 896;
						mulDiv();
						State = 898;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 897;
							emptyLines();
							}
						}

						State = 900;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 902;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 904;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 903;
							emptyLines();
							}
						}

						State = 906;
						addSub();
						State = 908;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 907;
							emptyLines();
							}
						}

						State = 910;
						((ExprBinaryContext)_localctx).Rite = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 912;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 914;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 913;
							emptyLines();
							}
						}

						State = 916;
						shiftRotate();
						State = 918;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 917;
							emptyLines();
							}
						}

						State = 920;
						((ExprBinaryContext)_localctx).Rite = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 922;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 924;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 923;
							emptyLines();
							}
						}

						State = 926;
						concatenate();
						State = 928;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 927;
							emptyLines();
							}
						}

						State = 930;
						((ExprBinaryContext)_localctx).Rite = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 932;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 934;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 933;
							emptyLines();
							}
						}

						State = 936;
						comparison();
						State = 938;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 937;
							emptyLines();
							}
						}

						State = 940;
						((ExprBinaryContext)_localctx).Rite = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 942;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 944;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 943;
							emptyLines();
							}
						}

						State = 946;
						boolAnd();
						State = 948;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 947;
							emptyLines();
							}
						}

						State = 950;
						((ExprBinaryContext)_localctx).Rite = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 952;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 954;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 953;
							emptyLines();
							}
						}

						State = 956;
						boolXor();
						State = 958;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 957;
							emptyLines();
							}
						}

						State = 960;
						((ExprBinaryContext)_localctx).Rite = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 962;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 964;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 963;
							emptyLines();
							}
						}

						State = 966;
						boolOr();
						State = 968;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 967;
							emptyLines();
							}
						}

						State = 970;
						((ExprBinaryContext)_localctx).Rite = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 972;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 974;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 973;
							emptyLines();
							}
						}

						State = 976;
						logand();
						State = 978;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 977;
							emptyLines();
							}
						}

						State = 980;
						((ExprBinaryContext)_localctx).Rite = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 982;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 984;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 983;
							emptyLines();
							}
						}

						State = 986;
						logor();
						State = 988;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 987;
							emptyLines();
							}
						}

						State = 990;
						((ExprBinaryContext)_localctx).Rite = expression(2);
						}
						break;
					}
					} 
				}
				State = 996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	 
		public PrimitiveExpressionContext() { }
		public virtual void CopyFrom(PrimitiveExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RefContext : PrimitiveExpressionContext {
		public ReferenceContext Reference;
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public RefContext(PrimitiveExpressionContext context) { CopyFrom(context); }
	}
	public partial class LiteralStringContext : PrimitiveExpressionContext {
		public StringLiteralContext String;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralStringContext(PrimitiveExpressionContext context) { CopyFrom(context); }
	}
	public partial class LiteralArithmeticContext : PrimitiveExpressionContext {
		public NumericLiteralContext Numeric;
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralArithmeticContext(PrimitiveExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_primitiveExpression);
		try {
			State = 1000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BIN_LITERAL:
			case DEC_LITERAL:
				_localctx = new LiteralArithmeticContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 997;
				((LiteralArithmeticContext)_localctx).Numeric = numericLiteral();
				}
				break;
			case STR_LITERAL:
				_localctx = new LiteralStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 998;
				((LiteralStringContext)_localctx).String = stringLiteral();
				}
				break;
			case ALIGNED:
			case AS:
			case AUTO:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BUILTIN:
			case BY:
			case BYTEPAD:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case DOUBLE:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNCTION:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LEAVE:
			case LIT:
			case LOOP:
			case MAIN:
			case OFFSET:
			case OPTIONS:
			case PACKAGE:
			case PACKED:
			case PAD:
			case PATH:
			case POINTER:
			case PROCEDURE:
			case RETURN:
			case SINGLE:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case ATSIGN:
			case IDENTIFIER:
				_localctx = new RefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 999;
				((RefContext)_localctx).Reference = reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public IToken Text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LITERAL() { return GetToken(SyscodeParser.STR_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			_localctx.Text = Match(STR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public HexLiteralContext Hex;
		public BinLiteralContext Bin;
		public OctLiteralContext Oct;
		public DecLiteralContext Dec;
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinLiteralContext binLiteral() {
			return GetRuleContext<BinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctLiteralContext octLiteral() {
			return GetRuleContext<OctLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_numericLiteral);
		try {
			State = 1008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1004;
				_localctx.Hex = hexLiteral();
				}
				break;
			case BIN_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005;
				_localctx.Bin = binLiteral();
				}
				break;
			case OCT_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1006;
				_localctx.Oct = octLiteral();
				}
				break;
			case DEC_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1007;
				_localctx.Dec = decLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(SyscodeParser.HEX_LITERAL, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1010;
			Match(HEX_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LITERAL() { return GetToken(SyscodeParser.BIN_LITERAL, 0); }
		public BinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binLiteral; } }
	}

	[RuleVersion(0)]
	public BinLiteralContext binLiteral() {
		BinLiteralContext _localctx = new BinLiteralContext(Context, State);
		EnterRule(_localctx, 124, RULE_binLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1012;
			Match(BIN_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(SyscodeParser.OCT_LITERAL, 0); }
		public OctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octLiteral; } }
	}

	[RuleVersion(0)]
	public OctLiteralContext octLiteral() {
		OctLiteralContext _localctx = new OctLiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_octLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1014;
			Match(OCT_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL() { return GetToken(SyscodeParser.DEC_LITERAL, 0); }
		public DecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLiteral; } }
	}

	[RuleVersion(0)]
	public DecLiteralContext decLiteral() {
		DecLiteralContext _localctx = new DecLiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_decLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1016;
			Match(DEC_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionContext Expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			Match(LPAR);
			State = 1019;
			_localctx.Expr = expression(0);
			State = 1020;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		public PrefixOperatorContext Op;
		public ExpressionContext Expr;
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			_localctx.Op = prefixOperator();
			State = 1023;
			_localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : ParserRuleContext {
		public BoundPairCommalistContext Pair;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 134, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			Match(LPAR);
			State = 1026;
			_localctx.Pair = boundPairCommalist();
			State = 1027;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : ParserRuleContext {
		public ExpressionContext Lower;
		public ExpressionContext Upper;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SyscodeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 136, RULE_boundPair);
		try {
			State = 1036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BIN_LITERAL:
			case DEC_LITERAL:
			case ALIGNED:
			case AS:
			case AUTO:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BUILTIN:
			case BY:
			case BYTEPAD:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case DOUBLE:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNCTION:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LEAVE:
			case LIT:
			case LOOP:
			case MAIN:
			case OFFSET:
			case OPTIONS:
			case PACKAGE:
			case PACKED:
			case PAD:
			case PATH:
			case POINTER:
			case PROCEDURE:
			case RETURN:
			case SINGLE:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case NOT:
			case STR_LITERAL:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
			case ATSIGN:
			case LPAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1032;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 1029;
					_localctx.Lower = expression(0);
					State = 1030;
					Match(COLON);
					}
					break;
				}
				State = 1034;
				_localctx.Upper = expression(0);
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : ParserRuleContext {
		public BoundPairContext _boundPair;
		public IList<BoundPairContext> _BoundPairs = new List<BoundPairContext>();
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 138, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038;
			_localctx._boundPair = boundPair();
			_localctx._BoundPairs.Add(_localctx._boundPair);
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1039;
				Match(COMMA);
				State = 1040;
				_localctx._boundPair = boundPair();
				_localctx._BoundPairs.Add(_localctx._boundPair);
				}
				}
				State = 1045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 140, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 142, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(SyscodeParser.LOGAND, 0); }
		public LogandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logand; } }
	}

	[RuleVersion(0)]
	public LogandContext logand() {
		LogandContext _localctx = new LogandContext(Context, State);
		EnterRule(_localctx, 144, RULE_logand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			Match(LOGAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(SyscodeParser.LOGOR, 0); }
		public LogorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logor; } }
	}

	[RuleVersion(0)]
	public LogorContext logor() {
		LogorContext _localctx = new LogorContext(Context, State);
		EnterRule(_localctx, 146, RULE_logor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(LOGOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(SyscodeParser.CONC, 0); }
		public ConcatenateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate; } }
	}

	[RuleVersion(0)]
	public ConcatenateContext concatenate() {
		ConcatenateContext _localctx = new ConcatenateContext(Context, State);
		EnterRule(_localctx, 148, RULE_concatenate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			Match(CONC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SyscodeParser.POWER, 0); }
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 150, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRotateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE() { return GetToken(SyscodeParser.L_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE() { return GetToken(SyscodeParser.R_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(SyscodeParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(SyscodeParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(SyscodeParser.R_ART_SHIFT, 0); }
		public ShiftRotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRotate; } }
	}

	[RuleVersion(0)]
	public ShiftRotateContext shiftRotate() {
		ShiftRotateContext _localctx = new ShiftRotateContext(Context, State);
		EnterRule(_localctx, 152, RULE_shiftRotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPLUS() { return GetToken(SyscodeParser.OPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMINUS() { return GetToken(SyscodeParser.OMINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLUS() { return GetToken(SyscodeParser.SPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMINUS() { return GetToken(SyscodeParser.SMINUS, 0); }
		public AddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSub; } }
	}

	[RuleVersion(0)]
	public AddSubContext addSub() {
		AddSubContext _localctx = new AddSubContext(Context, State);
		EnterRule(_localctx, 154, RULE_addSub);
		int _la;
		try {
			State = 1063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1060;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OPLUS:
			case OMINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1061;
				_la = TokenStream.LA(1);
				if ( !(_la==OPLUS || _la==OMINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SPLUS:
			case SMINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1062;
				_la = TokenStream.LA(1);
				if ( !(_la==SPLUS || _la==SMINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTIMES() { return GetToken(SyscodeParser.OTIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STIMES() { return GetToken(SyscodeParser.STIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SyscodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(SyscodeParser.PCNT, 0); }
		public MulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDiv; } }
	}

	[RuleVersion(0)]
	public MulDivContext mulDiv() {
		MulDivContext _localctx = new MulDivContext(Context, State);
		EnterRule(_localctx, 156, RULE_mulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 55L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SyscodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(SyscodeParser.NAND, 0); }
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(Context, State);
		EnterRule(_localctx, 158, RULE_boolAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(SyscodeParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(SyscodeParser.XNOR, 0); }
		public BoolXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXor; } }
	}

	[RuleVersion(0)]
	public BoolXorContext boolXor() {
		BoolXorContext _localctx = new BoolXorContext(Context, State);
		EnterRule(_localctx, 160, RULE_boolXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR || _la==XNOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SyscodeParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(SyscodeParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public BoolOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOr; } }
	}

	[RuleVersion(0)]
	public BoolOrContext boolOr() {
		BoolOrContext _localctx = new BoolOrContext(Context, State);
		EnterRule(_localctx, 162, RULE_boolOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 37L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SyscodeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SyscodeParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SyscodeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SyscodeParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(SyscodeParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(SyscodeParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(SyscodeParser.NLT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 164, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 1073741951L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
	 
		public PrefixOperatorContext() { }
		public virtual void CopyFrom(PrefixOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RedxorContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR() { return GetToken(SyscodeParser.REDXOR, 0); }
		public RedxorContext(PrefixOperatorContext context) { CopyFrom(context); }
	}
	public partial class NotContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public NotContext(PrefixOperatorContext context) { CopyFrom(context); }
	}
	public partial class RedorContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(SyscodeParser.REDOR, 0); }
		public RedorContext(PrefixOperatorContext context) { CopyFrom(context); }
	}
	public partial class PlusContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		public PlusContext(PrefixOperatorContext context) { CopyFrom(context); }
	}
	public partial class RedandContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(SyscodeParser.REDAND, 0); }
		public RedandContext(PrefixOperatorContext context) { CopyFrom(context); }
	}
	public partial class MinusContext : PrefixOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		public MinusContext(PrefixOperatorContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 166, RULE_prefixOperator);
		try {
			State = 1081;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new MinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076;
				Match(MINUS);
				}
				break;
			case NOT:
				_localctx = new NotContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1077;
				Match(NOT);
				}
				break;
			case REDAND:
				_localctx = new RedandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1078;
				Match(REDAND);
				}
				break;
			case REDOR:
				_localctx = new RedorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1079;
				Match(REDOR);
				}
				break;
			case REDXOR:
				_localctx = new RedxorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1080;
				Match(REDXOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SyscodeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SyscodeParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 168, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			identifier();
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1084;
				Match(DOT);
				State = 1085;
				identifier();
				}
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 170, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(LPAR);
			State = 1092;
			_localctx._identifier = identifier();
			_localctx._Params.Add(_localctx._identifier);
			State = 1097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1093;
				Match(COMMA);
				State = 1094;
				_localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
				}
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1100;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEC_LITERAL() { return GetTokens(SyscodeParser.DEC_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL(int i) {
			return GetToken(SyscodeParser.DEC_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ConstArrayListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayList; } }
	}

	[RuleVersion(0)]
	public ConstArrayListContext constArrayList() {
		ConstArrayListContext _localctx = new ConstArrayListContext(Context, State);
		EnterRule(_localctx, 172, RULE_constArrayList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1102;
			Match(LPAR);
			State = 1103;
			Match(DEC_LITERAL);
			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1104;
				Match(COMMA);
				State = 1105;
				Match(DEC_LITERAL);
				}
				}
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1111;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 1113;
				emptyLines();
				}
			}

			State = 1116;
			enumMember();
			State = 1118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1117;
				emptyLines();
				}
				break;
			}
			State = 1130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1120;
					memberSeparator();
					State = 1122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 1121;
						emptyLines();
						}
					}

					State = 1124;
					enumMember();
					State = 1126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
					case 1:
						{
						State = 1125;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 1132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			State = 1134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1133;
				memberSeparator();
				}
			}

			State = 1137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1136;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 176, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1139;
			_localctx.Name = identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext Key;
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SyscodeParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_identifier);
		try {
			State = 1143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
			case AS:
			case AUTO:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BUILTIN:
			case BY:
			case BYTEPAD:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case DOUBLE:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNCTION:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LEAVE:
			case LIT:
			case LOOP:
			case MAIN:
			case OFFSET:
			case OPTIONS:
			case PACKAGE:
			case PACKED:
			case PAD:
			case PATH:
			case POINTER:
			case PROCEDURE:
			case RETURN:
			case SINGLE:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case ATSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1141;
				_localctx.Key = keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1142;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaryingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public VaryingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varying; } }
	}

	[RuleVersion(0)]
	public VaryingContext varying() {
		VaryingContext _localctx = new VaryingContext(Context, State);
		EnterRule(_localctx, 180, RULE_varying);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKED() { return GetToken(SyscodeParser.PACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasedAttributeContext basedAttribute() {
			return GetRuleContext<BasedAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(SyscodeParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtAttributeContext atAttribute() {
			return GetRuleContext<AtAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderAttributeContext orderAttribute() {
			return GetRuleContext<OrderAttributeContext>(0);
		}
		public StructAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAttributes; } }
	}

	[RuleVersion(0)]
	public StructAttributesContext structAttributes() {
		StructAttributesContext _localctx = new StructAttributesContext(Context, State);
		EnterRule(_localctx, 182, RULE_structAttributes);
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147;
				Match(ALIGNED);
				}
				break;
			case PACKED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148;
				Match(PACKED);
				}
				break;
			case BASED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1149;
				basedAttribute();
				}
				break;
			case AUTO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1150;
				Match(AUTO);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1151;
				atAttribute();
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1152;
				orderAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtAttributeContext : ParserRuleContext {
		public ExpressionContext Address;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SyscodeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AtAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atAttribute; } }
	}

	[RuleVersion(0)]
	public AtAttributeContext atAttribute() {
		AtAttributeContext _localctx = new AtAttributeContext(Context, State);
		EnterRule(_localctx, 184, RULE_atAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(AT);
			{
			State = 1156;
			Match(LPAR);
			State = 1157;
			_localctx.Address = expression(0);
			State = 1158;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SyscodeParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SyscodeParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SyscodeParser.DESC, 0); }
		public OrderAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderAttribute; } }
	}

	[RuleVersion(0)]
	public OrderAttributeContext orderAttribute() {
		OrderAttributeContext _localctx = new OrderAttributeContext(Context, State);
		EnterRule(_localctx, 186, RULE_orderAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			Match(ORDER);
			State = 1161;
			Match(LPAR);
			State = 1162;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1163;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		public ConstAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAttribute; } }
	}

	[RuleVersion(0)]
	public ConstAttributeContext constAttribute() {
		ConstAttributeContext _localctx = new ConstAttributeContext(Context, State);
		EnterRule(_localctx, 188, RULE_constAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedAttributeContext : ParserRuleContext {
		public ExpressionContext Alignment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AlignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedAttribute; } }
	}

	[RuleVersion(0)]
	public AlignedAttributeContext alignedAttribute() {
		AlignedAttributeContext _localctx = new AlignedAttributeContext(Context, State);
		EnterRule(_localctx, 190, RULE_alignedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			Match(ALIGNED);
			State = 1172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1168;
				Match(LPAR);
				State = 1169;
				_localctx.Alignment = expression(0);
				State = 1170;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetAttributeContext : ParserRuleContext {
		public ExpressionContext Offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SyscodeParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OffsetAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offsetAttribute; } }
	}

	[RuleVersion(0)]
	public OffsetAttributeContext offsetAttribute() {
		OffsetAttributeContext _localctx = new OffsetAttributeContext(Context, State);
		EnterRule(_localctx, 192, RULE_offsetAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			Match(OFFSET);
			{
			State = 1175;
			Match(LPAR);
			State = 1176;
			_localctx.Offset = expression(0);
			State = 1177;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKED() { return GetToken(SyscodeParser.PACKED, 0); }
		public PackedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packedAttribute; } }
	}

	[RuleVersion(0)]
	public PackedAttributeContext packedAttribute() {
		PackedAttributeContext _localctx = new PackedAttributeContext(Context, State);
		EnterRule(_localctx, 194, RULE_packedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			Match(PACKED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		public ExternalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalAttribute; } }
	}

	[RuleVersion(0)]
	public ExternalAttributeContext externalAttribute() {
		ExternalAttributeContext _localctx = new ExternalAttributeContext(Context, State);
		EnterRule(_localctx, 196, RULE_externalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			Match(EXTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(SyscodeParser.INTERNAL, 0); }
		public InternalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalAttribute; } }
	}

	[RuleVersion(0)]
	public InternalAttributeContext internalAttribute() {
		InternalAttributeContext _localctx = new InternalAttributeContext(Context, State);
		EnterRule(_localctx, 198, RULE_internalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			Match(INTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		public StaticAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAttribute; } }
	}

	[RuleVersion(0)]
	public StaticAttributeContext staticAttribute() {
		StaticAttributeContext _localctx = new StaticAttributeContext(Context, State);
		EnterRule(_localctx, 200, RULE_staticAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			Match(STATIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedAttributeContext : ParserRuleContext {
		public ExpressionContext Base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(SyscodeParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basedAttribute; } }
	}

	[RuleVersion(0)]
	public BasedAttributeContext basedAttribute() {
		BasedAttributeContext _localctx = new BasedAttributeContext(Context, State);
		EnterRule(_localctx, 202, RULE_basedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187;
			Match(BASED);
			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1188;
				Match(LPAR);
				State = 1189;
				_localctx.Base = expression(0);
				State = 1190;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StackAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(SyscodeParser.STACK, 0); }
		public StackAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackAttribute; } }
	}

	[RuleVersion(0)]
	public StackAttributeContext stackAttribute() {
		StackAttributeContext _localctx = new StackAttributeContext(Context, State);
		EnterRule(_localctx, 204, RULE_stackAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			Match(STACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttributeContext : ParserRuleContext {
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(SyscodeParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttribute; } }
	}

	[RuleVersion(0)]
	public InitAttributeContext initAttribute() {
		InitAttributeContext _localctx = new InitAttributeContext(Context, State);
		EnterRule(_localctx, 206, RULE_initAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			Match(INIT);
			State = 1197;
			Match(LPAR);
			State = 1198;
			_localctx.Value = expression(0);
			State = 1199;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 208, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201;
			Match(UNIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryArgTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public EntryArgTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryArgTypes; } }
	}

	[RuleVersion(0)]
	public EntryArgTypesContext entryArgTypes() {
		EntryArgTypesContext _localctx = new EntryArgTypesContext(Context, State);
		EnterRule(_localctx, 210, RULE_entryArgTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			Match(LPAR);
			State = 1204;
			typeSpecifier();
			State = 1209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1205;
				Match(COMMA);
				State = 1206;
				typeSpecifier();
				}
				}
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1212;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public ReturnDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnDescriptor; } }
	}

	[RuleVersion(0)]
	public ReturnDescriptorContext returnDescriptor() {
		ReturnDescriptorContext _localctx = new ReturnDescriptorContext(Context, State);
		EnterRule(_localctx, 212, RULE_returnDescriptor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			Match(AS);
			State = 1215;
			Match(LPAR);
			State = 1216;
			typeSpecifier();
			State = 1217;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SyscodeParser.COMMA, 0); }
		public MemberSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSeparator; } }
	}

	[RuleVersion(0)]
	public MemberSeparatorContext memberSeparator() {
		MemberSeparatorContext _localctx = new MemberSeparatorContext(Context, State);
		EnterRule(_localctx, 214, RULE_memberSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public EndOfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfFile; } }
	}

	[RuleVersion(0)]
	public EndOfFileContext endOfFile() {
		EndOfFileContext _localctx = new EndOfFileContext(Context, State);
		EnterRule(_localctx, 216, RULE_endOfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 1221;
				emptyLines();
				}
			}

			State = 1224;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATSIGN() { return GetToken(SyscodeParser.ATSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(SyscodeParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(SyscodeParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILTIN() { return GetToken(SyscodeParser.BUILTIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTEPAD() { return GetToken(SyscodeParser.BYTEPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(SyscodeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SyscodeParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(SyscodeParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREVER() { return GetToken(SyscodeParser.FOREVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SyscodeParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(SyscodeParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(SyscodeParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SyscodeParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(SyscodeParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(SyscodeParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(SyscodeParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SyscodeParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(SyscodeParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SyscodeParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKED() { return GetToken(SyscodeParser.PACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(SyscodeParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SyscodeParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(SyscodeParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE() { return GetToken(SyscodeParser.SINGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(SyscodeParser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 218, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -2310346609109503232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1152921504606879743L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 50: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 57: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,134,1229,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,1,0,4,0,222,
		8,0,11,0,12,0,223,1,1,1,1,1,2,4,2,229,8,2,11,2,12,2,230,1,3,5,3,234,8,
		3,10,3,12,3,237,9,3,1,3,1,3,1,4,3,4,242,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,257,8,4,1,5,1,5,1,5,3,5,262,8,5,1,5,5,5,
		265,8,5,10,5,12,5,268,9,5,1,5,1,5,3,5,272,8,5,1,5,1,5,3,5,276,8,5,1,5,
		3,5,279,8,5,5,5,281,8,5,10,5,12,5,284,9,5,1,5,1,5,1,6,1,6,3,6,290,8,6,
		1,6,1,6,5,6,294,8,6,10,6,12,6,297,9,6,1,6,1,6,1,7,1,7,3,7,303,8,7,1,7,
		1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,12,1,12,1,13,1,13,3,13,326,8,13,1,13,1,13,3,13,330,8,13,1,13,5,13,333,
		8,13,10,13,12,13,336,9,13,1,13,3,13,339,8,13,1,13,1,13,1,14,1,14,3,14,
		345,8,14,1,14,1,14,3,14,349,8,14,1,14,3,14,352,8,14,1,14,5,14,355,8,14,
		10,14,12,14,358,9,14,1,14,3,14,361,8,14,1,14,1,14,1,15,1,15,3,15,367,8,
		15,1,15,1,15,3,15,371,8,15,1,15,3,15,374,8,15,1,15,1,15,3,15,378,8,15,
		1,15,5,15,381,8,15,10,15,12,15,384,9,15,1,15,3,15,387,8,15,1,15,1,15,1,
		16,1,16,1,16,4,16,394,8,16,11,16,12,16,395,1,16,1,16,1,17,1,17,3,17,402,
		8,17,1,17,1,17,3,17,406,8,17,1,17,3,17,409,8,17,1,17,1,17,3,17,413,8,17,
		1,17,1,17,3,17,417,8,17,1,17,1,17,1,18,1,18,3,18,423,8,18,1,18,1,18,1,
		18,1,19,1,19,3,19,430,8,19,1,19,3,19,433,8,19,1,19,1,19,1,20,1,20,1,20,
		1,20,3,20,441,8,20,1,20,1,20,3,20,445,8,20,1,20,3,20,448,8,20,1,20,3,20,
		451,8,20,1,20,1,20,4,20,455,8,20,11,20,12,20,456,1,20,1,20,3,20,461,8,
		20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,475,
		8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,487,8,22,1,
		23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,500,8,25,1,26,
		1,26,3,26,504,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,513,8,26,1,
		26,3,26,516,8,26,1,26,1,26,3,26,520,8,26,1,26,3,26,523,8,26,1,26,1,26,
		3,26,527,8,26,1,26,3,26,530,8,26,1,26,1,26,3,26,534,8,26,1,26,5,26,537,
		8,26,10,26,12,26,540,9,26,1,26,3,26,543,8,26,1,26,1,26,1,27,1,27,3,27,
		549,8,27,1,27,1,27,3,27,553,8,27,1,27,5,27,556,8,27,10,27,12,27,559,9,
		27,1,27,3,27,562,8,27,1,27,1,27,1,28,1,28,3,28,568,8,28,1,28,1,28,3,28,
		572,8,28,1,28,5,28,575,8,28,10,28,12,28,578,9,28,1,28,3,28,581,8,28,1,
		28,1,28,1,29,1,29,3,29,587,8,29,1,29,1,29,5,29,591,8,29,10,29,12,29,594,
		9,29,1,29,3,29,597,8,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,
		32,3,32,609,8,32,1,32,3,32,612,8,32,1,32,1,32,3,32,616,8,32,1,32,3,32,
		619,8,32,1,32,3,32,622,8,32,1,32,3,32,625,8,32,1,32,3,32,628,8,32,1,32,
		1,32,1,33,3,33,633,8,33,1,33,1,33,3,33,637,8,33,1,33,1,33,3,33,641,8,33,
		1,33,1,33,1,34,5,34,646,8,34,10,34,12,34,649,9,34,1,35,1,35,3,35,653,8,
		35,1,35,1,35,1,36,1,36,3,36,659,8,36,1,36,4,36,662,8,36,11,36,12,36,663,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,675,8,37,1,38,1,38,1,
		38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,3,39,696,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
		706,8,39,1,39,3,39,709,8,39,3,39,711,8,39,1,40,1,40,1,40,1,40,1,40,1,41,
		1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,730,8,43,1,
		44,1,44,1,44,3,44,735,8,44,1,44,3,44,738,8,44,1,44,3,44,741,8,44,1,44,
		3,44,744,8,44,1,44,3,44,747,8,44,1,44,3,44,750,8,44,1,44,3,44,753,8,44,
		1,44,3,44,756,8,44,1,44,3,44,759,8,44,1,44,3,44,762,8,44,1,44,3,44,765,
		8,44,1,44,3,44,768,8,44,1,44,3,44,771,8,44,1,44,3,44,774,8,44,1,44,3,44,
		777,8,44,1,44,3,44,780,8,44,1,44,3,44,783,8,44,1,44,3,44,786,8,44,3,44,
		788,8,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
		47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,811,8,47,1,47,3,47,814,
		8,47,1,47,3,47,817,8,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,
		50,3,50,829,8,50,1,50,1,50,1,50,1,50,3,50,835,8,50,5,50,837,8,50,10,50,
		12,50,840,9,50,1,51,3,51,843,8,51,1,51,1,51,1,52,4,52,848,8,52,11,52,12,
		52,849,1,53,4,53,853,8,53,11,53,12,53,854,1,54,1,54,3,54,859,8,54,1,54,
		1,54,1,55,1,55,3,55,865,8,55,1,55,1,55,1,56,1,56,1,56,5,56,872,8,56,10,
		56,12,56,875,9,56,1,57,1,57,1,57,1,57,3,57,881,8,57,1,57,1,57,3,57,885,
		8,57,1,57,1,57,3,57,889,8,57,1,57,1,57,1,57,1,57,3,57,895,8,57,1,57,1,
		57,3,57,899,8,57,1,57,1,57,1,57,1,57,3,57,905,8,57,1,57,1,57,3,57,909,
		8,57,1,57,1,57,1,57,1,57,3,57,915,8,57,1,57,1,57,3,57,919,8,57,1,57,1,
		57,1,57,1,57,3,57,925,8,57,1,57,1,57,3,57,929,8,57,1,57,1,57,1,57,1,57,
		3,57,935,8,57,1,57,1,57,3,57,939,8,57,1,57,1,57,1,57,1,57,3,57,945,8,57,
		1,57,1,57,3,57,949,8,57,1,57,1,57,1,57,1,57,3,57,955,8,57,1,57,1,57,3,
		57,959,8,57,1,57,1,57,1,57,1,57,3,57,965,8,57,1,57,1,57,3,57,969,8,57,
		1,57,1,57,1,57,1,57,3,57,975,8,57,1,57,1,57,3,57,979,8,57,1,57,1,57,1,
		57,1,57,3,57,985,8,57,1,57,1,57,3,57,989,8,57,1,57,1,57,5,57,993,8,57,
		10,57,12,57,996,9,57,1,58,1,58,1,58,3,58,1001,8,58,1,59,1,59,1,60,1,60,
		1,60,1,60,3,60,1009,8,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,
		1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,3,68,
		1033,8,68,1,68,1,68,3,68,1037,8,68,1,69,1,69,1,69,5,69,1042,8,69,10,69,
		12,69,1045,9,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
		1,75,1,76,1,76,1,77,1,77,1,77,3,77,1064,8,77,1,78,1,78,1,79,1,79,1,80,
		1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1082,8,83,
		1,84,1,84,1,84,5,84,1087,8,84,10,84,12,84,1090,9,84,1,85,1,85,1,85,1,85,
		5,85,1096,8,85,10,85,12,85,1099,9,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,
		1107,8,86,10,86,12,86,1110,9,86,1,86,1,86,1,87,3,87,1115,8,87,1,87,1,87,
		3,87,1119,8,87,1,87,1,87,3,87,1123,8,87,1,87,1,87,3,87,1127,8,87,5,87,
		1129,8,87,10,87,12,87,1132,9,87,1,87,3,87,1135,8,87,1,87,3,87,1138,8,87,
		1,88,1,88,1,89,1,89,3,89,1144,8,89,1,90,1,90,1,91,1,91,1,91,1,91,1,91,
		1,91,3,91,1154,8,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,
		1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,1173,8,95,1,96,1,96,1,96,1,96,
		1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,1,101,
		1,101,3,101,1193,8,101,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,
		1,104,1,105,1,105,1,105,1,105,5,105,1208,8,105,10,105,12,105,1211,9,105,
		1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,108,3,108,1223,
		8,108,1,108,1,108,1,109,1,109,1,109,0,2,100,114,110,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
		216,218,0,14,2,0,125,125,133,133,2,1,125,125,133,133,2,0,120,120,122,122,
		1,0,115,119,2,0,99,99,102,102,2,0,100,100,103,103,2,0,101,101,104,104,
		2,0,105,107,109,110,2,0,83,83,85,85,1,0,87,88,3,0,84,84,86,86,89,89,2,
		0,90,96,120,120,2,0,10,10,28,28,6,0,8,9,12,27,29,51,53,60,62,78,124,124,
		1377,0,221,1,0,0,0,2,225,1,0,0,0,4,228,1,0,0,0,6,235,1,0,0,0,8,241,1,0,
		0,0,10,258,1,0,0,0,12,287,1,0,0,0,14,300,1,0,0,0,16,306,1,0,0,0,18,309,
		1,0,0,0,20,313,1,0,0,0,22,317,1,0,0,0,24,321,1,0,0,0,26,323,1,0,0,0,28,
		342,1,0,0,0,30,364,1,0,0,0,32,390,1,0,0,0,34,399,1,0,0,0,36,420,1,0,0,
		0,38,427,1,0,0,0,40,460,1,0,0,0,42,474,1,0,0,0,44,486,1,0,0,0,46,488,1,
		0,0,0,48,491,1,0,0,0,50,499,1,0,0,0,52,501,1,0,0,0,54,546,1,0,0,0,56,565,
		1,0,0,0,58,584,1,0,0,0,60,600,1,0,0,0,62,603,1,0,0,0,64,606,1,0,0,0,66,
		632,1,0,0,0,68,647,1,0,0,0,70,650,1,0,0,0,72,661,1,0,0,0,74,674,1,0,0,
		0,76,676,1,0,0,0,78,710,1,0,0,0,80,712,1,0,0,0,82,717,1,0,0,0,84,719,1,
		0,0,0,86,724,1,0,0,0,88,731,1,0,0,0,90,789,1,0,0,0,92,791,1,0,0,0,94,816,
		1,0,0,0,96,818,1,0,0,0,98,823,1,0,0,0,100,825,1,0,0,0,102,842,1,0,0,0,
		104,847,1,0,0,0,106,852,1,0,0,0,108,856,1,0,0,0,110,862,1,0,0,0,112,868,
		1,0,0,0,114,880,1,0,0,0,116,1000,1,0,0,0,118,1002,1,0,0,0,120,1008,1,0,
		0,0,122,1010,1,0,0,0,124,1012,1,0,0,0,126,1014,1,0,0,0,128,1016,1,0,0,
		0,130,1018,1,0,0,0,132,1022,1,0,0,0,134,1025,1,0,0,0,136,1036,1,0,0,0,
		138,1038,1,0,0,0,140,1046,1,0,0,0,142,1048,1,0,0,0,144,1050,1,0,0,0,146,
		1052,1,0,0,0,148,1054,1,0,0,0,150,1056,1,0,0,0,152,1058,1,0,0,0,154,1063,
		1,0,0,0,156,1065,1,0,0,0,158,1067,1,0,0,0,160,1069,1,0,0,0,162,1071,1,
		0,0,0,164,1073,1,0,0,0,166,1081,1,0,0,0,168,1083,1,0,0,0,170,1091,1,0,
		0,0,172,1102,1,0,0,0,174,1114,1,0,0,0,176,1139,1,0,0,0,178,1143,1,0,0,
		0,180,1145,1,0,0,0,182,1153,1,0,0,0,184,1155,1,0,0,0,186,1160,1,0,0,0,
		188,1165,1,0,0,0,190,1167,1,0,0,0,192,1174,1,0,0,0,194,1179,1,0,0,0,196,
		1181,1,0,0,0,198,1183,1,0,0,0,200,1185,1,0,0,0,202,1187,1,0,0,0,204,1194,
		1,0,0,0,206,1196,1,0,0,0,208,1201,1,0,0,0,210,1203,1,0,0,0,212,1214,1,
		0,0,0,214,1219,1,0,0,0,216,1222,1,0,0,0,218,1226,1,0,0,0,220,222,7,0,0,
		0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,
		1,1,0,0,0,225,226,7,1,0,0,226,3,1,0,0,0,227,229,5,133,0,0,228,227,1,0,
		0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,5,1,0,0,0,232,
		234,3,8,4,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,
		0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,3,216,108,0,239,7,1,0,0,
		0,240,242,3,0,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,256,1,0,0,0,243,
		257,3,36,18,0,244,257,3,38,19,0,245,257,3,14,7,0,246,257,3,34,17,0,247,
		257,3,64,32,0,248,257,3,40,20,0,249,257,3,46,23,0,250,257,3,28,14,0,251,
		257,3,30,15,0,252,257,3,50,25,0,253,257,3,20,10,0,254,257,3,48,24,0,255,
		257,3,96,48,0,256,243,1,0,0,0,256,244,1,0,0,0,256,245,1,0,0,0,256,246,
		1,0,0,0,256,247,1,0,0,0,256,248,1,0,0,0,256,249,1,0,0,0,256,250,1,0,0,
		0,256,251,1,0,0,0,256,252,1,0,0,0,256,253,1,0,0,0,256,254,1,0,0,0,256,
		255,1,0,0,0,257,9,1,0,0,0,258,259,5,65,0,0,259,261,3,178,89,0,260,262,
		3,134,67,0,261,260,1,0,0,0,261,262,1,0,0,0,262,266,1,0,0,0,263,265,3,182,
		91,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
		269,1,0,0,0,268,266,1,0,0,0,269,271,3,2,1,0,270,272,3,4,2,0,271,270,1,
		0,0,0,271,272,1,0,0,0,272,282,1,0,0,0,273,276,3,12,6,0,274,276,3,10,5,
		0,275,273,1,0,0,0,275,274,1,0,0,0,276,278,1,0,0,0,277,279,3,4,2,0,278,
		277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,275,1,0,0,0,281,284,1,
		0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,
		285,286,5,33,0,0,286,11,1,0,0,0,287,289,3,178,89,0,288,290,3,134,67,0,
		289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,295,3,74,37,0,292,
		294,3,44,22,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,
		1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,3,2,1,0,299,13,1,0,0,0,
		300,302,3,16,8,0,301,303,3,18,9,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
		304,1,0,0,0,304,305,3,2,1,0,305,15,1,0,0,0,306,307,5,124,0,0,307,308,3,
		178,89,0,308,17,1,0,0,0,309,310,5,127,0,0,310,311,3,128,64,0,311,312,5,
		128,0,0,312,19,1,0,0,0,313,314,5,40,0,0,314,315,3,100,50,0,315,316,3,2,
		1,0,316,21,1,0,0,0,317,318,5,127,0,0,318,319,3,114,57,0,319,320,5,128,
		0,0,320,23,1,0,0,0,321,322,3,26,13,0,322,25,1,0,0,0,323,325,5,53,0,0,324,
		326,3,4,2,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,3,
		168,84,0,328,330,3,4,2,0,329,328,1,0,0,0,329,330,1,0,0,0,330,334,1,0,0,
		0,331,333,3,8,4,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,
		335,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,337,339,3,4,2,0,338,337,1,
		0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,33,0,0,341,27,1,0,0,0,
		342,344,5,58,0,0,343,345,3,4,2,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,
		1,0,0,0,346,348,3,178,89,0,347,349,3,170,85,0,348,347,1,0,0,0,348,349,
		1,0,0,0,349,351,1,0,0,0,350,352,3,32,16,0,351,350,1,0,0,0,351,352,1,0,
		0,0,352,356,1,0,0,0,353,355,3,8,4,0,354,353,1,0,0,0,355,358,1,0,0,0,356,
		354,1,0,0,0,356,357,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,359,361,3,
		4,2,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,5,33,0,0,
		363,29,1,0,0,0,364,366,5,39,0,0,365,367,3,4,2,0,366,365,1,0,0,0,366,367,
		1,0,0,0,367,368,1,0,0,0,368,370,3,178,89,0,369,371,3,170,85,0,370,369,
		1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,374,3,32,16,0,373,372,1,0,
		0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,9,0,0,376,378,3,212,106,
		0,377,376,1,0,0,0,377,378,1,0,0,0,378,382,1,0,0,0,379,381,3,8,4,0,380,
		379,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,386,1,
		0,0,0,384,382,1,0,0,0,385,387,3,4,2,0,386,385,1,0,0,0,386,387,1,0,0,0,
		387,388,1,0,0,0,388,389,5,33,0,0,389,31,1,0,0,0,390,391,5,51,0,0,391,393,
		5,127,0,0,392,394,5,49,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,1,0,
		0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,5,128,0,0,398,33,1,0,0,0,399,
		401,5,35,0,0,400,402,3,4,2,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,
		0,0,0,403,405,3,178,89,0,404,406,3,4,2,0,405,404,1,0,0,0,405,406,1,0,0,
		0,406,408,1,0,0,0,407,409,3,74,37,0,408,407,1,0,0,0,408,409,1,0,0,0,409,
		410,1,0,0,0,410,412,3,214,107,0,411,413,3,4,2,0,412,411,1,0,0,0,412,413,
		1,0,0,0,413,414,1,0,0,0,414,416,3,174,87,0,415,417,3,4,2,0,416,415,1,0,
		0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,5,33,0,0,419,35,1,0,0,0,420,
		422,5,23,0,0,421,423,3,4,2,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,
		0,0,0,424,425,3,100,50,0,425,426,3,2,1,0,426,37,1,0,0,0,427,432,5,59,0,
		0,428,430,3,4,2,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,
		433,3,114,57,0,432,429,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,
		3,2,1,0,435,39,1,0,0,0,436,437,5,25,0,0,437,461,3,10,5,0,438,440,5,25,
		0,0,439,441,3,4,2,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,
		444,3,178,89,0,443,445,3,4,2,0,444,443,1,0,0,0,444,445,1,0,0,0,445,447,
		1,0,0,0,446,448,3,134,67,0,447,446,1,0,0,0,447,448,1,0,0,0,448,450,1,0,
		0,0,449,451,3,4,2,0,450,449,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,
		455,3,42,21,0,453,455,3,44,22,0,454,452,1,0,0,0,454,453,1,0,0,0,455,456,
		1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,3,2,1,
		0,459,461,1,0,0,0,460,436,1,0,0,0,460,438,1,0,0,0,461,41,1,0,0,0,462,475,
		3,190,95,0,463,475,3,90,45,0,464,475,3,92,46,0,465,475,3,194,97,0,466,
		475,5,77,0,0,467,475,3,78,39,0,468,475,3,80,40,0,469,475,3,86,43,0,470,
		475,3,88,44,0,471,475,3,76,38,0,472,475,5,30,0,0,473,475,5,60,0,0,474,
		462,1,0,0,0,474,463,1,0,0,0,474,464,1,0,0,0,474,465,1,0,0,0,474,466,1,
		0,0,0,474,467,1,0,0,0,474,468,1,0,0,0,474,469,1,0,0,0,474,470,1,0,0,0,
		474,471,1,0,0,0,474,472,1,0,0,0,474,473,1,0,0,0,475,43,1,0,0,0,476,487,
		3,188,94,0,477,487,3,192,96,0,478,487,3,196,98,0,479,487,3,198,99,0,480,
		487,3,200,100,0,481,487,3,202,101,0,482,487,3,204,102,0,483,487,3,206,
		103,0,484,487,3,82,41,0,485,487,5,55,0,0,486,476,1,0,0,0,486,477,1,0,0,
		0,486,478,1,0,0,0,486,479,1,0,0,0,486,480,1,0,0,0,486,481,1,0,0,0,486,
		482,1,0,0,0,486,483,1,0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,487,45,1,0,
		0,0,488,489,5,68,0,0,489,490,3,10,5,0,490,47,1,0,0,0,491,492,5,46,0,0,
		492,493,3,100,50,0,493,494,3,2,1,0,494,49,1,0,0,0,495,500,3,58,29,0,496,
		500,3,52,26,0,497,500,3,54,27,0,498,500,3,56,28,0,499,495,1,0,0,0,499,
		496,1,0,0,0,499,497,1,0,0,0,499,498,1,0,0,0,500,51,1,0,0,0,501,503,5,29,
		0,0,502,504,3,16,8,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,
		506,3,100,50,0,506,507,5,120,0,0,507,508,3,114,57,0,508,509,5,67,0,0,509,
		512,3,114,57,0,510,511,5,21,0,0,511,513,3,114,57,0,512,510,1,0,0,0,512,
		513,1,0,0,0,513,515,1,0,0,0,514,516,3,4,2,0,515,514,1,0,0,0,515,516,1,
		0,0,0,516,533,1,0,0,0,517,519,3,60,30,0,518,520,3,4,2,0,519,518,1,0,0,
		0,519,520,1,0,0,0,520,522,1,0,0,0,521,523,3,62,31,0,522,521,1,0,0,0,522,
		523,1,0,0,0,523,534,1,0,0,0,524,526,3,62,31,0,525,527,3,4,2,0,526,525,
		1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,530,3,60,30,0,529,528,1,0,
		0,0,529,530,1,0,0,0,530,534,1,0,0,0,531,534,3,60,30,0,532,534,3,62,31,
		0,533,517,1,0,0,0,533,524,1,0,0,0,533,531,1,0,0,0,533,532,1,0,0,0,533,
		534,1,0,0,0,534,538,1,0,0,0,535,537,3,8,4,0,536,535,1,0,0,0,537,540,1,
		0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,
		541,543,3,4,2,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,
		5,33,0,0,545,53,1,0,0,0,546,548,5,29,0,0,547,549,3,16,8,0,548,547,1,0,
		0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,552,3,60,30,0,551,553,3,62,31,
		0,552,551,1,0,0,0,552,553,1,0,0,0,553,557,1,0,0,0,554,556,3,8,4,0,555,
		554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,561,1,
		0,0,0,559,557,1,0,0,0,560,562,3,4,2,0,561,560,1,0,0,0,561,562,1,0,0,0,
		562,563,1,0,0,0,563,564,5,33,0,0,564,55,1,0,0,0,565,567,5,29,0,0,566,568,
		3,16,8,0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,571,3,62,
		31,0,570,572,3,60,30,0,571,570,1,0,0,0,571,572,1,0,0,0,572,576,1,0,0,0,
		573,575,3,8,4,0,574,573,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,
		1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,579,581,3,4,2,0,580,579,1,0,0,
		0,580,581,1,0,0,0,581,582,1,0,0,0,582,583,5,33,0,0,583,57,1,0,0,0,584,
		586,5,29,0,0,585,587,3,16,8,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,
		1,0,0,0,588,592,5,48,0,0,589,591,3,8,4,0,590,589,1,0,0,0,591,594,1,0,0,
		0,592,590,1,0,0,0,592,593,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,595,
		597,3,4,2,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,5,
		33,0,0,599,59,1,0,0,0,600,601,5,78,0,0,601,602,3,114,57,0,602,61,1,0,0,
		0,603,604,5,76,0,0,604,605,3,114,57,0,605,63,1,0,0,0,606,608,5,41,0,0,
		607,609,3,16,8,0,608,607,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,612,
		3,4,2,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,3,66,33,
		0,614,616,3,4,2,0,615,614,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,
		619,3,72,36,0,618,617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,622,
		3,4,2,0,621,620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,3,70,35,
		0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,628,3,4,2,0,627,
		626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,33,0,0,630,65,1,
		0,0,0,631,633,3,4,2,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,
		634,636,3,114,57,0,635,637,3,4,2,0,636,635,1,0,0,0,636,637,1,0,0,0,637,
		638,1,0,0,0,638,640,5,66,0,0,639,641,3,4,2,0,640,639,1,0,0,0,640,641,1,
		0,0,0,641,642,1,0,0,0,642,643,3,68,34,0,643,67,1,0,0,0,644,646,3,8,4,0,
		645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,69,
		1,0,0,0,649,647,1,0,0,0,650,652,5,32,0,0,651,653,3,4,2,0,652,651,1,0,0,
		0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,3,68,34,0,655,71,1,0,0,0,656,
		658,5,31,0,0,657,659,3,4,2,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,
		0,0,0,660,662,3,66,33,0,661,656,1,0,0,0,662,663,1,0,0,0,663,661,1,0,0,
		0,663,664,1,0,0,0,664,73,1,0,0,0,665,675,3,78,39,0,666,675,3,80,40,0,667,
		675,3,86,43,0,668,675,3,88,44,0,669,675,3,90,45,0,670,675,3,92,46,0,671,
		675,3,76,38,0,672,675,3,84,42,0,673,675,3,82,41,0,674,665,1,0,0,0,674,
		666,1,0,0,0,674,667,1,0,0,0,674,668,1,0,0,0,674,669,1,0,0,0,674,670,1,
		0,0,0,674,671,1,0,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,75,1,0,0,0,676,
		677,5,9,0,0,677,678,3,178,89,0,678,77,1,0,0,0,679,680,5,17,0,0,680,696,
		6,39,-1,0,681,682,5,14,0,0,682,696,6,39,-1,0,683,684,5,15,0,0,684,696,
		6,39,-1,0,685,686,5,16,0,0,686,696,6,39,-1,0,687,688,5,72,0,0,688,696,
		6,39,-1,0,689,690,5,69,0,0,690,696,6,39,-1,0,691,692,5,70,0,0,692,696,
		6,39,-1,0,693,694,5,71,0,0,694,696,6,39,-1,0,695,679,1,0,0,0,695,681,1,
		0,0,0,695,683,1,0,0,0,695,685,1,0,0,0,695,687,1,0,0,0,695,689,1,0,0,0,
		695,691,1,0,0,0,695,693,1,0,0,0,696,711,1,0,0,0,697,698,5,18,0,0,698,706,
		6,39,-1,0,699,700,5,73,0,0,700,706,6,39,-1,0,701,702,5,26,0,0,702,706,
		6,39,-1,0,703,704,5,74,0,0,704,706,6,39,-1,0,705,697,1,0,0,0,705,699,1,
		0,0,0,705,701,1,0,0,0,705,703,1,0,0,0,706,708,1,0,0,0,707,709,3,110,55,
		0,708,707,1,0,0,0,708,709,1,0,0,0,709,711,1,0,0,0,710,695,1,0,0,0,710,
		705,1,0,0,0,711,79,1,0,0,0,712,713,5,19,0,0,713,714,5,127,0,0,714,715,
		3,114,57,0,715,716,5,128,0,0,716,81,1,0,0,0,717,718,5,20,0,0,718,83,1,
		0,0,0,719,720,5,22,0,0,720,721,5,127,0,0,721,722,3,128,64,0,722,723,5,
		128,0,0,723,85,1,0,0,0,724,725,5,64,0,0,725,726,5,127,0,0,726,727,3,114,
		57,0,727,729,5,128,0,0,728,730,5,77,0,0,729,728,1,0,0,0,729,730,1,0,0,
		0,730,87,1,0,0,0,731,787,5,34,0,0,732,788,1,0,0,0,733,735,3,210,105,0,
		734,733,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,736,738,3,212,106,0,737,
		736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,741,5,77,0,0,740,739,1,
		0,0,0,740,741,1,0,0,0,741,788,1,0,0,0,742,744,3,210,105,0,743,742,1,0,
		0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,747,5,77,0,0,746,745,1,0,0,0,746,
		747,1,0,0,0,747,749,1,0,0,0,748,750,3,212,106,0,749,748,1,0,0,0,749,750,
		1,0,0,0,750,788,1,0,0,0,751,753,3,212,106,0,752,751,1,0,0,0,752,753,1,
		0,0,0,753,755,1,0,0,0,754,756,3,210,105,0,755,754,1,0,0,0,755,756,1,0,
		0,0,756,758,1,0,0,0,757,759,5,77,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,
		788,1,0,0,0,760,762,3,212,106,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,
		1,0,0,0,763,765,5,77,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,
		0,766,768,3,210,105,0,767,766,1,0,0,0,767,768,1,0,0,0,768,788,1,0,0,0,
		769,771,5,77,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,774,
		3,212,106,0,773,772,1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,777,3,
		210,105,0,776,775,1,0,0,0,776,777,1,0,0,0,777,788,1,0,0,0,778,780,5,77,
		0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,3,210,105,
		0,782,781,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,786,3,212,106,0,
		785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,732,1,0,0,0,787,734,
		1,0,0,0,787,743,1,0,0,0,787,752,1,0,0,0,787,761,1,0,0,0,787,770,1,0,0,
		0,787,779,1,0,0,0,788,89,1,0,0,0,789,790,5,45,0,0,790,91,1,0,0,0,791,792,
		5,57,0,0,792,93,1,0,0,0,793,817,5,17,0,0,794,817,5,14,0,0,795,817,5,15,
		0,0,796,817,5,16,0,0,797,817,5,72,0,0,798,817,5,69,0,0,799,817,5,70,0,
		0,800,817,5,71,0,0,801,817,5,18,0,0,802,817,5,73,0,0,803,817,5,26,0,0,
		804,817,5,74,0,0,805,817,5,64,0,0,806,817,5,19,0,0,807,817,5,45,0,0,808,
		810,5,34,0,0,809,811,3,210,105,0,810,809,1,0,0,0,810,811,1,0,0,0,811,813,
		1,0,0,0,812,814,3,212,106,0,813,812,1,0,0,0,813,814,1,0,0,0,814,817,1,
		0,0,0,815,817,5,57,0,0,816,793,1,0,0,0,816,794,1,0,0,0,816,795,1,0,0,0,
		816,796,1,0,0,0,816,797,1,0,0,0,816,798,1,0,0,0,816,799,1,0,0,0,816,800,
		1,0,0,0,816,801,1,0,0,0,816,802,1,0,0,0,816,803,1,0,0,0,816,804,1,0,0,
		0,816,805,1,0,0,0,816,806,1,0,0,0,816,807,1,0,0,0,816,808,1,0,0,0,816,
		815,1,0,0,0,817,95,1,0,0,0,818,819,3,100,50,0,819,820,3,98,49,0,820,821,
		3,114,57,0,821,822,3,2,1,0,822,97,1,0,0,0,823,824,7,2,0,0,824,99,1,0,0,
		0,825,826,6,50,-1,0,826,828,3,102,51,0,827,829,3,104,52,0,828,827,1,0,
		0,0,828,829,1,0,0,0,829,838,1,0,0,0,830,831,10,2,0,0,831,832,5,131,0,0,
		832,834,3,102,51,0,833,835,3,104,52,0,834,833,1,0,0,0,834,835,1,0,0,0,
		835,837,1,0,0,0,836,830,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,839,
		1,0,0,0,839,101,1,0,0,0,840,838,1,0,0,0,841,843,3,106,53,0,842,841,1,0,
		0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,3,178,89,0,845,103,1,0,0,0,
		846,848,3,110,55,0,847,846,1,0,0,0,848,849,1,0,0,0,849,847,1,0,0,0,849,
		850,1,0,0,0,850,105,1,0,0,0,851,853,3,108,54,0,852,851,1,0,0,0,853,854,
		1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,107,1,0,0,0,856,858,3,178,
		89,0,857,859,3,110,55,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,
		0,860,861,5,123,0,0,861,109,1,0,0,0,862,864,5,127,0,0,863,865,3,112,56,
		0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,867,5,128,0,0,867,
		111,1,0,0,0,868,873,3,114,57,0,869,870,5,126,0,0,870,872,3,114,57,0,871,
		869,1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,113,1,
		0,0,0,875,873,1,0,0,0,876,877,6,57,-1,0,877,881,3,116,58,0,878,881,3,130,
		65,0,879,881,3,132,66,0,880,876,1,0,0,0,880,878,1,0,0,0,880,879,1,0,0,
		0,881,994,1,0,0,0,882,884,10,11,0,0,883,885,3,4,2,0,884,883,1,0,0,0,884,
		885,1,0,0,0,885,886,1,0,0,0,886,888,3,150,75,0,887,889,3,4,2,0,888,887,
		1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,891,3,114,57,11,891,993,1,
		0,0,0,892,894,10,10,0,0,893,895,3,4,2,0,894,893,1,0,0,0,894,895,1,0,0,
		0,895,896,1,0,0,0,896,898,3,156,78,0,897,899,3,4,2,0,898,897,1,0,0,0,898,
		899,1,0,0,0,899,900,1,0,0,0,900,901,3,114,57,11,901,993,1,0,0,0,902,904,
		10,9,0,0,903,905,3,4,2,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,
		0,906,908,3,154,77,0,907,909,3,4,2,0,908,907,1,0,0,0,908,909,1,0,0,0,909,
		910,1,0,0,0,910,911,3,114,57,10,911,993,1,0,0,0,912,914,10,8,0,0,913,915,
		3,4,2,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,918,3,152,
		76,0,917,919,3,4,2,0,918,917,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,
		921,3,114,57,9,921,993,1,0,0,0,922,924,10,7,0,0,923,925,3,4,2,0,924,923,
		1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,928,3,148,74,0,927,929,3,4,
		2,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,931,3,114,57,8,
		931,993,1,0,0,0,932,934,10,6,0,0,933,935,3,4,2,0,934,933,1,0,0,0,934,935,
		1,0,0,0,935,936,1,0,0,0,936,938,3,164,82,0,937,939,3,4,2,0,938,937,1,0,
		0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,941,3,114,57,7,941,993,1,0,0,0,
		942,944,10,5,0,0,943,945,3,4,2,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,
		1,0,0,0,946,948,3,158,79,0,947,949,3,4,2,0,948,947,1,0,0,0,948,949,1,0,
		0,0,949,950,1,0,0,0,950,951,3,114,57,6,951,993,1,0,0,0,952,954,10,4,0,
		0,953,955,3,4,2,0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,
		958,3,160,80,0,957,959,3,4,2,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,
		1,0,0,0,960,961,3,114,57,5,961,993,1,0,0,0,962,964,10,3,0,0,963,965,3,
		4,2,0,964,963,1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,968,3,162,81,
		0,967,969,3,4,2,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,
		971,3,114,57,4,971,993,1,0,0,0,972,974,10,2,0,0,973,975,3,4,2,0,974,973,
		1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,978,3,144,72,0,977,979,3,4,
		2,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,981,3,114,57,3,
		981,993,1,0,0,0,982,984,10,1,0,0,983,985,3,4,2,0,984,983,1,0,0,0,984,985,
		1,0,0,0,985,986,1,0,0,0,986,988,3,146,73,0,987,989,3,4,2,0,988,987,1,0,
		0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,991,3,114,57,2,991,993,1,0,0,0,
		992,882,1,0,0,0,992,892,1,0,0,0,992,902,1,0,0,0,992,912,1,0,0,0,992,922,
		1,0,0,0,992,932,1,0,0,0,992,942,1,0,0,0,992,952,1,0,0,0,992,962,1,0,0,
		0,992,972,1,0,0,0,992,982,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,994,
		995,1,0,0,0,995,115,1,0,0,0,996,994,1,0,0,0,997,1001,3,120,60,0,998,1001,
		3,118,59,0,999,1001,3,100,50,0,1000,997,1,0,0,0,1000,998,1,0,0,0,1000,
		999,1,0,0,0,1001,117,1,0,0,0,1002,1003,5,98,0,0,1003,119,1,0,0,0,1004,
		1009,3,122,61,0,1005,1009,3,124,62,0,1006,1009,3,126,63,0,1007,1009,3,
		128,64,0,1008,1004,1,0,0,0,1008,1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,
		1,0,0,0,1009,121,1,0,0,0,1010,1011,5,4,0,0,1011,123,1,0,0,0,1012,1013,
		5,6,0,0,1013,125,1,0,0,0,1014,1015,5,5,0,0,1015,127,1,0,0,0,1016,1017,
		5,7,0,0,1017,129,1,0,0,0,1018,1019,5,127,0,0,1019,1020,3,114,57,0,1020,
		1021,5,128,0,0,1021,131,1,0,0,0,1022,1023,3,166,83,0,1023,1024,3,114,57,
		0,1024,133,1,0,0,0,1025,1026,5,127,0,0,1026,1027,3,138,69,0,1027,1028,
		5,128,0,0,1028,135,1,0,0,0,1029,1030,3,114,57,0,1030,1031,5,79,0,0,1031,
		1033,1,0,0,0,1032,1029,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,
		1037,3,114,57,0,1035,1037,5,105,0,0,1036,1032,1,0,0,0,1036,1035,1,0,0,
		0,1037,137,1,0,0,0,1038,1043,3,136,68,0,1039,1040,5,126,0,0,1040,1042,
		3,136,68,0,1041,1039,1,0,0,0,1042,1045,1,0,0,0,1043,1041,1,0,0,0,1043,
		1044,1,0,0,0,1044,139,1,0,0,0,1045,1043,1,0,0,0,1046,1047,3,114,57,0,1047,
		141,1,0,0,0,1048,1049,3,114,57,0,1049,143,1,0,0,0,1050,1051,5,81,0,0,1051,
		145,1,0,0,0,1052,1053,5,82,0,0,1053,147,1,0,0,0,1054,1055,5,80,0,0,1055,
		149,1,0,0,0,1056,1057,5,97,0,0,1057,151,1,0,0,0,1058,1059,7,3,0,0,1059,
		153,1,0,0,0,1060,1064,7,4,0,0,1061,1064,7,5,0,0,1062,1064,7,6,0,0,1063,
		1060,1,0,0,0,1063,1061,1,0,0,0,1063,1062,1,0,0,0,1064,155,1,0,0,0,1065,
		1066,7,7,0,0,1066,157,1,0,0,0,1067,1068,7,8,0,0,1068,159,1,0,0,0,1069,
		1070,7,9,0,0,1070,161,1,0,0,0,1071,1072,7,10,0,0,1072,163,1,0,0,0,1073,
		1074,7,11,0,0,1074,165,1,0,0,0,1075,1082,5,99,0,0,1076,1082,5,102,0,0,
		1077,1082,5,89,0,0,1078,1082,5,112,0,0,1079,1082,5,113,0,0,1080,1082,5,
		114,0,0,1081,1075,1,0,0,0,1081,1076,1,0,0,0,1081,1077,1,0,0,0,1081,1078,
		1,0,0,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,167,1,0,0,0,1083,1088,
		3,178,89,0,1084,1085,5,123,0,0,1085,1087,3,178,89,0,1086,1084,1,0,0,0,
		1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,169,1,0,0,0,
		1090,1088,1,0,0,0,1091,1092,5,127,0,0,1092,1097,3,178,89,0,1093,1094,5,
		126,0,0,1094,1096,3,178,89,0,1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,
		1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,
		1101,5,128,0,0,1101,171,1,0,0,0,1102,1103,5,127,0,0,1103,1108,5,7,0,0,
		1104,1105,5,126,0,0,1105,1107,5,7,0,0,1106,1104,1,0,0,0,1107,1110,1,0,
		0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,
		0,0,0,1111,1112,5,128,0,0,1112,173,1,0,0,0,1113,1115,3,4,2,0,1114,1113,
		1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1118,3,176,88,0,1117,
		1119,3,4,2,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1130,1,0,0,0,1120,
		1122,3,214,107,0,1121,1123,3,4,2,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,
		1123,1124,1,0,0,0,1124,1126,3,176,88,0,1125,1127,3,4,2,0,1126,1125,1,0,
		0,0,1126,1127,1,0,0,0,1127,1129,1,0,0,0,1128,1120,1,0,0,0,1129,1132,1,
		0,0,0,1130,1128,1,0,0,0,1130,1131,1,0,0,0,1131,1134,1,0,0,0,1132,1130,
		1,0,0,0,1133,1135,3,214,107,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,
		1137,1,0,0,0,1136,1138,3,4,2,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,
		175,1,0,0,0,1139,1140,3,178,89,0,1140,177,1,0,0,0,1141,1144,3,218,109,
		0,1142,1144,5,132,0,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,179,1,0,
		0,0,1145,1146,5,77,0,0,1146,181,1,0,0,0,1147,1154,5,8,0,0,1148,1154,5,
		54,0,0,1149,1154,3,202,101,0,1150,1154,5,12,0,0,1151,1154,3,184,92,0,1152,
		1154,3,186,93,0,1153,1147,1,0,0,0,1153,1148,1,0,0,0,1153,1149,1,0,0,0,
		1153,1150,1,0,0,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,183,1,0,0,0,
		1155,1156,5,11,0,0,1156,1157,5,127,0,0,1157,1158,3,114,57,0,1158,1159,
		5,128,0,0,1159,185,1,0,0,0,1160,1161,5,52,0,0,1161,1162,5,127,0,0,1162,
		1163,7,12,0,0,1163,1164,5,128,0,0,1164,187,1,0,0,0,1165,1166,5,24,0,0,
		1166,189,1,0,0,0,1167,1172,5,8,0,0,1168,1169,5,127,0,0,1169,1170,3,114,
		57,0,1170,1171,5,128,0,0,1171,1173,1,0,0,0,1172,1168,1,0,0,0,1172,1173,
		1,0,0,0,1173,191,1,0,0,0,1174,1175,5,50,0,0,1175,1176,5,127,0,0,1176,1177,
		3,114,57,0,1177,1178,5,128,0,0,1178,193,1,0,0,0,1179,1180,5,54,0,0,1180,
		195,1,0,0,0,1181,1182,5,36,0,0,1182,197,1,0,0,0,1183,1184,5,43,0,0,1184,
		199,1,0,0,0,1185,1186,5,63,0,0,1186,201,1,0,0,0,1187,1192,5,13,0,0,1188,
		1189,5,127,0,0,1189,1190,3,114,57,0,1190,1191,5,128,0,0,1191,1193,1,0,
		0,0,1192,1188,1,0,0,0,1192,1193,1,0,0,0,1193,203,1,0,0,0,1194,1195,5,62,
		0,0,1195,205,1,0,0,0,1196,1197,5,42,0,0,1197,1198,5,127,0,0,1198,1199,
		3,114,57,0,1199,1200,5,128,0,0,1200,207,1,0,0,0,1201,1202,5,75,0,0,1202,
		209,1,0,0,0,1203,1204,5,127,0,0,1204,1209,3,74,37,0,1205,1206,5,126,0,
		0,1206,1208,3,74,37,0,1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,
		0,0,0,1209,1210,1,0,0,0,1210,1212,1,0,0,0,1211,1209,1,0,0,0,1212,1213,
		5,128,0,0,1213,211,1,0,0,0,1214,1215,5,9,0,0,1215,1216,5,127,0,0,1216,
		1217,3,74,37,0,1217,1218,5,128,0,0,1218,213,1,0,0,0,1219,1220,5,126,0,
		0,1220,215,1,0,0,0,1221,1223,3,4,2,0,1222,1221,1,0,0,0,1222,1223,1,0,0,
		0,1223,1224,1,0,0,0,1224,1225,5,0,0,1,1225,217,1,0,0,0,1226,1227,7,13,
		0,0,1227,219,1,0,0,0,168,223,230,235,241,256,261,266,271,275,278,282,289,
		295,302,325,329,334,338,344,348,351,356,360,366,370,373,377,382,386,395,
		401,405,408,412,416,422,429,432,440,444,447,450,454,456,460,474,486,499,
		503,512,515,519,522,526,529,533,538,542,548,552,557,561,567,571,576,580,
		586,592,596,608,611,615,618,621,624,627,632,636,640,647,652,658,663,674,
		695,705,708,710,729,734,737,740,743,746,749,752,755,758,761,764,767,770,
		773,776,779,782,785,787,810,813,816,828,834,838,842,849,854,858,864,873,
		880,884,888,894,898,904,908,914,918,924,928,934,938,944,948,954,958,964,
		968,974,978,984,988,992,994,1000,1008,1032,1036,1043,1063,1081,1088,1097,
		1108,1114,1118,1122,1126,1130,1134,1137,1143,1153,1172,1192,1209,1222
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
