//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syscode.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SyscodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINECOM=2, HYPERCOMMENT=3, HEX_LITERAL=4, OCT_LITERAL=5, DEC_LITERAL=6, 
		BIN_LITERAL=7, INTEGER=8, ALIGNED=9, AS=10, BIN16=11, BIN32=12, BIN64=13, 
		BIN8=14, BIN=15, BIT=16, BY=17, CALL=18, CONST=19, DCL=20, DEC=21, DEF=22, 
		ELIF=23, ELSE=24, END=25, ENTRY=26, ENUM=27, EXTERNAL=28, FOR=29, FOREVER=30, 
		FUNC=31, GOTO=32, IF=33, IS=34, LABEL=35, LIT=36, PATH=37, POINTER=38, 
		PROC=39, RETURN=40, SCOPE=41, STATIC=42, STRING=43, STRUCT=44, THEN=45, 
		TO=46, TYPE=47, UBIN16=48, UBIN32=49, UBIN64=50, UBIN8=51, UBIN=52, UDEC=53, 
		UNALIGNED=54, UNIT=55, UNTIL=56, VAR=57, WHILE=58, COLON=59, CONC=60, 
		LOGAND=61, LOGOR=62, AND=63, OR=64, NAND=65, NOR=66, XOR=67, XNOR=68, 
		NOT=69, GT=70, LT=71, GTE=72, LTE=73, NGT=74, NLT=75, NE=76, POWER=77, 
		STR_LITERAL=78, PLUS=79, MINUS=80, TIMES=81, LCOM=82, DIVIDE=83, PCNT=84, 
		QUOTE=85, REDAND=86, REDOR=87, REDXOR=88, L_LOG_SHIFT=89, R_LOG_SHIFT=90, 
		R_ART_SHIFT=91, L_ROTATE=92, R_ROTATE=93, EQUALS=94, ASSIGN=95, COMPASSIGN=96, 
		DOT=97, AT=98, SEMICOLON=99, COMMA=100, LPAR=101, RPAR=102, RARROW=103, 
		IDENTIFIER=104, CUSTOM_LITERAL=105, NEWLINE=106, WS=107;
	public const int
		RULE_preamble = 0, RULE_statementSeparator = 1, RULE_emptyLines = 2, RULE_compilation = 3, 
		RULE_statement = 4, RULE_structBody = 5, RULE_structField = 6, RULE_label = 7, 
		RULE_labelSubscript = 8, RULE_goto = 9, RULE_gotoSubscript = 10, RULE_scope = 11, 
		RULE_blockScope = 12, RULE_procedure = 13, RULE_function = 14, RULE_enum = 15, 
		RULE_call = 16, RULE_return = 17, RULE_declare = 18, RULE_type = 19, RULE_literal = 20, 
		RULE_loop = 21, RULE_forLoop = 22, RULE_whileLoop = 23, RULE_untilLoop = 24, 
		RULE_whileCondition = 25, RULE_untilCondition = 26, RULE_if = 27, RULE_exprThenBlock = 28, 
		RULE_thenBlock = 29, RULE_elseBlock = 30, RULE_elifBlock = 31, RULE_assignment = 32, 
		RULE_comparer = 33, RULE_reference = 34, RULE_basicReference = 35, RULE_argumentsList = 36, 
		RULE_structureQualificationList = 37, RULE_structureQualification = 38, 
		RULE_arguments = 39, RULE_subscriptCommalist = 40, RULE_expression = 41, 
		RULE_primitiveExpression = 42, RULE_strLiteral = 43, RULE_numericLiteral = 44, 
		RULE_hexLiteral = 45, RULE_binLiteral = 46, RULE_octLiteral = 47, RULE_decLiteral = 48, 
		RULE_customLiteral = 49, RULE_parenthesizedExpression = 50, RULE_prefixExpression = 51, 
		RULE_dimensionSuffix = 52, RULE_boundPair = 53, RULE_boundPairCommalist = 54, 
		RULE_lowerBound = 55, RULE_upperBound = 56, RULE_logand = 57, RULE_logor = 58, 
		RULE_concatenate = 59, RULE_power = 60, RULE_shiftRotate = 61, RULE_addSub = 62, 
		RULE_mulDiv = 63, RULE_boolAnd = 64, RULE_boolXor = 65, RULE_boolOr = 66, 
		RULE_comparison = 67, RULE_prefixOperator = 68, RULE_qualifiedName = 69, 
		RULE_paramList = 70, RULE_constArrayList = 71, RULE_enumMembers = 72, 
		RULE_enumMember = 73, RULE_identifier = 74, RULE_typename = 75, RULE_varying = 76, 
		RULE_labelType = 77, RULE_entryType = 78, RULE_entryList = 79, RULE_structAttributes = 80, 
		RULE_memberAttributes = 81, RULE_constAttribute = 82, RULE_alignedAttribute = 83, 
		RULE_unalignedAttribute = 84, RULE_externalAttribute = 85, RULE_staticAttribute = 86, 
		RULE_unitType = 87, RULE_typeCode = 88, RULE_memberSeparator = 89, RULE_endOfFile = 90, 
		RULE_keyword = 91;
	public static readonly string[] ruleNames = {
		"preamble", "statementSeparator", "emptyLines", "compilation", "statement", 
		"structBody", "structField", "label", "labelSubscript", "goto", "gotoSubscript", 
		"scope", "blockScope", "procedure", "function", "enum", "call", "return", 
		"declare", "type", "literal", "loop", "forLoop", "whileLoop", "untilLoop", 
		"whileCondition", "untilCondition", "if", "exprThenBlock", "thenBlock", 
		"elseBlock", "elifBlock", "assignment", "comparer", "reference", "basicReference", 
		"argumentsList", "structureQualificationList", "structureQualification", 
		"arguments", "subscriptCommalist", "expression", "primitiveExpression", 
		"strLiteral", "numericLiteral", "hexLiteral", "binLiteral", "octLiteral", 
		"decLiteral", "customLiteral", "parenthesizedExpression", "prefixExpression", 
		"dimensionSuffix", "boundPair", "boundPairCommalist", "lowerBound", "upperBound", 
		"logand", "logor", "concatenate", "power", "shiftRotate", "addSub", "mulDiv", 
		"boolAnd", "boolXor", "boolOr", "comparison", "prefixOperator", "qualifiedName", 
		"paramList", "constArrayList", "enumMembers", "enumMember", "identifier", 
		"typename", "varying", "labelType", "entryType", "entryList", "structAttributes", 
		"memberAttributes", "constAttribute", "alignedAttribute", "unalignedAttribute", 
		"externalAttribute", "staticAttribute", "unitType", "typeCode", "memberSeparator", 
		"endOfFile", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'aligned'", "'as'", 
		"'bin16'", "'bin32'", "'bin64'", "'bin8'", "'bin'", "'bit'", "'by'", "'call'", 
		"'const'", "'dcl'", "'dec'", "'def'", "'elif'", "'else'", "'end'", "'entry'", 
		"'enum'", "'external'", "'for'", "'forever'", null, "'goto'", "'if'", 
		"'is'", "'label'", null, "'path'", null, null, "'return'", "'scope'", 
		"'static'", "'string'", "'struct'", "'then'", "'to'", "'type'", "'ubin16'", 
		"'ubin32'", "'ubin64'", "'ubin8'", "'ubin'", "'udec'", "'unaligned'", 
		"'unit'", "'until'", "'var'", "'while'", "':'", "'++'", "'&&'", "'||'", 
		"'&'", "'|'", "'~&'", "'~|'", null, null, "'~'", "'>'", "'<'", null, null, 
		"'~>'", "'~<'", null, null, null, "'+'", "'-'", "'*'", "'//'", null, "'%'", 
		"'\"'", "'<&'", "'<|'", "'<^'", "'<<'", "'>>'", "'>>>'", null, null, "'='", 
		"'<-'", null, "'.'", "'@'", "';'", "','", "'('", "')'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINECOM", "HYPERCOMMENT", "HEX_LITERAL", "OCT_LITERAL", 
		"DEC_LITERAL", "BIN_LITERAL", "INTEGER", "ALIGNED", "AS", "BIN16", "BIN32", 
		"BIN64", "BIN8", "BIN", "BIT", "BY", "CALL", "CONST", "DCL", "DEC", "DEF", 
		"ELIF", "ELSE", "END", "ENTRY", "ENUM", "EXTERNAL", "FOR", "FOREVER", 
		"FUNC", "GOTO", "IF", "IS", "LABEL", "LIT", "PATH", "POINTER", "PROC", 
		"RETURN", "SCOPE", "STATIC", "STRING", "STRUCT", "THEN", "TO", "TYPE", 
		"UBIN16", "UBIN32", "UBIN64", "UBIN8", "UBIN", "UDEC", "UNALIGNED", "UNIT", 
		"UNTIL", "VAR", "WHILE", "COLON", "CONC", "LOGAND", "LOGOR", "AND", "OR", 
		"NAND", "NOR", "XOR", "XNOR", "NOT", "GT", "LT", "GTE", "LTE", "NGT", 
		"NLT", "NE", "POWER", "STR_LITERAL", "PLUS", "MINUS", "TIMES", "LCOM", 
		"DIVIDE", "PCNT", "QUOTE", "REDAND", "REDOR", "REDXOR", "L_LOG_SHIFT", 
		"R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE", "R_ROTATE", "EQUALS", "ASSIGN", 
		"COMPASSIGN", "DOT", "AT", "SEMICOLON", "COMMA", "LPAR", "RPAR", "RARROW", 
		"IDENTIFIER", "CUSTOM_LITERAL", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syscode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyscodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyscodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyscodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SyscodeParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SyscodeParser.SEMICOLON, i);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 0, RULE_preamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEMICOLON || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SyscodeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SyscodeParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==SEMICOLON || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		public EmptyLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLines; } }
	}

	[RuleVersion(0)]
	public EmptyLinesContext emptyLines() {
		EmptyLinesContext _localctx = new EmptyLinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyLines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 191;
					Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndOfFileContext endOfFile() {
			return GetRuleContext<EndOfFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation; } }
	}

	[RuleVersion(0)]
	public CompilationContext compilation() {
		CompilationContext _localctx = new CompilationContext(Context, State);
		EnterRule(_localctx, 6, RULE_compilation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 196;
					statement();
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 202;
			endOfFile();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoContext @goto() {
			return GetRuleContext<GotoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON || _la==NEWLINE) {
				{
				State = 204;
				preamble();
				}
			}

			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 207;
				call();
				}
				break;
			case 2:
				{
				State = 208;
				@return();
				}
				break;
			case 3:
				{
				State = 209;
				label();
				}
				break;
			case 4:
				{
				State = 210;
				scope();
				}
				break;
			case 5:
				{
				State = 211;
				@enum();
				}
				break;
			case 6:
				{
				State = 212;
				@if();
				}
				break;
			case 7:
				{
				State = 213;
				declare();
				}
				break;
			case 8:
				{
				State = 214;
				type();
				}
				break;
			case 9:
				{
				State = 215;
				literal();
				}
				break;
			case 10:
				{
				State = 216;
				procedure();
				}
				break;
			case 11:
				{
				State = 217;
				function();
				}
				break;
			case 12:
				{
				State = 218;
				loop();
				}
				break;
			case 13:
				{
				State = 219;
				@goto();
				}
				break;
			case 14:
				{
				State = 220;
				assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAttributesContext structAttributes() {
			return GetRuleContext<StructAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext[] structBody() {
			return GetRuleContexts<StructBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody(int i) {
			return GetRuleContext<StructBodyContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_structBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_localctx.Spelling = identifier();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 224;
				dimensionSuffix();
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALIGNED || _la==UNALIGNED) {
				{
				State = 227;
				structAttributes();
				}
			}

			State = 230;
			statementSeparator();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 231;
				emptyLines();
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 236;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 234;
						structField();
						}
						break;
					case 2:
						{
						State = 235;
						structBody();
						}
						break;
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 238;
						emptyLines();
						}
					}

					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 246;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public TypenameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext memberAttributes() {
			return GetRuleContext<MemberAttributesContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx.Spelling = identifier();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 249;
				dimensionSuffix();
				}
			}

			State = 252;
			_localctx.Type = typename();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18018796824953344L) != 0)) {
				{
				State = 253;
				memberAttributes();
				}
			}

			State = 256;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SyscodeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelSubscriptContext labelSubscript() {
			return GetRuleContext<LabelSubscriptContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(AT);
			State = 259;
			_localctx.Spelling = identifier();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 260;
				labelSubscript();
				}
			}

			State = 263;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public LabelSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelSubscript; } }
	}

	[RuleVersion(0)]
	public LabelSubscriptContext labelSubscript() {
		LabelSubscriptContext _localctx = new LabelSubscriptContext(Context, State);
		EnterRule(_localctx, 16, RULE_labelSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(LPAR);
			State = 266;
			decLiteral();
			State = 267;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public GotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto; } }
	}

	[RuleVersion(0)]
	public GotoContext @goto() {
		GotoContext _localctx = new GotoContext(Context, State);
		EnterRule(_localctx, 18, RULE_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(GOTO);
			State = 270;
			reference(0);
			State = 271;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public GotoSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoSubscript; } }
	}

	[RuleVersion(0)]
	public GotoSubscriptContext gotoSubscript() {
		GotoSubscriptContext _localctx = new GotoSubscriptContext(Context, State);
		EnterRule(_localctx, 20, RULE_gotoSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(LPAR);
			State = 274;
			expression(0);
			State = 275;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeContext blockScope() {
			return GetRuleContext<BlockScopeContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 22, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			blockScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeContext : ParserRuleContext {
		public QualifiedNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScope; } }
	}

	[RuleVersion(0)]
	public BlockScopeContext blockScope() {
		BlockScopeContext _localctx = new BlockScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockScope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 279;
			Match(SCOPE);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 280;
				emptyLines();
				}
			}

			State = 283;
			_localctx.Name = qualifiedName();
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 284;
				emptyLines();
				}
				break;
			}
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 287;
					statement();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 293;
				emptyLines();
				}
			}

			State = 296;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 26, RULE_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(PROC);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 299;
				emptyLines();
				}
			}

			State = 302;
			_localctx.Spelling = identifier();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 303;
				paramList();
				}
			}

			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 306;
					statement();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 312;
				emptyLines();
				}
			}

			State = 315;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(FUNC);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 318;
				emptyLines();
				}
			}

			State = 321;
			_localctx.Spelling = identifier();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 322;
				paramList();
				}
			}

			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 325;
					statement();
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 331;
				emptyLines();
				}
			}

			State = 334;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IdentifierContext Name;
		public EnumMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 30, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(ENUM);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 337;
				emptyLines();
				}
			}

			State = 340;
			_localctx.Name = identifier();
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 341;
				emptyLines();
				}
			}

			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576460752303422976L) != 0) || _la==IDENTIFIER) {
				{
				State = 344;
				typename();
				}
			}

			State = 347;
			memberSeparator();
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 348;
				emptyLines();
				}
				break;
			}
			State = 351;
			_localctx.Members = enumMembers();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 352;
				emptyLines();
				}
			}

			State = 355;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(CALL);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 358;
				emptyLines();
				}
			}

			State = 361;
			reference(0);
			State = 362;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 34, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				{
				State = 364;
				Match(RETURN);
				State = 372;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 365;
						emptyLines();
						}
					}

					State = 368;
					Match(LPAR);
					State = 369;
					expression(0);
					State = 370;
					Match(RPAR);
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 374;
				Match(RETURN);
				State = 379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 376;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 375;
						emptyLines();
						}
					}

					State = 378;
					expression(0);
					}
					break;
				}
				}
				}
				break;
			}
			State = 383;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		public TypenameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext[] memberAttributes() {
			return GetRuleContexts<MemberAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAttributesContext memberAttributes(int i) {
			return GetRuleContext<MemberAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 36, RULE_declare);
		int _la;
		try {
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				Match(DCL);
				State = 386;
				structBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(DCL);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 388;
					emptyLines();
					}
				}

				State = 391;
				_localctx.Spelling = identifier();
				State = 393;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 392;
					emptyLines();
					}
					break;
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 395;
					_localctx.Bounds = dimensionSuffix();
					}
				}

				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 398;
					emptyLines();
					}
				}

				State = 401;
				_localctx.Type = typename();
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18018796824953344L) != 0)) {
					{
					{
					State = 402;
					memberAttributes();
					}
					}
					State = 407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 408;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(TYPE);
			State = 413;
			structBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(LIT);
			State = 416;
			customLiteral();
			State = 417;
			Match(AS);
			State = 418;
			decLiteral();
			State = 419;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 42, RULE_loop);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				forLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				whileLoop();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423;
				untilLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ReferenceContext For;
		public ExpressionContext From;
		public ExpressionContext To;
		public ExpressionContext By;
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 44, RULE_forLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(FOR);
			State = 427;
			_localctx.For = reference(0);
			State = 428;
			Match(EQUALS);
			State = 429;
			_localctx.From = expression(0);
			State = 430;
			Match(TO);
			State = 431;
			_localctx.To = expression(0);
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 432;
				Match(BY);
				State = 433;
				_localctx.By = expression(0);
				}
				break;
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 436;
				emptyLines();
				}
				break;
			}
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 439;
				_localctx.While = whileCondition();
				State = 441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 440;
					emptyLines();
					}
					break;
				}
				State = 444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 443;
					_localctx.Until = untilCondition();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 446;
				_localctx.Until = untilCondition();
				State = 448;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 447;
					emptyLines();
					}
					break;
				}
				State = 451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 450;
					_localctx.While = whileCondition();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 453;
				_localctx.While = whileCondition();
				}
				break;
			case 4:
				{
				State = 454;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 457;
					statement();
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 463;
				emptyLines();
				}
			}

			State = 466;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_localctx.While = whileCondition();
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 469;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 472;
					statement();
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 478;
				emptyLines();
				}
			}

			State = 481;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : ParserRuleContext {
		public UntilConditionContext Until;
		public WhileConditionContext While;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 48, RULE_untilLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_localctx.Until = untilCondition();
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 484;
				_localctx.While = whileCondition();
				}
				break;
			}
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 487;
					statement();
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 493;
				emptyLines();
				}
			}

			State = 496;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCondition; } }
	}

	[RuleVersion(0)]
	public WhileConditionContext whileCondition() {
		WhileConditionContext _localctx = new WhileConditionContext(Context, State);
		EnterRule(_localctx, 50, RULE_whileCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(WHILE);
			State = 499;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UntilConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilCondition; } }
	}

	[RuleVersion(0)]
	public UntilConditionContext untilCondition() {
		UntilConditionContext _localctx = new UntilConditionContext(Context, State);
		EnterRule(_localctx, 52, RULE_untilCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(UNTIL);
			State = 502;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock() {
			return GetRuleContext<ExprThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 54, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(IF);
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 505;
				emptyLines();
				}
				break;
			}
			State = 508;
			exprThenBlock();
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 509;
				emptyLines();
				}
				break;
			}
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIF) {
				{
				State = 512;
				elifBlock();
				}
			}

			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 515;
				emptyLines();
				}
				break;
			}
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 518;
				elseBlock();
				}
			}

			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 521;
				emptyLines();
				}
			}

			State = 524;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ExprThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprThenBlock; } }
	}

	[RuleVersion(0)]
	public ExprThenBlockContext exprThenBlock() {
		ExprThenBlockContext _localctx = new ExprThenBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_exprThenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 526;
				emptyLines();
				}
			}

			State = 529;
			expression(0);
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 530;
				emptyLines();
				}
			}

			State = 533;
			Match(THEN);
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 534;
				emptyLines();
				}
				break;
			}
			State = 537;
			thenBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_thenBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 539;
					statement();
					}
					} 
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 545;
			Match(ELSE);
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 546;
				emptyLines();
				}
				break;
			}
			State = 549;
			thenBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(SyscodeParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(SyscodeParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext[] exprThenBlock() {
			return GetRuleContexts<ExprThenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock(int i) {
			return GetRuleContext<ExprThenBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_elifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 551;
				Match(ELIF);
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 552;
					emptyLines();
					}
					break;
				}
				State = 555;
				exprThenBlock();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELIF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparerContext comparer() {
			return GetRuleContext<ComparerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 64, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			reference(0);
			State = 561;
			comparer();
			State = 562;
			expression(0);
			State = 563;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPASSIGN() { return GetToken(SyscodeParser.COMPASSIGN, 0); }
		public ComparerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparer; } }
	}

	[RuleVersion(0)]
	public ComparerContext comparer() {
		ComparerContext _localctx = new ComparerContext(Context, State);
		EnterRule(_localctx, 66, RULE_comparer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(SyscodeParser.RARROW, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 568;
			basicReference();
			State = 570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 569;
				argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 572;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 573;
					Match(RARROW);
					State = 574;
					basicReference();
					State = 576;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						State = 575;
						argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 70, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 583;
				structureQualificationList();
				}
				break;
			}
			State = 586;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 72, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 588;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 74, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 593;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SyscodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 76, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			_localctx.Spelling = identifier();
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 599;
				arguments();
				}
			}

			State = 602;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 78, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(LPAR);
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576460752303423472L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 107375103489L) != 0)) {
				{
				State = 605;
				subscriptCommalist();
				}
			}

			State = 608;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 80, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			expression(0);
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 611;
				Match(COMMA);
				State = 612;
				expression(0);
				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprBinaryContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulDivContext mulDiv() {
			return GetRuleContext<MulDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubContext addSub() {
			return GetRuleContext<AddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftRotateContext shiftRotate() {
			return GetRuleContext<ShiftRotateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenateContext concatenate() {
			return GetRuleContext<ConcatenateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorContext boolXor() {
			return GetRuleContext<BoolXorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrContext boolOr() {
			return GetRuleContext<BoolOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogandContext logand() {
			return GetRuleContext<LogandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogorContext logor() {
			return GetRuleContext<LogorContext>(0);
		}
		public ExprBinaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case SCOPE:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VAR:
			case WHILE:
			case STR_LITERAL:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 619;
				primitiveExpression();
				}
				break;
			case LPAR:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 620;
				parenthesizedExpression();
				}
				break;
			case NOT:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 621;
				prefixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 734;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 624;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 626;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 625;
							emptyLines();
							}
						}

						State = 628;
						power();
						State = 630;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 629;
							emptyLines();
							}
						}

						State = 632;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 634;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 636;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 635;
							emptyLines();
							}
						}

						State = 638;
						mulDiv();
						State = 640;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 639;
							emptyLines();
							}
						}

						State = 642;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 644;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 646;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 645;
							emptyLines();
							}
						}

						State = 648;
						addSub();
						State = 650;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 649;
							emptyLines();
							}
						}

						State = 652;
						((ExprBinaryContext)_localctx).Rite = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 654;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 656;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 655;
							emptyLines();
							}
						}

						State = 658;
						shiftRotate();
						State = 660;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 659;
							emptyLines();
							}
						}

						State = 662;
						((ExprBinaryContext)_localctx).Rite = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 664;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 666;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 665;
							emptyLines();
							}
						}

						State = 668;
						concatenate();
						State = 670;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 669;
							emptyLines();
							}
						}

						State = 672;
						((ExprBinaryContext)_localctx).Rite = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 674;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 676;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 675;
							emptyLines();
							}
						}

						State = 678;
						comparison();
						State = 680;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 679;
							emptyLines();
							}
						}

						State = 682;
						((ExprBinaryContext)_localctx).Rite = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 684;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 686;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 685;
							emptyLines();
							}
						}

						State = 688;
						boolAnd();
						State = 690;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 689;
							emptyLines();
							}
						}

						State = 692;
						((ExprBinaryContext)_localctx).Rite = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 694;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 696;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 695;
							emptyLines();
							}
						}

						State = 698;
						boolXor();
						State = 700;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 699;
							emptyLines();
							}
						}

						State = 702;
						((ExprBinaryContext)_localctx).Rite = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 704;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 706;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 705;
							emptyLines();
							}
						}

						State = 708;
						boolOr();
						State = 710;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 709;
							emptyLines();
							}
						}

						State = 712;
						((ExprBinaryContext)_localctx).Rite = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 714;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 716;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 715;
							emptyLines();
							}
						}

						State = 718;
						logand();
						State = 720;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 719;
							emptyLines();
							}
						}

						State = 722;
						((ExprBinaryContext)_localctx).Rite = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 726;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 725;
							emptyLines();
							}
						}

						State = 728;
						logor();
						State = 730;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 729;
							emptyLines();
							}
						}

						State = 732;
						((ExprBinaryContext)_localctx).Rite = expression(2);
						}
						break;
					}
					} 
				}
				State = 738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_primitiveExpression);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 739;
				numericLiteral();
				}
				break;
			case STR_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 740;
				strLiteral();
				}
				break;
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 741;
				customLiteral();
				}
				break;
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case SCOPE:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VAR:
			case WHILE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 742;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LITERAL() { return GetToken(SyscodeParser.STR_LITERAL, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(STR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinLiteralContext binLiteral() {
			return GetRuleContext<BinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctLiteralContext octLiteral() {
			return GetRuleContext<OctLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_numericLiteral);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747;
				binLiteral();
				}
				break;
			case OCT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748;
				octLiteral();
				}
				break;
			case HEX_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 749;
				hexLiteral();
				}
				break;
			case DEC_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 750;
				decLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(SyscodeParser.HEX_LITERAL, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 753;
			Match(HEX_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LITERAL() { return GetToken(SyscodeParser.BIN_LITERAL, 0); }
		public BinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binLiteral; } }
	}

	[RuleVersion(0)]
	public BinLiteralContext binLiteral() {
		BinLiteralContext _localctx = new BinLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_binLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 755;
			Match(BIN_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(SyscodeParser.OCT_LITERAL, 0); }
		public OctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octLiteral; } }
	}

	[RuleVersion(0)]
	public OctLiteralContext octLiteral() {
		OctLiteralContext _localctx = new OctLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_octLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 757;
			Match(OCT_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SyscodeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL() { return GetToken(SyscodeParser.DEC_LITERAL, 0); }
		public DecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLiteral; } }
	}

	[RuleVersion(0)]
	public DecLiteralContext decLiteral() {
		DecLiteralContext _localctx = new DecLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_decLiteral);
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 759;
				Match(INTEGER);
				}
				}
				break;
			case DEC_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 760;
				Match(DEC_LITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOM_LITERAL() { return GetToken(SyscodeParser.CUSTOM_LITERAL, 0); }
		public CustomLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customLiteral; } }
	}

	[RuleVersion(0)]
	public CustomLiteralContext customLiteral() {
		CustomLiteralContext _localctx = new CustomLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_customLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 763;
			Match(CUSTOM_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(LPAR);
			State = 766;
			expression(0);
			State = 767;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			prefixOperator();
			State = 770;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 104, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(LPAR);
			State = 773;
			boundPairCommalist();
			State = 774;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SyscodeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 106, RULE_boundPair);
		try {
			State = 783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case SCOPE:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VAR:
			case WHILE:
			case NOT:
			case STR_LITERAL:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
			case LPAR:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 776;
					lowerBound();
					State = 777;
					Match(COLON);
					}
					break;
				}
				State = 781;
				upperBound();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 108, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			boundPair();
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 786;
				Match(COMMA);
				State = 787;
				boundPair();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 110, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 112, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(SyscodeParser.LOGAND, 0); }
		public LogandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logand; } }
	}

	[RuleVersion(0)]
	public LogandContext logand() {
		LogandContext _localctx = new LogandContext(Context, State);
		EnterRule(_localctx, 114, RULE_logand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(LOGAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(SyscodeParser.LOGOR, 0); }
		public LogorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logor; } }
	}

	[RuleVersion(0)]
	public LogorContext logor() {
		LogorContext _localctx = new LogorContext(Context, State);
		EnterRule(_localctx, 116, RULE_logor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			Match(LOGOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(SyscodeParser.CONC, 0); }
		public ConcatenateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate; } }
	}

	[RuleVersion(0)]
	public ConcatenateContext concatenate() {
		ConcatenateContext _localctx = new ConcatenateContext(Context, State);
		EnterRule(_localctx, 118, RULE_concatenate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(CONC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SyscodeParser.POWER, 0); }
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 120, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRotateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE() { return GetToken(SyscodeParser.L_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE() { return GetToken(SyscodeParser.R_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(SyscodeParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(SyscodeParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(SyscodeParser.R_ART_SHIFT, 0); }
		public ShiftRotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRotate; } }
	}

	[RuleVersion(0)]
	public ShiftRotateContext shiftRotate() {
		ShiftRotateContext _localctx = new ShiftRotateContext(Context, State);
		EnterRule(_localctx, 122, RULE_shiftRotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		public AddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSub; } }
	}

	[RuleVersion(0)]
	public AddSubContext addSub() {
		AddSubContext _localctx = new AddSubContext(Context, State);
		EnterRule(_localctx, 124, RULE_addSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SyscodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(SyscodeParser.PCNT, 0); }
		public MulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDiv; } }
	}

	[RuleVersion(0)]
	public MulDivContext mulDiv() {
		MulDivContext _localctx = new MulDivContext(Context, State);
		EnterRule(_localctx, 126, RULE_mulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SyscodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(SyscodeParser.NAND, 0); }
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(Context, State);
		EnterRule(_localctx, 128, RULE_boolAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(SyscodeParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(SyscodeParser.XNOR, 0); }
		public BoolXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXor; } }
	}

	[RuleVersion(0)]
	public BoolXorContext boolXor() {
		BoolXorContext _localctx = new BoolXorContext(Context, State);
		EnterRule(_localctx, 130, RULE_boolXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR || _la==XNOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SyscodeParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(SyscodeParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public BoolOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOr; } }
	}

	[RuleVersion(0)]
	public BoolOrContext boolOr() {
		BoolOrContext _localctx = new BoolOrContext(Context, State);
		EnterRule(_localctx, 132, RULE_boolOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 37L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SyscodeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SyscodeParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SyscodeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SyscodeParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(SyscodeParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(SyscodeParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(SyscodeParser.NLT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 134, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16777343L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(SyscodeParser.REDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(SyscodeParser.REDOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR() { return GetToken(SyscodeParser.REDXOR, 0); }
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 136, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 920577L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SyscodeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SyscodeParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			identifier();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 822;
				Match(DOT);
				State = 823;
				identifier();
				}
				}
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 140, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(LPAR);
			State = 830;
			identifier();
			State = 835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 831;
				Match(COMMA);
				State = 832;
				identifier();
				}
				}
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 838;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SyscodeParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SyscodeParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ConstArrayListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayList; } }
	}

	[RuleVersion(0)]
	public ConstArrayListContext constArrayList() {
		ConstArrayListContext _localctx = new ConstArrayListContext(Context, State);
		EnterRule(_localctx, 142, RULE_constArrayList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 840;
			Match(LPAR);
			State = 841;
			Match(INTEGER);
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 842;
				Match(COMMA);
				State = 843;
				Match(INTEGER);
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 849;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 144, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 851;
				emptyLines();
				}
			}

			State = 854;
			enumMember();
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 855;
				emptyLines();
				}
				break;
			}
			State = 868;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 858;
					memberSeparator();
					State = 860;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 859;
						emptyLines();
						}
					}

					State = 862;
					enumMember();
					State = 864;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
					case 1:
						{
						State = 863;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 871;
				memberSeparator();
				}
			}

			State = 875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 874;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 146, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 877;
			_localctx.Name = identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SyscodeParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_identifier);
		try {
			State = 881;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
			case AS:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case IS:
			case LABEL:
			case LIT:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case SCOPE:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VAR:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 879;
				keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 880;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeCodeContext typeCode() {
			return GetRuleContext<TypeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaryingContext varying() {
			return GetRuleContext<VaryingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 150, RULE_typename);
		int _la;
		try {
			State = 891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 883;
				typeCode();
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 884;
					arguments();
					}
				}

				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 887;
					varying();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaryingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SyscodeParser.VAR, 0); }
		public VaryingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varying; } }
	}

	[RuleVersion(0)]
	public VaryingContext varying() {
		VaryingContext _localctx = new VaryingContext(Context, State);
		EnterRule(_localctx, 152, RULE_varying);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		public LabelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelType; } }
	}

	[RuleVersion(0)]
	public LabelTypeContext labelType() {
		LabelTypeContext _localctx = new LabelTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_labelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryListContext entryList() {
			return GetRuleContext<EntryListContext>(0);
		}
		public EntryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryType; } }
	}

	[RuleVersion(0)]
	public EntryTypeContext entryType() {
		EntryTypeContext _localctx = new EntryTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_entryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(ENTRY);
			{
			State = 898;
			entryList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public EntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryList; } }
	}

	[RuleVersion(0)]
	public EntryListContext entryList() {
		EntryListContext _localctx = new EntryListContext(Context, State);
		EnterRule(_localctx, 158, RULE_entryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(LPAR);
			State = 901;
			typename();
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 902;
				Match(COMMA);
				State = 903;
				typename();
				}
				}
				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 909;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		public StructAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAttributes; } }
	}

	[RuleVersion(0)]
	public StructAttributesContext structAttributes() {
		StructAttributesContext _localctx = new StructAttributesContext(Context, State);
		EnterRule(_localctx, 160, RULE_structAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			_la = TokenStream.LA(1);
			if ( !(_la==ALIGNED || _la==UNALIGNED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAttributesContext : ParserRuleContext {
		public MemberAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAttributes; } }
	 
		public MemberAttributesContext() { }
		public virtual void CopyFrom(MemberAttributesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribUnalignedContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnalignedAttributeContext unalignedAttribute() {
			return GetRuleContext<UnalignedAttributeContext>(0);
		}
		public AttribUnalignedContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribStaticContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticAttributeContext staticAttribute() {
			return GetRuleContext<StaticAttributeContext>(0);
		}
		public AttribStaticContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribConstContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstAttributeContext constAttribute() {
			return GetRuleContext<ConstAttributeContext>(0);
		}
		public AttribConstContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribAlignedContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlignedAttributeContext alignedAttribute() {
			return GetRuleContext<AlignedAttributeContext>(0);
		}
		public AttribAlignedContext(MemberAttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribExternalContext : MemberAttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalAttributeContext externalAttribute() {
			return GetRuleContext<ExternalAttributeContext>(0);
		}
		public AttribExternalContext(MemberAttributesContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public MemberAttributesContext memberAttributes() {
		MemberAttributesContext _localctx = new MemberAttributesContext(Context, State);
		EnterRule(_localctx, 162, RULE_memberAttributes);
		try {
			State = 918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				_localctx = new AttribConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 913;
				constAttribute();
				}
				break;
			case ALIGNED:
				_localctx = new AttribAlignedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 914;
				alignedAttribute();
				}
				break;
			case UNALIGNED:
				_localctx = new AttribUnalignedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 915;
				unalignedAttribute();
				}
				break;
			case EXTERNAL:
				_localctx = new AttribExternalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 916;
				externalAttribute();
				}
				break;
			case STATIC:
				_localctx = new AttribStaticContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 917;
				staticAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		public ConstAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAttribute; } }
	}

	[RuleVersion(0)]
	public ConstAttributeContext constAttribute() {
		ConstAttributeContext _localctx = new ConstAttributeContext(Context, State);
		EnterRule(_localctx, 164, RULE_constAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		public AlignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedAttribute; } }
	}

	[RuleVersion(0)]
	public AlignedAttributeContext alignedAttribute() {
		AlignedAttributeContext _localctx = new AlignedAttributeContext(Context, State);
		EnterRule(_localctx, 166, RULE_alignedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(ALIGNED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnalignedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		public UnalignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unalignedAttribute; } }
	}

	[RuleVersion(0)]
	public UnalignedAttributeContext unalignedAttribute() {
		UnalignedAttributeContext _localctx = new UnalignedAttributeContext(Context, State);
		EnterRule(_localctx, 168, RULE_unalignedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(UNALIGNED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		public ExternalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalAttribute; } }
	}

	[RuleVersion(0)]
	public ExternalAttributeContext externalAttribute() {
		ExternalAttributeContext _localctx = new ExternalAttributeContext(Context, State);
		EnterRule(_localctx, 170, RULE_externalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			Match(EXTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		public StaticAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAttribute; } }
	}

	[RuleVersion(0)]
	public StaticAttributeContext staticAttribute() {
		StaticAttributeContext _localctx = new StaticAttributeContext(Context, State);
		EnterRule(_localctx, 172, RULE_staticAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(STATIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(UNIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		public TypeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCode; } }
	}

	[RuleVersion(0)]
	public TypeCodeContext typeCode() {
		TypeCodeContext _localctx = new TypeCodeContext(Context, State);
		EnterRule(_localctx, 176, RULE_typeCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17742028932773888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SyscodeParser.COMMA, 0); }
		public MemberSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSeparator; } }
	}

	[RuleVersion(0)]
	public MemberSeparatorContext memberSeparator() {
		MemberSeparatorContext _localctx = new MemberSeparatorContext(Context, State);
		EnterRule(_localctx, 178, RULE_memberSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public EndOfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfFile; } }
	}

	[RuleVersion(0)]
	public EndOfFileContext endOfFile() {
		EndOfFileContext _localctx = new EndOfFileContext(Context, State);
		EnterRule(_localctx, 180, RULE_endOfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 936;
				emptyLines();
				}
			}

			State = 939;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(SyscodeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(SyscodeParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREVER() { return GetToken(SyscodeParser.FOREVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SyscodeParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SyscodeParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(SyscodeParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SyscodeParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 182, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 576460752303422976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 41: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,107,944,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		1,0,4,0,186,8,0,11,0,12,0,187,1,1,1,1,1,2,4,2,193,8,2,11,2,12,2,194,1,
		3,5,3,198,8,3,10,3,12,3,201,9,3,1,3,1,3,1,4,3,4,206,8,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,222,8,4,1,5,1,5,3,5,226,
		8,5,1,5,3,5,229,8,5,1,5,1,5,3,5,233,8,5,1,5,1,5,3,5,237,8,5,1,5,3,5,240,
		8,5,5,5,242,8,5,10,5,12,5,245,9,5,1,5,1,5,1,6,1,6,3,6,251,8,6,1,6,1,6,
		3,6,255,8,6,1,6,1,6,1,7,1,7,1,7,3,7,262,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,3,12,282,8,12,1,
		12,1,12,3,12,286,8,12,1,12,5,12,289,8,12,10,12,12,12,292,9,12,1,12,3,12,
		295,8,12,1,12,1,12,1,13,1,13,3,13,301,8,13,1,13,1,13,3,13,305,8,13,1,13,
		5,13,308,8,13,10,13,12,13,311,9,13,1,13,3,13,314,8,13,1,13,1,13,1,14,1,
		14,3,14,320,8,14,1,14,1,14,3,14,324,8,14,1,14,5,14,327,8,14,10,14,12,14,
		330,9,14,1,14,3,14,333,8,14,1,14,1,14,1,15,1,15,3,15,339,8,15,1,15,1,15,
		3,15,343,8,15,1,15,3,15,346,8,15,1,15,1,15,3,15,350,8,15,1,15,1,15,3,15,
		354,8,15,1,15,1,15,1,16,1,16,3,16,360,8,16,1,16,1,16,1,16,1,17,1,17,3,
		17,367,8,17,1,17,1,17,1,17,1,17,3,17,373,8,17,1,17,1,17,3,17,377,8,17,
		1,17,3,17,380,8,17,3,17,382,8,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,390,
		8,18,1,18,1,18,3,18,394,8,18,1,18,3,18,397,8,18,1,18,3,18,400,8,18,1,18,
		1,18,5,18,404,8,18,10,18,12,18,407,9,18,1,18,1,18,3,18,411,8,18,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,425,8,21,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,435,8,22,1,22,3,22,438,8,22,1,
		22,1,22,3,22,442,8,22,1,22,3,22,445,8,22,1,22,1,22,3,22,449,8,22,1,22,
		3,22,452,8,22,1,22,1,22,3,22,456,8,22,1,22,5,22,459,8,22,10,22,12,22,462,
		9,22,1,22,3,22,465,8,22,1,22,1,22,1,23,1,23,3,23,471,8,23,1,23,5,23,474,
		8,23,10,23,12,23,477,9,23,1,23,3,23,480,8,23,1,23,1,23,1,24,1,24,3,24,
		486,8,24,1,24,5,24,489,8,24,10,24,12,24,492,9,24,1,24,3,24,495,8,24,1,
		24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,3,27,507,8,27,1,27,1,27,
		3,27,511,8,27,1,27,3,27,514,8,27,1,27,3,27,517,8,27,1,27,3,27,520,8,27,
		1,27,3,27,523,8,27,1,27,1,27,1,28,3,28,528,8,28,1,28,1,28,3,28,532,8,28,
		1,28,1,28,3,28,536,8,28,1,28,1,28,1,29,5,29,541,8,29,10,29,12,29,544,9,
		29,1,30,1,30,3,30,548,8,30,1,30,1,30,1,31,1,31,3,31,554,8,31,1,31,4,31,
		557,8,31,11,31,12,31,558,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
		1,34,3,34,571,8,34,1,34,1,34,1,34,1,34,3,34,577,8,34,5,34,579,8,34,10,
		34,12,34,582,9,34,1,35,3,35,585,8,35,1,35,1,35,1,36,4,36,590,8,36,11,36,
		12,36,591,1,37,4,37,595,8,37,11,37,12,37,596,1,38,1,38,3,38,601,8,38,1,
		38,1,38,1,39,1,39,3,39,607,8,39,1,39,1,39,1,40,1,40,1,40,5,40,614,8,40,
		10,40,12,40,617,9,40,1,41,1,41,1,41,1,41,3,41,623,8,41,1,41,1,41,3,41,
		627,8,41,1,41,1,41,3,41,631,8,41,1,41,1,41,1,41,1,41,3,41,637,8,41,1,41,
		1,41,3,41,641,8,41,1,41,1,41,1,41,1,41,3,41,647,8,41,1,41,1,41,3,41,651,
		8,41,1,41,1,41,1,41,1,41,3,41,657,8,41,1,41,1,41,3,41,661,8,41,1,41,1,
		41,1,41,1,41,3,41,667,8,41,1,41,1,41,3,41,671,8,41,1,41,1,41,1,41,1,41,
		3,41,677,8,41,1,41,1,41,3,41,681,8,41,1,41,1,41,1,41,1,41,3,41,687,8,41,
		1,41,1,41,3,41,691,8,41,1,41,1,41,1,41,1,41,3,41,697,8,41,1,41,1,41,3,
		41,701,8,41,1,41,1,41,1,41,1,41,3,41,707,8,41,1,41,1,41,3,41,711,8,41,
		1,41,1,41,1,41,1,41,3,41,717,8,41,1,41,1,41,3,41,721,8,41,1,41,1,41,1,
		41,1,41,3,41,727,8,41,1,41,1,41,3,41,731,8,41,1,41,1,41,5,41,735,8,41,
		10,41,12,41,738,9,41,1,42,1,42,1,42,1,42,3,42,744,8,42,1,43,1,43,1,44,
		1,44,1,44,1,44,3,44,752,8,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,3,
		48,762,8,48,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,
		1,52,1,53,1,53,1,53,3,53,780,8,53,1,53,1,53,3,53,784,8,53,1,54,1,54,1,
		54,5,54,789,8,54,10,54,12,54,792,9,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
		58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,
		65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,5,69,825,8,69,10,
		69,12,69,828,9,69,1,70,1,70,1,70,1,70,5,70,834,8,70,10,70,12,70,837,9,
		70,1,70,1,70,1,71,1,71,1,71,1,71,5,71,845,8,71,10,71,12,71,848,9,71,1,
		71,1,71,1,72,3,72,853,8,72,1,72,1,72,3,72,857,8,72,1,72,1,72,3,72,861,
		8,72,1,72,1,72,3,72,865,8,72,5,72,867,8,72,10,72,12,72,870,9,72,1,72,3,
		72,873,8,72,1,72,3,72,876,8,72,1,73,1,73,1,74,1,74,3,74,882,8,74,1,75,
		1,75,3,75,886,8,75,1,75,3,75,889,8,75,1,75,3,75,892,8,75,1,76,1,76,1,77,
		1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,905,8,79,10,79,12,79,908,
		9,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,919,8,81,1,82,1,
		82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,
		89,1,90,3,90,938,8,90,1,90,1,90,1,91,1,91,1,91,0,2,68,82,92,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,0,14,2,0,99,99,106,106,2,1,99,99,106,106,2,0,94,94,96,
		96,1,0,89,93,1,0,79,80,2,0,81,81,83,84,2,0,63,63,65,65,1,0,67,68,3,0,64,
		64,66,66,69,69,2,0,70,76,94,94,3,0,69,69,79,80,86,88,2,0,9,9,54,54,7,0,
		11,16,21,21,26,26,35,35,38,38,43,43,48,53,1,0,9,58,1013,0,185,1,0,0,0,
		2,189,1,0,0,0,4,192,1,0,0,0,6,199,1,0,0,0,8,205,1,0,0,0,10,223,1,0,0,0,
		12,248,1,0,0,0,14,258,1,0,0,0,16,265,1,0,0,0,18,269,1,0,0,0,20,273,1,0,
		0,0,22,277,1,0,0,0,24,279,1,0,0,0,26,298,1,0,0,0,28,317,1,0,0,0,30,336,
		1,0,0,0,32,357,1,0,0,0,34,381,1,0,0,0,36,410,1,0,0,0,38,412,1,0,0,0,40,
		415,1,0,0,0,42,424,1,0,0,0,44,426,1,0,0,0,46,468,1,0,0,0,48,483,1,0,0,
		0,50,498,1,0,0,0,52,501,1,0,0,0,54,504,1,0,0,0,56,527,1,0,0,0,58,542,1,
		0,0,0,60,545,1,0,0,0,62,556,1,0,0,0,64,560,1,0,0,0,66,565,1,0,0,0,68,567,
		1,0,0,0,70,584,1,0,0,0,72,589,1,0,0,0,74,594,1,0,0,0,76,598,1,0,0,0,78,
		604,1,0,0,0,80,610,1,0,0,0,82,622,1,0,0,0,84,743,1,0,0,0,86,745,1,0,0,
		0,88,751,1,0,0,0,90,753,1,0,0,0,92,755,1,0,0,0,94,757,1,0,0,0,96,761,1,
		0,0,0,98,763,1,0,0,0,100,765,1,0,0,0,102,769,1,0,0,0,104,772,1,0,0,0,106,
		783,1,0,0,0,108,785,1,0,0,0,110,793,1,0,0,0,112,795,1,0,0,0,114,797,1,
		0,0,0,116,799,1,0,0,0,118,801,1,0,0,0,120,803,1,0,0,0,122,805,1,0,0,0,
		124,807,1,0,0,0,126,809,1,0,0,0,128,811,1,0,0,0,130,813,1,0,0,0,132,815,
		1,0,0,0,134,817,1,0,0,0,136,819,1,0,0,0,138,821,1,0,0,0,140,829,1,0,0,
		0,142,840,1,0,0,0,144,852,1,0,0,0,146,877,1,0,0,0,148,881,1,0,0,0,150,
		891,1,0,0,0,152,893,1,0,0,0,154,895,1,0,0,0,156,897,1,0,0,0,158,900,1,
		0,0,0,160,911,1,0,0,0,162,918,1,0,0,0,164,920,1,0,0,0,166,922,1,0,0,0,
		168,924,1,0,0,0,170,926,1,0,0,0,172,928,1,0,0,0,174,930,1,0,0,0,176,932,
		1,0,0,0,178,934,1,0,0,0,180,937,1,0,0,0,182,941,1,0,0,0,184,186,7,0,0,
		0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
		1,1,0,0,0,189,190,7,1,0,0,190,3,1,0,0,0,191,193,5,106,0,0,192,191,1,0,
		0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,5,1,0,0,0,196,
		198,3,8,4,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,
		0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,3,180,90,0,203,7,1,0,0,0,
		204,206,3,0,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,221,1,0,0,0,207,222,
		3,32,16,0,208,222,3,34,17,0,209,222,3,14,7,0,210,222,3,22,11,0,211,222,
		3,30,15,0,212,222,3,54,27,0,213,222,3,36,18,0,214,222,3,38,19,0,215,222,
		3,40,20,0,216,222,3,26,13,0,217,222,3,28,14,0,218,222,3,42,21,0,219,222,
		3,18,9,0,220,222,3,64,32,0,221,207,1,0,0,0,221,208,1,0,0,0,221,209,1,0,
		0,0,221,210,1,0,0,0,221,211,1,0,0,0,221,212,1,0,0,0,221,213,1,0,0,0,221,
		214,1,0,0,0,221,215,1,0,0,0,221,216,1,0,0,0,221,217,1,0,0,0,221,218,1,
		0,0,0,221,219,1,0,0,0,221,220,1,0,0,0,222,9,1,0,0,0,223,225,3,148,74,0,
		224,226,3,104,52,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,
		229,3,160,80,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,232,
		3,2,1,0,231,233,3,4,2,0,232,231,1,0,0,0,232,233,1,0,0,0,233,243,1,0,0,
		0,234,237,3,12,6,0,235,237,3,10,5,0,236,234,1,0,0,0,236,235,1,0,0,0,237,
		239,1,0,0,0,238,240,3,4,2,0,239,238,1,0,0,0,239,240,1,0,0,0,240,242,1,
		0,0,0,241,236,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,
		244,246,1,0,0,0,245,243,1,0,0,0,246,247,5,25,0,0,247,11,1,0,0,0,248,250,
		3,148,74,0,249,251,3,104,52,0,250,249,1,0,0,0,250,251,1,0,0,0,251,252,
		1,0,0,0,252,254,3,150,75,0,253,255,3,162,81,0,254,253,1,0,0,0,254,255,
		1,0,0,0,255,256,1,0,0,0,256,257,3,2,1,0,257,13,1,0,0,0,258,259,5,98,0,
		0,259,261,3,148,74,0,260,262,3,16,8,0,261,260,1,0,0,0,261,262,1,0,0,0,
		262,263,1,0,0,0,263,264,3,2,1,0,264,15,1,0,0,0,265,266,5,101,0,0,266,267,
		3,96,48,0,267,268,5,102,0,0,268,17,1,0,0,0,269,270,5,32,0,0,270,271,3,
		68,34,0,271,272,3,2,1,0,272,19,1,0,0,0,273,274,5,101,0,0,274,275,3,82,
		41,0,275,276,5,102,0,0,276,21,1,0,0,0,277,278,3,24,12,0,278,23,1,0,0,0,
		279,281,5,41,0,0,280,282,3,4,2,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,
		1,0,0,0,283,285,3,138,69,0,284,286,3,4,2,0,285,284,1,0,0,0,285,286,1,0,
		0,0,286,290,1,0,0,0,287,289,3,8,4,0,288,287,1,0,0,0,289,292,1,0,0,0,290,
		288,1,0,0,0,290,291,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,293,295,3,
		4,2,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,5,25,0,0,
		297,25,1,0,0,0,298,300,5,39,0,0,299,301,3,4,2,0,300,299,1,0,0,0,300,301,
		1,0,0,0,301,302,1,0,0,0,302,304,3,148,74,0,303,305,3,140,70,0,304,303,
		1,0,0,0,304,305,1,0,0,0,305,309,1,0,0,0,306,308,3,8,4,0,307,306,1,0,0,
		0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,0,0,311,
		309,1,0,0,0,312,314,3,4,2,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,1,
		0,0,0,315,316,5,25,0,0,316,27,1,0,0,0,317,319,5,31,0,0,318,320,3,4,2,0,
		319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,323,3,148,74,0,322,
		324,3,140,70,0,323,322,1,0,0,0,323,324,1,0,0,0,324,328,1,0,0,0,325,327,
		3,8,4,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,
		0,329,332,1,0,0,0,330,328,1,0,0,0,331,333,3,4,2,0,332,331,1,0,0,0,332,
		333,1,0,0,0,333,334,1,0,0,0,334,335,5,25,0,0,335,29,1,0,0,0,336,338,5,
		27,0,0,337,339,3,4,2,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,
		340,342,3,148,74,0,341,343,3,4,2,0,342,341,1,0,0,0,342,343,1,0,0,0,343,
		345,1,0,0,0,344,346,3,150,75,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,
		1,0,0,0,347,349,3,178,89,0,348,350,3,4,2,0,349,348,1,0,0,0,349,350,1,0,
		0,0,350,351,1,0,0,0,351,353,3,144,72,0,352,354,3,4,2,0,353,352,1,0,0,0,
		353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,25,0,0,356,31,1,0,0,0,357,359,
		5,18,0,0,358,360,3,4,2,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,
		0,361,362,3,68,34,0,362,363,3,2,1,0,363,33,1,0,0,0,364,372,5,40,0,0,365,
		367,3,4,2,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,5,
		101,0,0,369,370,3,82,41,0,370,371,5,102,0,0,371,373,1,0,0,0,372,366,1,
		0,0,0,372,373,1,0,0,0,373,382,1,0,0,0,374,379,5,40,0,0,375,377,3,4,2,0,
		376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,3,82,41,0,379,
		376,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,364,1,0,0,0,381,374,1,
		0,0,0,382,383,1,0,0,0,383,384,3,2,1,0,384,35,1,0,0,0,385,386,5,20,0,0,
		386,411,3,10,5,0,387,389,5,20,0,0,388,390,3,4,2,0,389,388,1,0,0,0,389,
		390,1,0,0,0,390,391,1,0,0,0,391,393,3,148,74,0,392,394,3,4,2,0,393,392,
		1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,397,3,104,52,0,396,395,1,0,
		0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,400,3,4,2,0,399,398,1,0,0,0,399,
		400,1,0,0,0,400,401,1,0,0,0,401,405,3,150,75,0,402,404,3,162,81,0,403,
		402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,
		0,0,0,407,405,1,0,0,0,408,409,3,2,1,0,409,411,1,0,0,0,410,385,1,0,0,0,
		410,387,1,0,0,0,411,37,1,0,0,0,412,413,5,47,0,0,413,414,3,10,5,0,414,39,
		1,0,0,0,415,416,5,36,0,0,416,417,3,98,49,0,417,418,5,10,0,0,418,419,3,
		96,48,0,419,420,3,2,1,0,420,41,1,0,0,0,421,425,3,44,22,0,422,425,3,46,
		23,0,423,425,3,48,24,0,424,421,1,0,0,0,424,422,1,0,0,0,424,423,1,0,0,0,
		425,43,1,0,0,0,426,427,5,29,0,0,427,428,3,68,34,0,428,429,5,94,0,0,429,
		430,3,82,41,0,430,431,5,46,0,0,431,434,3,82,41,0,432,433,5,17,0,0,433,
		435,3,82,41,0,434,432,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,438,
		3,4,2,0,437,436,1,0,0,0,437,438,1,0,0,0,438,455,1,0,0,0,439,441,3,50,25,
		0,440,442,3,4,2,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,
		445,3,52,26,0,444,443,1,0,0,0,444,445,1,0,0,0,445,456,1,0,0,0,446,448,
		3,52,26,0,447,449,3,4,2,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,
		0,0,450,452,3,50,25,0,451,450,1,0,0,0,451,452,1,0,0,0,452,456,1,0,0,0,
		453,456,3,50,25,0,454,456,3,52,26,0,455,439,1,0,0,0,455,446,1,0,0,0,455,
		453,1,0,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,460,1,0,0,0,457,459,3,
		8,4,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,
		461,464,1,0,0,0,462,460,1,0,0,0,463,465,3,4,2,0,464,463,1,0,0,0,464,465,
		1,0,0,0,465,466,1,0,0,0,466,467,5,25,0,0,467,45,1,0,0,0,468,470,3,50,25,
		0,469,471,3,52,26,0,470,469,1,0,0,0,470,471,1,0,0,0,471,475,1,0,0,0,472,
		474,3,8,4,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,
		0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,480,3,4,2,0,479,478,1,0,0,0,
		479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,25,0,0,482,47,1,0,0,0,483,485,
		3,52,26,0,484,486,3,50,25,0,485,484,1,0,0,0,485,486,1,0,0,0,486,490,1,
		0,0,0,487,489,3,8,4,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,
		490,491,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,493,495,3,4,2,0,494,493,
		1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,5,25,0,0,497,49,1,0,0,
		0,498,499,5,58,0,0,499,500,3,82,41,0,500,51,1,0,0,0,501,502,5,56,0,0,502,
		503,3,82,41,0,503,53,1,0,0,0,504,506,5,33,0,0,505,507,3,4,2,0,506,505,
		1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,3,56,28,0,509,511,3,4,
		2,0,510,509,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,514,3,62,31,0,
		513,512,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,517,3,4,2,0,516,515,
		1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,520,3,60,30,0,519,518,1,0,
		0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,523,3,4,2,0,522,521,1,0,0,0,522,
		523,1,0,0,0,523,524,1,0,0,0,524,525,5,25,0,0,525,55,1,0,0,0,526,528,3,
		4,2,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,531,3,82,41,
		0,530,532,3,4,2,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,
		535,5,45,0,0,534,536,3,4,2,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,
		0,0,0,537,538,3,58,29,0,538,57,1,0,0,0,539,541,3,8,4,0,540,539,1,0,0,0,
		541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,59,1,0,0,0,544,542,
		1,0,0,0,545,547,5,24,0,0,546,548,3,4,2,0,547,546,1,0,0,0,547,548,1,0,0,
		0,548,549,1,0,0,0,549,550,3,58,29,0,550,61,1,0,0,0,551,553,5,23,0,0,552,
		554,3,4,2,0,553,552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,557,3,
		56,28,0,556,551,1,0,0,0,557,558,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,
		0,559,63,1,0,0,0,560,561,3,68,34,0,561,562,3,66,33,0,562,563,3,82,41,0,
		563,564,3,2,1,0,564,65,1,0,0,0,565,566,7,2,0,0,566,67,1,0,0,0,567,568,
		6,34,-1,0,568,570,3,70,35,0,569,571,3,72,36,0,570,569,1,0,0,0,570,571,
		1,0,0,0,571,580,1,0,0,0,572,573,10,2,0,0,573,574,5,103,0,0,574,576,3,70,
		35,0,575,577,3,72,36,0,576,575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,
		578,572,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,69,
		1,0,0,0,582,580,1,0,0,0,583,585,3,74,37,0,584,583,1,0,0,0,584,585,1,0,
		0,0,585,586,1,0,0,0,586,587,3,148,74,0,587,71,1,0,0,0,588,590,3,78,39,
		0,589,588,1,0,0,0,590,591,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,
		73,1,0,0,0,593,595,3,76,38,0,594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,
		0,0,0,596,597,1,0,0,0,597,75,1,0,0,0,598,600,3,148,74,0,599,601,3,78,39,
		0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,97,0,0,603,
		77,1,0,0,0,604,606,5,101,0,0,605,607,3,80,40,0,606,605,1,0,0,0,606,607,
		1,0,0,0,607,608,1,0,0,0,608,609,5,102,0,0,609,79,1,0,0,0,610,615,3,82,
		41,0,611,612,5,100,0,0,612,614,3,82,41,0,613,611,1,0,0,0,614,617,1,0,0,
		0,615,613,1,0,0,0,615,616,1,0,0,0,616,81,1,0,0,0,617,615,1,0,0,0,618,619,
		6,41,-1,0,619,623,3,84,42,0,620,623,3,100,50,0,621,623,3,102,51,0,622,
		618,1,0,0,0,622,620,1,0,0,0,622,621,1,0,0,0,623,736,1,0,0,0,624,626,10,
		11,0,0,625,627,3,4,2,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,
		628,630,3,120,60,0,629,631,3,4,2,0,630,629,1,0,0,0,630,631,1,0,0,0,631,
		632,1,0,0,0,632,633,3,82,41,11,633,735,1,0,0,0,634,636,10,10,0,0,635,637,
		3,4,2,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,640,3,126,
		63,0,639,641,3,4,2,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,
		643,3,82,41,11,643,735,1,0,0,0,644,646,10,9,0,0,645,647,3,4,2,0,646,645,
		1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,3,124,62,0,649,651,3,4,
		2,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,653,3,82,41,10,
		653,735,1,0,0,0,654,656,10,8,0,0,655,657,3,4,2,0,656,655,1,0,0,0,656,657,
		1,0,0,0,657,658,1,0,0,0,658,660,3,122,61,0,659,661,3,4,2,0,660,659,1,0,
		0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,3,82,41,9,663,735,1,0,0,0,
		664,666,10,7,0,0,665,667,3,4,2,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,
		1,0,0,0,668,670,3,118,59,0,669,671,3,4,2,0,670,669,1,0,0,0,670,671,1,0,
		0,0,671,672,1,0,0,0,672,673,3,82,41,8,673,735,1,0,0,0,674,676,10,6,0,0,
		675,677,3,4,2,0,676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,680,
		3,134,67,0,679,681,3,4,2,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,
		0,0,682,683,3,82,41,7,683,735,1,0,0,0,684,686,10,5,0,0,685,687,3,4,2,0,
		686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,690,3,128,64,0,689,
		691,3,4,2,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,3,
		82,41,6,693,735,1,0,0,0,694,696,10,4,0,0,695,697,3,4,2,0,696,695,1,0,0,
		0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,3,130,65,0,699,701,3,4,2,0,700,
		699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,703,3,82,41,5,703,735,
		1,0,0,0,704,706,10,3,0,0,705,707,3,4,2,0,706,705,1,0,0,0,706,707,1,0,0,
		0,707,708,1,0,0,0,708,710,3,132,66,0,709,711,3,4,2,0,710,709,1,0,0,0,710,
		711,1,0,0,0,711,712,1,0,0,0,712,713,3,82,41,4,713,735,1,0,0,0,714,716,
		10,2,0,0,715,717,3,4,2,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,
		0,718,720,3,114,57,0,719,721,3,4,2,0,720,719,1,0,0,0,720,721,1,0,0,0,721,
		722,1,0,0,0,722,723,3,82,41,3,723,735,1,0,0,0,724,726,10,1,0,0,725,727,
		3,4,2,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,730,3,116,
		58,0,729,731,3,4,2,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,
		733,3,82,41,2,733,735,1,0,0,0,734,624,1,0,0,0,734,634,1,0,0,0,734,644,
		1,0,0,0,734,654,1,0,0,0,734,664,1,0,0,0,734,674,1,0,0,0,734,684,1,0,0,
		0,734,694,1,0,0,0,734,704,1,0,0,0,734,714,1,0,0,0,734,724,1,0,0,0,735,
		738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,83,1,0,0,0,738,736,1,0,
		0,0,739,744,3,88,44,0,740,744,3,86,43,0,741,744,3,98,49,0,742,744,3,68,
		34,0,743,739,1,0,0,0,743,740,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,
		85,1,0,0,0,745,746,5,78,0,0,746,87,1,0,0,0,747,752,3,92,46,0,748,752,3,
		94,47,0,749,752,3,90,45,0,750,752,3,96,48,0,751,747,1,0,0,0,751,748,1,
		0,0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,89,1,0,0,0,753,754,5,4,0,0,754,
		91,1,0,0,0,755,756,5,7,0,0,756,93,1,0,0,0,757,758,5,5,0,0,758,95,1,0,0,
		0,759,762,5,8,0,0,760,762,5,6,0,0,761,759,1,0,0,0,761,760,1,0,0,0,762,
		97,1,0,0,0,763,764,5,105,0,0,764,99,1,0,0,0,765,766,5,101,0,0,766,767,
		3,82,41,0,767,768,5,102,0,0,768,101,1,0,0,0,769,770,3,136,68,0,770,771,
		3,82,41,0,771,103,1,0,0,0,772,773,5,101,0,0,773,774,3,108,54,0,774,775,
		5,102,0,0,775,105,1,0,0,0,776,777,3,110,55,0,777,778,5,59,0,0,778,780,
		1,0,0,0,779,776,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,784,3,112,
		56,0,782,784,5,81,0,0,783,779,1,0,0,0,783,782,1,0,0,0,784,107,1,0,0,0,
		785,790,3,106,53,0,786,787,5,100,0,0,787,789,3,106,53,0,788,786,1,0,0,
		0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,109,1,0,0,0,792,
		790,1,0,0,0,793,794,3,82,41,0,794,111,1,0,0,0,795,796,3,82,41,0,796,113,
		1,0,0,0,797,798,5,61,0,0,798,115,1,0,0,0,799,800,5,62,0,0,800,117,1,0,
		0,0,801,802,5,60,0,0,802,119,1,0,0,0,803,804,5,77,0,0,804,121,1,0,0,0,
		805,806,7,3,0,0,806,123,1,0,0,0,807,808,7,4,0,0,808,125,1,0,0,0,809,810,
		7,5,0,0,810,127,1,0,0,0,811,812,7,6,0,0,812,129,1,0,0,0,813,814,7,7,0,
		0,814,131,1,0,0,0,815,816,7,8,0,0,816,133,1,0,0,0,817,818,7,9,0,0,818,
		135,1,0,0,0,819,820,7,10,0,0,820,137,1,0,0,0,821,826,3,148,74,0,822,823,
		5,97,0,0,823,825,3,148,74,0,824,822,1,0,0,0,825,828,1,0,0,0,826,824,1,
		0,0,0,826,827,1,0,0,0,827,139,1,0,0,0,828,826,1,0,0,0,829,830,5,101,0,
		0,830,835,3,148,74,0,831,832,5,100,0,0,832,834,3,148,74,0,833,831,1,0,
		0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,
		835,1,0,0,0,838,839,5,102,0,0,839,141,1,0,0,0,840,841,5,101,0,0,841,846,
		5,8,0,0,842,843,5,100,0,0,843,845,5,8,0,0,844,842,1,0,0,0,845,848,1,0,
		0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,846,1,0,0,0,849,
		850,5,102,0,0,850,143,1,0,0,0,851,853,3,4,2,0,852,851,1,0,0,0,852,853,
		1,0,0,0,853,854,1,0,0,0,854,856,3,146,73,0,855,857,3,4,2,0,856,855,1,0,
		0,0,856,857,1,0,0,0,857,868,1,0,0,0,858,860,3,178,89,0,859,861,3,4,2,0,
		860,859,1,0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,864,3,146,73,0,863,
		865,3,4,2,0,864,863,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,858,1,
		0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,872,1,0,0,0,
		870,868,1,0,0,0,871,873,3,178,89,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
		875,1,0,0,0,874,876,3,4,2,0,875,874,1,0,0,0,875,876,1,0,0,0,876,145,1,
		0,0,0,877,878,3,148,74,0,878,147,1,0,0,0,879,882,3,182,91,0,880,882,5,
		104,0,0,881,879,1,0,0,0,881,880,1,0,0,0,882,149,1,0,0,0,883,885,3,176,
		88,0,884,886,3,78,39,0,885,884,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,
		887,889,3,152,76,0,888,887,1,0,0,0,888,889,1,0,0,0,889,892,1,0,0,0,890,
		892,3,148,74,0,891,883,1,0,0,0,891,890,1,0,0,0,892,151,1,0,0,0,893,894,
		5,57,0,0,894,153,1,0,0,0,895,896,5,35,0,0,896,155,1,0,0,0,897,898,5,26,
		0,0,898,899,3,158,79,0,899,157,1,0,0,0,900,901,5,101,0,0,901,906,3,150,
		75,0,902,903,5,100,0,0,903,905,3,150,75,0,904,902,1,0,0,0,905,908,1,0,
		0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,906,1,0,0,0,909,
		910,5,102,0,0,910,159,1,0,0,0,911,912,7,11,0,0,912,161,1,0,0,0,913,919,
		3,164,82,0,914,919,3,166,83,0,915,919,3,168,84,0,916,919,3,170,85,0,917,
		919,3,172,86,0,918,913,1,0,0,0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,
		1,0,0,0,918,917,1,0,0,0,919,163,1,0,0,0,920,921,5,19,0,0,921,165,1,0,0,
		0,922,923,5,9,0,0,923,167,1,0,0,0,924,925,5,54,0,0,925,169,1,0,0,0,926,
		927,5,28,0,0,927,171,1,0,0,0,928,929,5,42,0,0,929,173,1,0,0,0,930,931,
		5,55,0,0,931,175,1,0,0,0,932,933,7,12,0,0,933,177,1,0,0,0,934,935,5,100,
		0,0,935,179,1,0,0,0,936,938,3,4,2,0,937,936,1,0,0,0,937,938,1,0,0,0,938,
		939,1,0,0,0,939,940,5,0,0,1,940,181,1,0,0,0,941,942,7,13,0,0,942,183,1,
		0,0,0,129,187,194,199,205,221,225,228,232,236,239,243,250,254,261,281,
		285,290,294,300,304,309,313,319,323,328,332,338,342,345,349,353,359,366,
		372,376,379,381,389,393,396,399,405,410,424,434,437,441,444,448,451,455,
		460,464,470,475,479,485,490,494,506,510,513,516,519,522,527,531,535,542,
		547,553,558,570,576,580,584,591,596,600,606,615,622,626,630,636,640,646,
		650,656,660,666,670,676,680,686,690,696,700,706,710,716,720,726,730,734,
		736,743,751,761,779,783,790,826,835,846,852,856,860,864,868,872,875,881,
		885,888,891,906,918,937
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
