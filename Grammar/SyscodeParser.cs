//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syscode.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SyscodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINECOM=2, HYPERCOMMENT=3, HEX_LITERAL=4, OCT_LITERAL=5, DEC_LITERAL=6, 
		BIN_LITERAL=7, INTEGER=8, ALIGNED=9, AS=10, BASED=11, BIN16=12, BIN32=13, 
		BIN64=14, BIN8=15, BIN=16, BIT=17, BY=18, CALL=19, CONST=20, DCL=21, DEC=22, 
		DEF=23, DO=24, ELIF=25, ELSE=26, END=27, ENTRY=28, ENUM=29, EXTERNAL=30, 
		FOR=31, FOREVER=32, FUNC=33, GOTO=34, IF=35, INIT=36, INTERNAL=37, IS=38, 
		LABEL=39, LIT=40, LOOP=41, MAIN=42, OPTIONS=43, PACKAGE=44, PATH=45, POINTER=46, 
		PROC=47, RETURN=48, SCOPE=49, STACK=50, STATIC=51, STRING=52, STRUCT=53, 
		THEN=54, TO=55, TYPE=56, UBIN16=57, UBIN32=58, UBIN64=59, UBIN8=60, UBIN=61, 
		UDEC=62, UNALIGNED=63, UNIT=64, UNTIL=65, VARIABLE=66, WHILE=67, COLON=68, 
		CONC=69, LOGAND=70, LOGOR=71, AND=72, OR=73, NAND=74, NOR=75, XOR=76, 
		XNOR=77, NOT=78, GT=79, LT=80, GTE=81, LTE=82, NGT=83, NLT=84, NE=85, 
		POWER=86, STR_LITERAL=87, PLUS=88, MINUS=89, TIMES=90, LCOM=91, DIVIDE=92, 
		PCNT=93, QUOTE=94, REDAND=95, REDOR=96, REDXOR=97, L_LOG_SHIFT=98, R_LOG_SHIFT=99, 
		R_ART_SHIFT=100, L_ROTATE=101, R_ROTATE=102, EQUALS=103, ASSIGN=104, COMPASSIGN=105, 
		DOT=106, AT=107, SEMICOLON=108, COMMA=109, LPAR=110, RPAR=111, RARROW=112, 
		IDENTIFIER=113, CUSTOM_LITERAL=114, NEWLINE=115, WS=116;
	public const int
		RULE_preamble = 0, RULE_statementSeparator = 1, RULE_emptyLines = 2, RULE_compilation = 3, 
		RULE_statement = 4, RULE_structBody = 5, RULE_structField = 6, RULE_label = 7, 
		RULE_labelSubscript = 8, RULE_goto = 9, RULE_gotoSubscript = 10, RULE_scope = 11, 
		RULE_blockScope = 12, RULE_procedure = 13, RULE_function = 14, RULE_procOptions = 15, 
		RULE_enum = 16, RULE_call = 17, RULE_return = 18, RULE_declare = 19, RULE_type = 20, 
		RULE_literal = 21, RULE_loop = 22, RULE_forLoop = 23, RULE_whileLoop = 24, 
		RULE_untilLoop = 25, RULE_loopLoop = 26, RULE_whileCondition = 27, RULE_untilCondition = 28, 
		RULE_if = 29, RULE_exprThenBlock = 30, RULE_thenBlock = 31, RULE_elseBlock = 32, 
		RULE_elifBlock = 33, RULE_typeSpecifier = 34, RULE_asType = 35, RULE_fixedType = 36, 
		RULE_bitType = 37, RULE_stringType = 38, RULE_entryType = 39, RULE_labelType = 40, 
		RULE_pointerType = 41, RULE_typeCode = 42, RULE_assignment = 43, RULE_comparer = 44, 
		RULE_reference = 45, RULE_basicReference = 46, RULE_argumentsList = 47, 
		RULE_structureQualificationList = 48, RULE_structureQualification = 49, 
		RULE_arguments = 50, RULE_subscriptCommalist = 51, RULE_expression = 52, 
		RULE_primitiveExpression = 53, RULE_strLiteral = 54, RULE_numericLiteral = 55, 
		RULE_hexLiteral = 56, RULE_binLiteral = 57, RULE_octLiteral = 58, RULE_decLiteral = 59, 
		RULE_customLiteral = 60, RULE_parenthesizedExpression = 61, RULE_prefixExpression = 62, 
		RULE_dimensionSuffix = 63, RULE_boundPair = 64, RULE_boundPairCommalist = 65, 
		RULE_lowerBound = 66, RULE_upperBound = 67, RULE_logand = 68, RULE_logor = 69, 
		RULE_concatenate = 70, RULE_power = 71, RULE_shiftRotate = 72, RULE_addSub = 73, 
		RULE_mulDiv = 74, RULE_boolAnd = 75, RULE_boolXor = 76, RULE_boolOr = 77, 
		RULE_comparison = 78, RULE_prefixOperator = 79, RULE_qualifiedName = 80, 
		RULE_paramList = 81, RULE_constArrayList = 82, RULE_enumMembers = 83, 
		RULE_enumMember = 84, RULE_identifier = 85, RULE_varying = 86, RULE_structAttributes = 87, 
		RULE_attributes = 88, RULE_constAttribute = 89, RULE_alignedAttribute = 90, 
		RULE_unalignedAttribute = 91, RULE_externalAttribute = 92, RULE_internalAttribute = 93, 
		RULE_staticAttribute = 94, RULE_basedAttribute = 95, RULE_stackAttribute = 96, 
		RULE_initAttribute = 97, RULE_unitType = 98, RULE_entryArgTypes = 99, 
		RULE_returnDescriptor = 100, RULE_memberSeparator = 101, RULE_endOfFile = 102, 
		RULE_keyword = 103;
	public static readonly string[] ruleNames = {
		"preamble", "statementSeparator", "emptyLines", "compilation", "statement", 
		"structBody", "structField", "label", "labelSubscript", "goto", "gotoSubscript", 
		"scope", "blockScope", "procedure", "function", "procOptions", "enum", 
		"call", "return", "declare", "type", "literal", "loop", "forLoop", "whileLoop", 
		"untilLoop", "loopLoop", "whileCondition", "untilCondition", "if", "exprThenBlock", 
		"thenBlock", "elseBlock", "elifBlock", "typeSpecifier", "asType", "fixedType", 
		"bitType", "stringType", "entryType", "labelType", "pointerType", "typeCode", 
		"assignment", "comparer", "reference", "basicReference", "argumentsList", 
		"structureQualificationList", "structureQualification", "arguments", "subscriptCommalist", 
		"expression", "primitiveExpression", "strLiteral", "numericLiteral", "hexLiteral", 
		"binLiteral", "octLiteral", "decLiteral", "customLiteral", "parenthesizedExpression", 
		"prefixExpression", "dimensionSuffix", "boundPair", "boundPairCommalist", 
		"lowerBound", "upperBound", "logand", "logor", "concatenate", "power", 
		"shiftRotate", "addSub", "mulDiv", "boolAnd", "boolXor", "boolOr", "comparison", 
		"prefixOperator", "qualifiedName", "paramList", "constArrayList", "enumMembers", 
		"enumMember", "identifier", "varying", "structAttributes", "attributes", 
		"constAttribute", "alignedAttribute", "unalignedAttribute", "externalAttribute", 
		"internalAttribute", "staticAttribute", "basedAttribute", "stackAttribute", 
		"initAttribute", "unitType", "entryArgTypes", "returnDescriptor", "memberSeparator", 
		"endOfFile", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'aligned'", "'as'", 
		"'based'", "'bin16'", "'bin32'", "'bin64'", "'bin8'", "'bin'", "'bit'", 
		"'by'", "'call'", "'const'", "'dcl'", "'dec'", "'def'", "'do'", "'elif'", 
		"'else'", "'end'", "'entry'", "'enum'", null, "'for'", "'forever'", null, 
		"'goto'", "'if'", "'init'", "'internal'", "'is'", "'label'", null, "'loop'", 
		"'main'", "'options'", "'package'", "'path'", null, null, "'return'", 
		"'scope'", "'stack'", "'static'", "'string'", null, "'then'", "'to'", 
		"'type'", "'ubin16'", "'ubin32'", "'ubin64'", "'ubin8'", "'ubin'", "'udec'", 
		"'unaligned'", "'unit'", "'until'", null, "'while'", "':'", "'++'", "'&&'", 
		"'||'", "'&'", "'|'", "'~&'", "'~|'", null, null, "'~'", "'>'", "'<'", 
		null, null, "'~>'", "'~<'", null, null, null, "'+'", "'-'", "'*'", "'//'", 
		null, "'%'", "'\"'", "'<&'", "'<|'", "'<^'", "'<<'", "'>>'", "'>>>'", 
		null, null, "'='", "'<-'", null, "'.'", "'@'", "';'", "','", "'('", "')'", 
		"'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINECOM", "HYPERCOMMENT", "HEX_LITERAL", "OCT_LITERAL", 
		"DEC_LITERAL", "BIN_LITERAL", "INTEGER", "ALIGNED", "AS", "BASED", "BIN16", 
		"BIN32", "BIN64", "BIN8", "BIN", "BIT", "BY", "CALL", "CONST", "DCL", 
		"DEC", "DEF", "DO", "ELIF", "ELSE", "END", "ENTRY", "ENUM", "EXTERNAL", 
		"FOR", "FOREVER", "FUNC", "GOTO", "IF", "INIT", "INTERNAL", "IS", "LABEL", 
		"LIT", "LOOP", "MAIN", "OPTIONS", "PACKAGE", "PATH", "POINTER", "PROC", 
		"RETURN", "SCOPE", "STACK", "STATIC", "STRING", "STRUCT", "THEN", "TO", 
		"TYPE", "UBIN16", "UBIN32", "UBIN64", "UBIN8", "UBIN", "UDEC", "UNALIGNED", 
		"UNIT", "UNTIL", "VARIABLE", "WHILE", "COLON", "CONC", "LOGAND", "LOGOR", 
		"AND", "OR", "NAND", "NOR", "XOR", "XNOR", "NOT", "GT", "LT", "GTE", "LTE", 
		"NGT", "NLT", "NE", "POWER", "STR_LITERAL", "PLUS", "MINUS", "TIMES", 
		"LCOM", "DIVIDE", "PCNT", "QUOTE", "REDAND", "REDOR", "REDXOR", "L_LOG_SHIFT", 
		"R_LOG_SHIFT", "R_ART_SHIFT", "L_ROTATE", "R_ROTATE", "EQUALS", "ASSIGN", 
		"COMPASSIGN", "DOT", "AT", "SEMICOLON", "COMMA", "LPAR", "RPAR", "RARROW", 
		"IDENTIFIER", "CUSTOM_LITERAL", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syscode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyscodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyscodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyscodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SyscodeParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SyscodeParser.SEMICOLON, i);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 0, RULE_preamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 208;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SEMICOLON || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SyscodeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SyscodeParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==SEMICOLON || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SyscodeParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SyscodeParser.NEWLINE, i);
		}
		public EmptyLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLines; } }
	}

	[RuleVersion(0)]
	public EmptyLinesContext emptyLines() {
		EmptyLinesContext _localctx = new EmptyLinesContext(Context, State);
		EnterRule(_localctx, 4, RULE_emptyLines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 215;
					Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndOfFileContext endOfFile() {
			return GetRuleContext<EndOfFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation; } }
	}

	[RuleVersion(0)]
	public CompilationContext compilation() {
		CompilationContext _localctx = new CompilationContext(Context, State);
		EnterRule(_localctx, 6, RULE_compilation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 220;
					statement();
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 226;
			endOfFile();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoContext @goto() {
			return GetRuleContext<GotoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON || _la==NEWLINE) {
				{
				State = 228;
				preamble();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 231;
				call();
				}
				break;
			case 2:
				{
				State = 232;
				@return();
				}
				break;
			case 3:
				{
				State = 233;
				label();
				}
				break;
			case 4:
				{
				State = 234;
				@enum();
				}
				break;
			case 5:
				{
				State = 235;
				@if();
				}
				break;
			case 6:
				{
				State = 236;
				declare();
				}
				break;
			case 7:
				{
				State = 237;
				type();
				}
				break;
			case 8:
				{
				State = 238;
				literal();
				}
				break;
			case 9:
				{
				State = 239;
				procedure();
				}
				break;
			case 10:
				{
				State = 240;
				function();
				}
				break;
			case 11:
				{
				State = 241;
				loop();
				}
				break;
			case 12:
				{
				State = 242;
				@goto();
				}
				break;
			case 13:
				{
				State = 243;
				assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public StructFieldContext Field;
		public StructBodyContext Struct;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAttributesContext structAttributes() {
			return GetRuleContext<StructAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext[] structBody() {
			return GetRuleContexts<StructBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody(int i) {
			return GetRuleContext<StructBodyContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_structBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(STRUCT);
			State = 247;
			_localctx.Spelling = identifier();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 248;
				dimensionSuffix();
				}
			}

			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036854773248L) != 0)) {
				{
				State = 251;
				structAttributes();
				}
			}

			State = 254;
			statementSeparator();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 255;
				emptyLines();
				}
			}

			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 258;
						_localctx.Field = structField();
						}
						break;
					case 2:
						{
						State = 259;
						_localctx.Struct = structBody();
						}
						break;
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 262;
						emptyLines();
						}
					}

					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 270;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public TypeSpecifierContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_localctx.Spelling = identifier();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 273;
				dimensionSuffix();
				}
			}

			State = 276;
			_localctx.Type = typeSpecifier();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9219994129901024768L) != 0)) {
				{
				{
				State = 277;
				attributes();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 283;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public LabelSubscriptContext Subscript;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SyscodeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelSubscriptContext labelSubscript() {
			return GetRuleContext<LabelSubscriptContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(AT);
			State = 286;
			_localctx.Spelling = identifier();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 287;
				_localctx.Subscript = labelSubscript();
				}
			}

			State = 290;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelSubscriptContext : ParserRuleContext {
		public DecLiteralContext Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public LabelSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelSubscript; } }
	}

	[RuleVersion(0)]
	public LabelSubscriptContext labelSubscript() {
		LabelSubscriptContext _localctx = new LabelSubscriptContext(Context, State);
		EnterRule(_localctx, 16, RULE_labelSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(LPAR);
			State = 293;
			_localctx.Literal = decLiteral();
			State = 294;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public GotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto; } }
	}

	[RuleVersion(0)]
	public GotoContext @goto() {
		GotoContext _localctx = new GotoContext(Context, State);
		EnterRule(_localctx, 18, RULE_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(GOTO);
			State = 297;
			reference(0);
			State = 298;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public GotoSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoSubscript; } }
	}

	[RuleVersion(0)]
	public GotoSubscriptContext gotoSubscript() {
		GotoSubscriptContext _localctx = new GotoSubscriptContext(Context, State);
		EnterRule(_localctx, 20, RULE_gotoSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(LPAR);
			State = 301;
			expression(0);
			State = 302;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockScopeContext blockScope() {
			return GetRuleContext<BlockScopeContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 22, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			blockScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockScopeContext : ParserRuleContext {
		public QualifiedNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SyscodeParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockScope; } }
	}

	[RuleVersion(0)]
	public BlockScopeContext blockScope() {
		BlockScopeContext _localctx = new BlockScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockScope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 306;
			Match(PACKAGE);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 307;
				emptyLines();
				}
			}

			State = 310;
			_localctx.Name = qualifiedName();
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 311;
				emptyLines();
				}
				break;
			}
			State = 317;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 314;
					statement();
					}
					} 
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 320;
				emptyLines();
				}
			}

			State = 323;
			Match(END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public ParamListContext Params;
		public ProcOptionsContext Options;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcOptionsContext procOptions() {
			return GetRuleContext<ProcOptionsContext>(0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 26, RULE_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(PROC);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 326;
				emptyLines();
				}
			}

			State = 329;
			_localctx.Spelling = identifier();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 330;
				_localctx.Params = paramList();
				}
			}

			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 333;
				_localctx.Options = procOptions();
				}
				break;
			}
			State = 339;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 336;
					statement();
					}
					} 
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 342;
				emptyLines();
				}
			}

			State = 345;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdentifierContext Spelling;
		public ParamListContext Params;
		public ProcOptionsContext Options;
		public ReturnDescriptorContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcOptionsContext procOptions() {
			return GetRuleContext<ProcOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(FUNC);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 348;
				emptyLines();
				}
			}

			State = 351;
			_localctx.Spelling = identifier();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 352;
				_localctx.Params = paramList();
				}
			}

			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 355;
				_localctx.Options = procOptions();
				}
			}

			State = 358;
			Match(AS);
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 359;
				_localctx.Type = returnDescriptor();
				}
				break;
			}
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 362;
					statement();
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 368;
				emptyLines();
				}
			}

			State = 371;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcOptionsContext : ParserRuleContext {
		public IToken Main;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(SyscodeParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(SyscodeParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(SyscodeParser.MAIN, i);
		}
		public ProcOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procOptions; } }
	}

	[RuleVersion(0)]
	public ProcOptionsContext procOptions() {
		ProcOptionsContext _localctx = new ProcOptionsContext(Context, State);
		EnterRule(_localctx, 30, RULE_procOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(OPTIONS);
			State = 374;
			Match(LPAR);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 375;
				_localctx.Main = Match(MAIN);
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAIN );
			State = 380;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IdentifierContext Name;
		public EnumMembersContext Members;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator() {
			return GetRuleContext<MemberSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 32, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(ENUM);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 383;
				emptyLines();
				}
			}

			State = 386;
			_localctx.Name = identifier();
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 387;
				emptyLines();
				}
			}

			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9083831367179170816L) != 0)) {
				{
				State = 390;
				typeSpecifier();
				}
			}

			State = 393;
			memberSeparator();
			State = 395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 394;
				emptyLines();
				}
				break;
			}
			State = 397;
			_localctx.Members = enumMembers();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 398;
				emptyLines();
				}
			}

			State = 401;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 34, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(CALL);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 404;
				emptyLines();
				}
			}

			State = 407;
			reference(0);
			State = 408;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 410;
			Match(RETURN);
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 411;
					emptyLines();
					}
				}

				State = 414;
				expression(0);
				}
				break;
			}
			}
			State = 417;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public StructBodyContext Struct;
		public IdentifierContext Spelling;
		public DimensionSuffixContext Bounds;
		public TypeSpecifierContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionSuffixContext dimensionSuffix() {
			return GetRuleContext<DimensionSuffixContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 38, RULE_declare);
		int _la;
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				Match(DCL);
				State = 420;
				_localctx.Struct = structBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				Match(DCL);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 422;
					emptyLines();
					}
				}

				State = 425;
				_localctx.Spelling = identifier();
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 426;
					emptyLines();
					}
					break;
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 429;
					_localctx.Bounds = dimensionSuffix();
					}
				}

				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 432;
					emptyLines();
					}
				}

				State = 435;
				_localctx.Type = typeSpecifier();
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9219994129901024768L) != 0)) {
					{
					{
					State = 436;
					attributes();
					}
					}
					State = 441;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 442;
				statementSeparator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public StructBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(TYPE);
			State = 447;
			_localctx.Body = structBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(LIT);
			State = 450;
			customLiteral();
			State = 451;
			Match(AS);
			State = 452;
			decLiteral();
			State = 453;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopLoopContext Loop;
		public ForLoopContext For;
		public WhileLoopContext While;
		public UntilLoopContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public LoopLoopContext loopLoop() {
			return GetRuleContext<LoopLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilLoopContext untilLoop() {
			return GetRuleContext<UntilLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 44, RULE_loop);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				_localctx.Loop = loopLoop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				_localctx.For = forLoop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 457;
				_localctx.While = whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 458;
				_localctx.Until = untilLoop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ReferenceContext For;
		public ExpressionContext From;
		public ExpressionContext To;
		public ExpressionContext By;
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 46, RULE_forLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(DO);
			State = 462;
			_localctx.For = reference(0);
			State = 463;
			Match(EQUALS);
			State = 464;
			_localctx.From = expression(0);
			State = 465;
			Match(TO);
			State = 466;
			_localctx.To = expression(0);
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 467;
				Match(BY);
				State = 468;
				_localctx.By = expression(0);
				}
				break;
			}
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 471;
				emptyLines();
				}
				break;
			}
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 474;
				_localctx.While = whileCondition();
				State = 476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 475;
					emptyLines();
					}
					break;
				}
				State = 479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 478;
					_localctx.Until = untilCondition();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 481;
				_localctx.Until = untilCondition();
				State = 483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 482;
					emptyLines();
					}
					break;
				}
				State = 486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 485;
					_localctx.While = whileCondition();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 488;
				_localctx.While = whileCondition();
				}
				break;
			case 4:
				{
				State = 489;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 495;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 492;
					statement();
					}
					} 
				}
				State = 497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 498;
				emptyLines();
				}
			}

			State = 501;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public WhileConditionContext While;
		public UntilConditionContext Until;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 48, RULE_whileLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(DO);
			State = 504;
			_localctx.While = whileCondition();
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 505;
				_localctx.Until = untilCondition();
				}
				break;
			}
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 508;
					statement();
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 514;
				emptyLines();
				}
			}

			State = 517;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilLoopContext : ParserRuleContext {
		public UntilConditionContext Until;
		public WhileConditionContext While;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilConditionContext untilCondition() {
			return GetRuleContext<UntilConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileConditionContext whileCondition() {
			return GetRuleContext<WhileConditionContext>(0);
		}
		public UntilLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilLoop; } }
	}

	[RuleVersion(0)]
	public UntilLoopContext untilLoop() {
		UntilLoopContext _localctx = new UntilLoopContext(Context, State);
		EnterRule(_localctx, 50, RULE_untilLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(DO);
			State = 520;
			_localctx.Until = untilCondition();
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 521;
				_localctx.While = whileCondition();
				}
				break;
			}
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 524;
					statement();
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 530;
				emptyLines();
				}
			}

			State = 533;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(SyscodeParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public LoopLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopLoop; } }
	}

	[RuleVersion(0)]
	public LoopLoopContext loopLoop() {
		LoopLoopContext _localctx = new LoopLoopContext(Context, State);
		EnterRule(_localctx, 52, RULE_loopLoop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(DO);
			State = 536;
			Match(LOOP);
			State = 540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 537;
					statement();
					}
					} 
				}
				State = 542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 543;
				emptyLines();
				}
			}

			State = 546;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCondition; } }
	}

	[RuleVersion(0)]
	public WhileConditionContext whileCondition() {
		WhileConditionContext _localctx = new WhileConditionContext(Context, State);
		EnterRule(_localctx, 54, RULE_whileCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(WHILE);
			State = 549;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilConditionContext : ParserRuleContext {
		public ExpressionContext Exp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UntilConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilCondition; } }
	}

	[RuleVersion(0)]
	public UntilConditionContext untilCondition() {
		UntilConditionContext _localctx = new UntilConditionContext(Context, State);
		EnterRule(_localctx, 56, RULE_untilCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(UNTIL);
			State = 552;
			_localctx.Exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock() {
			return GetRuleContext<ExprThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 58, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(IF);
			State = 556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 555;
				emptyLines();
				}
				break;
			}
			State = 558;
			exprThenBlock();
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 559;
				emptyLines();
				}
				break;
			}
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIF) {
				{
				State = 562;
				elifBlock();
				}
			}

			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 565;
				emptyLines();
				}
				break;
			}
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 568;
				elseBlock();
				}
			}

			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 571;
				emptyLines();
				}
			}

			State = 574;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ExprThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprThenBlock; } }
	}

	[RuleVersion(0)]
	public ExprThenBlockContext exprThenBlock() {
		ExprThenBlockContext _localctx = new ExprThenBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_exprThenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 576;
				emptyLines();
				}
			}

			State = 579;
			expression(0);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 580;
				emptyLines();
				}
			}

			State = 583;
			Match(THEN);
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 584;
				emptyLines();
				}
				break;
			}
			State = 587;
			thenBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_thenBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 589;
					statement();
					}
					} 
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 595;
			Match(ELSE);
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 596;
				emptyLines();
				}
				break;
			}
			State = 599;
			thenBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(SyscodeParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(SyscodeParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext[] exprThenBlock() {
			return GetRuleContexts<ExprThenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprThenBlockContext exprThenBlock(int i) {
			return GetRuleContext<ExprThenBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_elifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 601;
				Match(ELIF);
				State = 603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 602;
					emptyLines();
					}
					break;
				}
				State = 605;
				exprThenBlock();
				}
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELIF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public FixedTypeContext Fix;
		public BitTypeContext Bit;
		public StringTypeContext Str;
		public EntryTypeContext Ent;
		public LabelTypeContext Lab;
		public PointerTypeContext Ptr;
		public AsTypeContext As;
		[System.Diagnostics.DebuggerNonUserCode] public FixedTypeContext fixedType() {
			return GetRuleContext<FixedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitTypeContext bitType() {
			return GetRuleContext<BitTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryTypeContext entryType() {
			return GetRuleContext<EntryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelTypeContext labelType() {
			return GetRuleContext<LabelTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsTypeContext asType() {
			return GetRuleContext<AsTypeContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeSpecifier);
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case DEC:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				_localctx.Fix = fixedType();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				_localctx.Bit = bitType();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 612;
				_localctx.Str = stringType();
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 613;
				_localctx.Ent = entryType();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 614;
				_localctx.Lab = labelType();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 615;
				_localctx.Ptr = pointerType();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 616;
				_localctx.As = asType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeContext : ParserRuleContext {
		public IdentifierContext Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asType; } }
	}

	[RuleVersion(0)]
	public AsTypeContext asType() {
		AsTypeContext _localctx = new AsTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_asType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(AS);
			State = 620;
			_localctx.Typename = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedTypeContext : ParserRuleContext {
		public IToken Typename;
		public ArgumentsContext Args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FixedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedType; } }
	}

	[RuleVersion(0)]
	public FixedTypeContext fixedType() {
		FixedTypeContext _localctx = new FixedTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_fixedType);
		int _la;
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 622;
				_localctx.Typename = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2161727821137899520L) != 0)) ) {
					_localctx.Typename = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				break;
			case BIN:
			case DEC:
			case UBIN:
			case UDEC:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 623;
				_localctx.Typename = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529027645341696L) != 0)) ) {
					_localctx.Typename = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 624;
					_localctx.Args = arguments();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitTypeContext : ParserRuleContext {
		public IToken Typename;
		public DecLiteralContext Len;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public BitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitType; } }
	}

	[RuleVersion(0)]
	public BitTypeContext bitType() {
		BitTypeContext _localctx = new BitTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_bitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			_localctx.Typename = Match(BIT);
			State = 630;
			Match(LPAR);
			State = 631;
			_localctx.Len = decLiteral();
			State = 632;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		public IToken Typename;
		public DecLiteralContext Len;
		public IToken Var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			_localctx.Typename = Match(STRING);
			State = 635;
			Match(LPAR);
			State = 636;
			_localctx.Len = decLiteral();
			State = 637;
			Match(RPAR);
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE) {
				{
				State = 638;
				_localctx.Var = Match(VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryTypeContext : ParserRuleContext {
		public IToken Typename;
		public EntryArgTypesContext Args;
		public ReturnDescriptorContext Ret;
		public IToken Var;
		public IToken var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryArgTypesContext entryArgTypes() {
			return GetRuleContext<EntryArgTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public EntryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryType; } }
	}

	[RuleVersion(0)]
	public EntryTypeContext entryType() {
		EntryTypeContext _localctx = new EntryTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_entryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_localctx.Typename = Match(ENTRY);
			State = 697;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 643;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 646;
					_localctx.Ret = returnDescriptor();
					}
				}

				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 649;
					_localctx.Var = Match(VARIABLE);
					}
				}

				}
				break;
			case 3:
				{
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 652;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 655;
					_localctx.Var = Match(VARIABLE);
					}
				}

				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 658;
					_localctx.Ret = returnDescriptor();
					}
				}

				}
				break;
			case 4:
				{
				State = 662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 661;
					_localctx.Ret = returnDescriptor();
					}
				}

				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 664;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 667;
					_localctx.Var = Match(VARIABLE);
					}
				}

				}
				break;
			case 5:
				{
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 670;
					_localctx.Ret = returnDescriptor();
					}
				}

				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 673;
					_localctx.Var = Match(VARIABLE);
					}
				}

				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 676;
					_localctx.Args = entryArgTypes();
					}
				}

				}
				break;
			case 6:
				{
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 679;
					_localctx.Var = Match(VARIABLE);
					}
				}

				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 682;
					_localctx.Ret = returnDescriptor();
					}
				}

				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 685;
					_localctx.Args = entryArgTypes();
					}
				}

				}
				break;
			case 7:
				{
				State = 689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 688;
					_localctx.var = Match(VARIABLE);
					}
				}

				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 691;
					_localctx.Args = entryArgTypes();
					}
				}

				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 694;
					_localctx.Ret = returnDescriptor();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelTypeContext : ParserRuleContext {
		public IToken Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		public LabelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelType; } }
	}

	[RuleVersion(0)]
	public LabelTypeContext labelType() {
		LabelTypeContext _localctx = new LabelTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_labelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			_localctx.Typename = Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		public IToken Typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_localctx.Typename = Match(POINTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryArgTypesContext entryArgTypes() {
			return GetRuleContext<EntryArgTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnDescriptorContext returnDescriptor() {
			return GetRuleContext<ReturnDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		public TypeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCode; } }
	}

	[RuleVersion(0)]
	public TypeCodeContext typeCode() {
		TypeCodeContext _localctx = new TypeCodeContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeCode);
		int _la;
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703;
				Match(BIN8);
				}
				break;
			case BIN16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				Match(BIN16);
				}
				break;
			case BIN32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 705;
				Match(BIN32);
				}
				break;
			case BIN64:
				EnterOuterAlt(_localctx, 4);
				{
				State = 706;
				Match(BIN64);
				}
				break;
			case UBIN8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 707;
				Match(UBIN8);
				}
				break;
			case UBIN16:
				EnterOuterAlt(_localctx, 6);
				{
				State = 708;
				Match(UBIN16);
				}
				break;
			case UBIN32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 709;
				Match(UBIN32);
				}
				break;
			case UBIN64:
				EnterOuterAlt(_localctx, 8);
				{
				State = 710;
				Match(UBIN64);
				}
				break;
			case BIN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 711;
				Match(BIN);
				}
				break;
			case UBIN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 712;
				Match(UBIN);
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 11);
				{
				State = 713;
				Match(DEC);
				}
				break;
			case UDEC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 714;
				Match(UDEC);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 13);
				{
				State = 715;
				Match(STRING);
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 716;
				Match(BIT);
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 717;
				Match(LABEL);
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 16);
				{
				{
				State = 718;
				Match(ENTRY);
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 719;
					entryArgTypes();
					}
				}

				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 722;
					returnDescriptor();
					}
				}

				}
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 17);
				{
				State = 725;
				Match(POINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparerContext comparer() {
			return GetRuleContext<ComparerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			reference(0);
			State = 729;
			comparer();
			State = 730;
			expression(0);
			State = 731;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPASSIGN() { return GetToken(SyscodeParser.COMPASSIGN, 0); }
		public ComparerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparer; } }
	}

	[RuleVersion(0)]
	public ComparerContext comparer() {
		ComparerContext _localctx = new ComparerContext(Context, State);
		EnterRule(_localctx, 88, RULE_comparer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ReferenceContext Inner;
		public BasicReferenceContext Basic;
		public ArgumentsListContext ArgsList;
		[System.Diagnostics.DebuggerNonUserCode] public BasicReferenceContext basicReference() {
			return GetRuleContext<BasicReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(SyscodeParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 736;
			_localctx.Basic = basicReference();
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 737;
				_localctx.ArgsList = argumentsList();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 748;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					_localctx.Inner = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 740;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 741;
					Match(RARROW);
					State = 742;
					_localctx.Basic = basicReference();
					State = 744;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
					case 1:
						{
						State = 743;
						_localctx.ArgsList = argumentsList();
						}
						break;
					}
					}
					} 
				}
				State = 750;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasicReferenceContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationListContext structureQualificationList() {
			return GetRuleContext<StructureQualificationListContext>(0);
		}
		public BasicReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicReference; } }
	}

	[RuleVersion(0)]
	public BasicReferenceContext basicReference() {
		BasicReferenceContext _localctx = new BasicReferenceContext(Context, State);
		EnterRule(_localctx, 92, RULE_basicReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 751;
				structureQualificationList();
				}
				break;
			}
			State = 754;
			_localctx.Spelling = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		public ArgumentsContext _arguments;
		public IList<ArgumentsContext> _ArgsSet = new List<ArgumentsContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 94, RULE_argumentsList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 756;
					_localctx._arguments = arguments();
					_localctx._ArgsSet.Add(_localctx._arguments);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 759;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext[] structureQualification() {
			return GetRuleContexts<StructureQualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureQualificationContext structureQualification(int i) {
			return GetRuleContext<StructureQualificationContext>(i);
		}
		public StructureQualificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualificationList; } }
	}

	[RuleVersion(0)]
	public StructureQualificationListContext structureQualificationList() {
		StructureQualificationListContext _localctx = new StructureQualificationListContext(Context, State);
		EnterRule(_localctx, 96, RULE_structureQualificationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 761;
					structureQualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 764;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureQualificationContext : ParserRuleContext {
		public IdentifierContext Spelling;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SyscodeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public StructureQualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureQualification; } }
	}

	[RuleVersion(0)]
	public StructureQualificationContext structureQualification() {
		StructureQualificationContext _localctx = new StructureQualificationContext(Context, State);
		EnterRule(_localctx, 98, RULE_structureQualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			_localctx.Spelling = identifier();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 767;
				arguments();
				}
			}

			State = 770;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptCommalistContext subscriptCommalist() {
			return GetRuleContext<SubscriptCommalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 100, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(LPAR);
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -562949953421328L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1759233695563791L) != 0)) {
				{
				State = 773;
				subscriptCommalist();
				}
			}

			State = 776;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptCommalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public SubscriptCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptCommalist; } }
	}

	[RuleVersion(0)]
	public SubscriptCommalistContext subscriptCommalist() {
		SubscriptCommalistContext _localctx = new SubscriptCommalistContext(Context, State);
		EnterRule(_localctx, 102, RULE_subscriptCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			expression(0);
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 779;
				Match(COMMA);
				State = 780;
				expression(0);
				}
				}
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenthesizedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public ExprParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprBinaryContext : ExpressionContext {
		public ExpressionContext Left;
		public ExpressionContext Rite;
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulDivContext mulDiv() {
			return GetRuleContext<MulDivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddSubContext addSub() {
			return GetRuleContext<AddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftRotateContext shiftRotate() {
			return GetRuleContext<ShiftRotateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenateContext concatenate() {
			return GetRuleContext<ConcatenateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolAndContext boolAnd() {
			return GetRuleContext<BoolAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolXorContext boolXor() {
			return GetRuleContext<BoolXorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOrContext boolOr() {
			return GetRuleContext<BoolOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogandContext logand() {
			return GetRuleContext<LogandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogorContext logor() {
			return GetRuleContext<LogorContext>(0);
		}
		public ExprBinaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrefixedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		public ExprPrefixedContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ExprPrimitiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public ExprPrimitiveContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LIT:
			case LOOP:
			case MAIN:
			case OPTIONS:
			case PACKAGE:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case STR_LITERAL:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				{
				_localctx = new ExprPrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 787;
				primitiveExpression();
				}
				break;
			case LPAR:
				{
				_localctx = new ExprParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 788;
				parenthesizedExpression();
				}
				break;
			case NOT:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
				{
				_localctx = new ExprPrefixedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 789;
				prefixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 904;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 902;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 792;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 794;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 793;
							emptyLines();
							}
						}

						State = 796;
						power();
						State = 798;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 797;
							emptyLines();
							}
						}

						State = 800;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 802;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 804;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 803;
							emptyLines();
							}
						}

						State = 806;
						mulDiv();
						State = 808;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 807;
							emptyLines();
							}
						}

						State = 810;
						((ExprBinaryContext)_localctx).Rite = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 812;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 814;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 813;
							emptyLines();
							}
						}

						State = 816;
						addSub();
						State = 818;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 817;
							emptyLines();
							}
						}

						State = 820;
						((ExprBinaryContext)_localctx).Rite = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 822;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 824;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 823;
							emptyLines();
							}
						}

						State = 826;
						shiftRotate();
						State = 828;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 827;
							emptyLines();
							}
						}

						State = 830;
						((ExprBinaryContext)_localctx).Rite = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 832;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 834;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 833;
							emptyLines();
							}
						}

						State = 836;
						concatenate();
						State = 838;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 837;
							emptyLines();
							}
						}

						State = 840;
						((ExprBinaryContext)_localctx).Rite = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 842;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 844;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 843;
							emptyLines();
							}
						}

						State = 846;
						comparison();
						State = 848;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 847;
							emptyLines();
							}
						}

						State = 850;
						((ExprBinaryContext)_localctx).Rite = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 852;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 854;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 853;
							emptyLines();
							}
						}

						State = 856;
						boolAnd();
						State = 858;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 857;
							emptyLines();
							}
						}

						State = 860;
						((ExprBinaryContext)_localctx).Rite = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 862;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 863;
							emptyLines();
							}
						}

						State = 866;
						boolXor();
						State = 868;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 867;
							emptyLines();
							}
						}

						State = 870;
						((ExprBinaryContext)_localctx).Rite = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 872;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 874;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 873;
							emptyLines();
							}
						}

						State = 876;
						boolOr();
						State = 878;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 877;
							emptyLines();
							}
						}

						State = 880;
						((ExprBinaryContext)_localctx).Rite = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 882;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 884;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 883;
							emptyLines();
							}
						}

						State = 886;
						logand();
						State = 888;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 887;
							emptyLines();
							}
						}

						State = 890;
						((ExprBinaryContext)_localctx).Rite = expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExprBinaryContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 892;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 894;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 893;
							emptyLines();
							}
						}

						State = 896;
						logor();
						State = 898;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NEWLINE) {
							{
							State = 897;
							emptyLines();
							}
						}

						State = 900;
						((ExprBinaryContext)_localctx).Rite = expression(2);
						}
						break;
					}
					} 
				}
				State = 906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrLiteralContext strLiteral() {
			return GetRuleContext<StrLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomLiteralContext customLiteral() {
			return GetRuleContext<CustomLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_primitiveExpression);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 907;
				numericLiteral();
				}
				break;
			case STR_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 908;
				strLiteral();
				}
				break;
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 909;
				customLiteral();
				}
				break;
			case ALIGNED:
			case AS:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LIT:
			case LOOP:
			case MAIN:
			case OPTIONS:
			case PACKAGE:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 910;
				reference(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LITERAL() { return GetToken(SyscodeParser.STR_LITERAL, 0); }
		public StrLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strLiteral; } }
	}

	[RuleVersion(0)]
	public StrLiteralContext strLiteral() {
		StrLiteralContext _localctx = new StrLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_strLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(STR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinLiteralContext binLiteral() {
			return GetRuleContext<BinLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctLiteralContext octLiteral() {
			return GetRuleContext<OctLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLiteralContext decLiteral() {
			return GetRuleContext<DecLiteralContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_numericLiteral);
		try {
			State = 919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIN_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 915;
				binLiteral();
				}
				break;
			case OCT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 916;
				octLiteral();
				}
				break;
			case HEX_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 917;
				hexLiteral();
				}
				break;
			case DEC_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 918;
				decLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(SyscodeParser.HEX_LITERAL, 0); }
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_hexLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 921;
			Match(HEX_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LITERAL() { return GetToken(SyscodeParser.BIN_LITERAL, 0); }
		public BinLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binLiteral; } }
	}

	[RuleVersion(0)]
	public BinLiteralContext binLiteral() {
		BinLiteralContext _localctx = new BinLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_binLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 923;
			Match(BIN_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(SyscodeParser.OCT_LITERAL, 0); }
		public OctLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octLiteral; } }
	}

	[RuleVersion(0)]
	public OctLiteralContext octLiteral() {
		OctLiteralContext _localctx = new OctLiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_octLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 925;
			Match(OCT_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SyscodeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_LITERAL() { return GetToken(SyscodeParser.DEC_LITERAL, 0); }
		public DecLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLiteral; } }
	}

	[RuleVersion(0)]
	public DecLiteralContext decLiteral() {
		DecLiteralContext _localctx = new DecLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_decLiteral);
		try {
			State = 929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 927;
				Match(INTEGER);
				}
				}
				break;
			case DEC_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 928;
				Match(DEC_LITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUSTOM_LITERAL() { return GetToken(SyscodeParser.CUSTOM_LITERAL, 0); }
		public CustomLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customLiteral; } }
	}

	[RuleVersion(0)]
	public CustomLiteralContext customLiteral() {
		CustomLiteralContext _localctx = new CustomLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_customLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 931;
			Match(CUSTOM_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			Match(LPAR);
			State = 934;
			expression(0);
			State = 935;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_prefixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			prefixOperator();
			State = 938;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionSuffixContext : ParserRuleContext {
		public BoundPairCommalistContext Pair;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairCommalistContext boundPairCommalist() {
			return GetRuleContext<BoundPairCommalistContext>(0);
		}
		public DimensionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionSuffix; } }
	}

	[RuleVersion(0)]
	public DimensionSuffixContext dimensionSuffix() {
		DimensionSuffixContext _localctx = new DimensionSuffixContext(Context, State);
		EnterRule(_localctx, 126, RULE_dimensionSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(LPAR);
			State = 941;
			_localctx.Pair = boundPairCommalist();
			State = 942;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairContext : ParserRuleContext {
		public ExpressionContext Lower;
		public ExpressionContext Upper;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SyscodeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		public BoundPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPair; } }
	}

	[RuleVersion(0)]
	public BoundPairContext boundPair() {
		BoundPairContext _localctx = new BoundPairContext(Context, State);
		EnterRule(_localctx, 128, RULE_boundPair);
		try {
			State = 951;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEX_LITERAL:
			case OCT_LITERAL:
			case DEC_LITERAL:
			case BIN_LITERAL:
			case INTEGER:
			case ALIGNED:
			case AS:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LIT:
			case LOOP:
			case MAIN:
			case OPTIONS:
			case PACKAGE:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
			case NOT:
			case STR_LITERAL:
			case PLUS:
			case MINUS:
			case REDAND:
			case REDOR:
			case REDXOR:
			case LPAR:
			case IDENTIFIER:
			case CUSTOM_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 947;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
				case 1:
					{
					State = 944;
					_localctx.Lower = expression(0);
					State = 945;
					Match(COLON);
					}
					break;
				}
				State = 949;
				_localctx.Upper = expression(0);
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950;
				Match(TIMES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundPairCommalistContext : ParserRuleContext {
		public BoundPairContext _boundPair;
		public IList<BoundPairContext> _BoundPairs = new List<BoundPairContext>();
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext[] boundPair() {
			return GetRuleContexts<BoundPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoundPairContext boundPair(int i) {
			return GetRuleContext<BoundPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public BoundPairCommalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundPairCommalist; } }
	}

	[RuleVersion(0)]
	public BoundPairCommalistContext boundPairCommalist() {
		BoundPairCommalistContext _localctx = new BoundPairCommalistContext(Context, State);
		EnterRule(_localctx, 130, RULE_boundPairCommalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			_localctx._boundPair = boundPair();
			_localctx._BoundPairs.Add(_localctx._boundPair);
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 954;
				Match(COMMA);
				State = 955;
				_localctx._boundPair = boundPair();
				_localctx._BoundPairs.Add(_localctx._boundPair);
				}
				}
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 132, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 134, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGAND() { return GetToken(SyscodeParser.LOGAND, 0); }
		public LogandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logand; } }
	}

	[RuleVersion(0)]
	public LogandContext logand() {
		LogandContext _localctx = new LogandContext(Context, State);
		EnterRule(_localctx, 136, RULE_logand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			Match(LOGAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOR() { return GetToken(SyscodeParser.LOGOR, 0); }
		public LogorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logor; } }
	}

	[RuleVersion(0)]
	public LogorContext logor() {
		LogorContext _localctx = new LogorContext(Context, State);
		EnterRule(_localctx, 138, RULE_logor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			Match(LOGOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(SyscodeParser.CONC, 0); }
		public ConcatenateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate; } }
	}

	[RuleVersion(0)]
	public ConcatenateContext concatenate() {
		ConcatenateContext _localctx = new ConcatenateContext(Context, State);
		EnterRule(_localctx, 140, RULE_concatenate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			Match(CONC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SyscodeParser.POWER, 0); }
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 142, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRotateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ROTATE() { return GetToken(SyscodeParser.L_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ROTATE() { return GetToken(SyscodeParser.R_ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_LOG_SHIFT() { return GetToken(SyscodeParser.L_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_LOG_SHIFT() { return GetToken(SyscodeParser.R_LOG_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ART_SHIFT() { return GetToken(SyscodeParser.R_ART_SHIFT, 0); }
		public ShiftRotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRotate; } }
	}

	[RuleVersion(0)]
	public ShiftRotateContext shiftRotate() {
		ShiftRotateContext _localctx = new ShiftRotateContext(Context, State);
		EnterRule(_localctx, 144, RULE_shiftRotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		public AddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSub; } }
	}

	[RuleVersion(0)]
	public AddSubContext addSub() {
		AddSubContext _localctx = new AddSubContext(Context, State);
		EnterRule(_localctx, 146, RULE_addSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulDivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(SyscodeParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SyscodeParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCNT() { return GetToken(SyscodeParser.PCNT, 0); }
		public MulDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulDiv; } }
	}

	[RuleVersion(0)]
	public MulDivContext mulDiv() {
		MulDivContext _localctx = new MulDivContext(Context, State);
		EnterRule(_localctx, 148, RULE_mulDiv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SyscodeParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(SyscodeParser.NAND, 0); }
		public BoolAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolAnd; } }
	}

	[RuleVersion(0)]
	public BoolAndContext boolAnd() {
		BoolAndContext _localctx = new BoolAndContext(Context, State);
		EnterRule(_localctx, 150, RULE_boolAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==NAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolXorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(SyscodeParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(SyscodeParser.XNOR, 0); }
		public BoolXorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolXor; } }
	}

	[RuleVersion(0)]
	public BoolXorContext boolXor() {
		BoolXorContext _localctx = new BoolXorContext(Context, State);
		EnterRule(_localctx, 152, RULE_boolXor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			_la = TokenStream.LA(1);
			if ( !(_la==XOR || _la==XNOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SyscodeParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(SyscodeParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		public BoolOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOr; } }
	}

	[RuleVersion(0)]
	public BoolOrContext boolOr() {
		BoolOrContext _localctx = new BoolOrContext(Context, State);
		EnterRule(_localctx, 154, RULE_boolOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 37L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SyscodeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SyscodeParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SyscodeParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SyscodeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SyscodeParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NGT() { return GetToken(SyscodeParser.NGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(SyscodeParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NLT() { return GetToken(SyscodeParser.NLT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 156, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 16777343L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SyscodeParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SyscodeParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SyscodeParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDAND() { return GetToken(SyscodeParser.REDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOR() { return GetToken(SyscodeParser.REDOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDXOR() { return GetToken(SyscodeParser.REDXOR, 0); }
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 158, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 920577L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SyscodeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SyscodeParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			identifier();
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 990;
				Match(DOT);
				State = 991;
				identifier();
				}
				}
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Params = new List<IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 162, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			Match(LPAR);
			State = 998;
			_localctx._identifier = identifier();
			_localctx._Params.Add(_localctx._identifier);
			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 999;
				Match(COMMA);
				State = 1000;
				_localctx._identifier = identifier();
				_localctx._Params.Add(_localctx._identifier);
				}
				}
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1006;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SyscodeParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SyscodeParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public ConstArrayListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayList; } }
	}

	[RuleVersion(0)]
	public ConstArrayListContext constArrayList() {
		ConstArrayListContext _localctx = new ConstArrayListContext(Context, State);
		EnterRule(_localctx, 164, RULE_constArrayList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1008;
			Match(LPAR);
			State = 1009;
			Match(INTEGER);
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1010;
				Match(COMMA);
				State = 1011;
				Match(INTEGER);
				}
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1017;
			Match(RPAR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext[] emptyLines() {
			return GetRuleContexts<EmptyLinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines(int i) {
			return GetRuleContext<EmptyLinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext[] memberSeparator() {
			return GetRuleContexts<MemberSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSeparatorContext memberSeparator(int i) {
			return GetRuleContext<MemberSeparatorContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 1019;
				emptyLines();
				}
			}

			State = 1022;
			enumMember();
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1023;
				emptyLines();
				}
				break;
			}
			State = 1036;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1026;
					memberSeparator();
					State = 1028;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 1027;
						emptyLines();
						}
					}

					State = 1030;
					enumMember();
					State = 1032;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
					case 1:
						{
						State = 1031;
						emptyLines();
						}
						break;
					}
					}
					} 
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1039;
				memberSeparator();
				}
			}

			State = 1043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1042;
				emptyLines();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		public IdentifierContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1045;
			_localctx.Name = identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public KeywordContext Key;
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SyscodeParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_identifier);
		try {
			State = 1049;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
			case AS:
			case BASED:
			case BIN16:
			case BIN32:
			case BIN64:
			case BIN8:
			case BIN:
			case BIT:
			case BY:
			case CALL:
			case CONST:
			case DCL:
			case DEC:
			case DEF:
			case DO:
			case ELIF:
			case ELSE:
			case END:
			case ENTRY:
			case ENUM:
			case EXTERNAL:
			case FOR:
			case FOREVER:
			case FUNC:
			case GOTO:
			case IF:
			case INIT:
			case INTERNAL:
			case IS:
			case LABEL:
			case LIT:
			case LOOP:
			case MAIN:
			case OPTIONS:
			case PACKAGE:
			case PATH:
			case POINTER:
			case PROC:
			case RETURN:
			case STACK:
			case STATIC:
			case STRING:
			case STRUCT:
			case THEN:
			case TO:
			case TYPE:
			case UBIN16:
			case UBIN32:
			case UBIN64:
			case UBIN8:
			case UBIN:
			case UDEC:
			case UNALIGNED:
			case UNIT:
			case UNTIL:
			case VARIABLE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047;
				_localctx.Key = keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaryingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		public VaryingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varying; } }
	}

	[RuleVersion(0)]
	public VaryingContext varying() {
		VaryingContext _localctx = new VaryingContext(Context, State);
		EnterRule(_localctx, 172, RULE_varying);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasedAttributeContext basedAttribute() {
			return GetRuleContext<BasedAttributeContext>(0);
		}
		public StructAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAttributes; } }
	}

	[RuleVersion(0)]
	public StructAttributesContext structAttributes() {
		StructAttributesContext _localctx = new StructAttributesContext(Context, State);
		EnterRule(_localctx, 174, RULE_structAttributes);
		try {
			State = 1056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIGNED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1053;
				Match(ALIGNED);
				}
				break;
			case UNALIGNED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1054;
				Match(UNALIGNED);
				}
				break;
			case BASED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1055;
				basedAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
	 
		public AttributesContext() { }
		public virtual void CopyFrom(AttributesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribInitContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAttributeContext initAttribute() {
			return GetRuleContext<InitAttributeContext>(0);
		}
		public AttribInitContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribBasedContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasedAttributeContext basedAttribute() {
			return GetRuleContext<BasedAttributeContext>(0);
		}
		public AttribBasedContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribUnalignedContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnalignedAttributeContext unalignedAttribute() {
			return GetRuleContext<UnalignedAttributeContext>(0);
		}
		public AttribUnalignedContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribStaticContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticAttributeContext staticAttribute() {
			return GetRuleContext<StaticAttributeContext>(0);
		}
		public AttribStaticContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribInternalContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalAttributeContext internalAttribute() {
			return GetRuleContext<InternalAttributeContext>(0);
		}
		public AttribInternalContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribConstContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstAttributeContext constAttribute() {
			return GetRuleContext<ConstAttributeContext>(0);
		}
		public AttribConstContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribAlignedContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlignedAttributeContext alignedAttribute() {
			return GetRuleContext<AlignedAttributeContext>(0);
		}
		public AttribAlignedContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribExternalContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalAttributeContext externalAttribute() {
			return GetRuleContext<ExternalAttributeContext>(0);
		}
		public AttribExternalContext(AttributesContext context) { CopyFrom(context); }
	}
	public partial class AttribStackContext : AttributesContext {
		[System.Diagnostics.DebuggerNonUserCode] public StackAttributeContext stackAttribute() {
			return GetRuleContext<StackAttributeContext>(0);
		}
		public AttribStackContext(AttributesContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 176, RULE_attributes);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				_localctx = new AttribConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058;
				constAttribute();
				}
				break;
			case ALIGNED:
				_localctx = new AttribAlignedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059;
				alignedAttribute();
				}
				break;
			case UNALIGNED:
				_localctx = new AttribUnalignedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1060;
				unalignedAttribute();
				}
				break;
			case EXTERNAL:
				_localctx = new AttribExternalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1061;
				externalAttribute();
				}
				break;
			case INTERNAL:
				_localctx = new AttribInternalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1062;
				internalAttribute();
				}
				break;
			case STATIC:
				_localctx = new AttribStaticContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1063;
				staticAttribute();
				}
				break;
			case BASED:
				_localctx = new AttribBasedContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1064;
				basedAttribute();
				}
				break;
			case STACK:
				_localctx = new AttribStackContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1065;
				stackAttribute();
				}
				break;
			case INIT:
				_localctx = new AttribInitContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1066;
				initAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		public ConstAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constAttribute; } }
	}

	[RuleVersion(0)]
	public ConstAttributeContext constAttribute() {
		ConstAttributeContext _localctx = new ConstAttributeContext(Context, State);
		EnterRule(_localctx, 178, RULE_constAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedAttributeContext : ParserRuleContext {
		public ExpressionContext Alignment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AlignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedAttribute; } }
	}

	[RuleVersion(0)]
	public AlignedAttributeContext alignedAttribute() {
		AlignedAttributeContext _localctx = new AlignedAttributeContext(Context, State);
		EnterRule(_localctx, 180, RULE_alignedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			Match(ALIGNED);
			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1072;
				Match(LPAR);
				State = 1073;
				_localctx.Alignment = expression(0);
				State = 1074;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnalignedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		public UnalignedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unalignedAttribute; } }
	}

	[RuleVersion(0)]
	public UnalignedAttributeContext unalignedAttribute() {
		UnalignedAttributeContext _localctx = new UnalignedAttributeContext(Context, State);
		EnterRule(_localctx, 182, RULE_unalignedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(UNALIGNED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		public ExternalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalAttribute; } }
	}

	[RuleVersion(0)]
	public ExternalAttributeContext externalAttribute() {
		ExternalAttributeContext _localctx = new ExternalAttributeContext(Context, State);
		EnterRule(_localctx, 184, RULE_externalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			Match(EXTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(SyscodeParser.INTERNAL, 0); }
		public InternalAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalAttribute; } }
	}

	[RuleVersion(0)]
	public InternalAttributeContext internalAttribute() {
		InternalAttributeContext _localctx = new InternalAttributeContext(Context, State);
		EnterRule(_localctx, 186, RULE_internalAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			Match(INTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		public StaticAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAttribute; } }
	}

	[RuleVersion(0)]
	public StaticAttributeContext staticAttribute() {
		StaticAttributeContext _localctx = new StaticAttributeContext(Context, State);
		EnterRule(_localctx, 188, RULE_staticAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			Match(STATIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedAttributeContext : ParserRuleContext {
		public ExpressionContext Base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(SyscodeParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basedAttribute; } }
	}

	[RuleVersion(0)]
	public BasedAttributeContext basedAttribute() {
		BasedAttributeContext _localctx = new BasedAttributeContext(Context, State);
		EnterRule(_localctx, 190, RULE_basedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(BASED);
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1087;
				Match(LPAR);
				State = 1088;
				_localctx.Base = expression(0);
				State = 1089;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StackAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(SyscodeParser.STACK, 0); }
		public StackAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackAttribute; } }
	}

	[RuleVersion(0)]
	public StackAttributeContext stackAttribute() {
		StackAttributeContext _localctx = new StackAttributeContext(Context, State);
		EnterRule(_localctx, 192, RULE_stackAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			Match(STACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttributeContext : ParserRuleContext {
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(SyscodeParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttribute; } }
	}

	[RuleVersion(0)]
	public InitAttributeContext initAttribute() {
		InitAttributeContext _localctx = new InitAttributeContext(Context, State);
		EnterRule(_localctx, 194, RULE_initAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(INIT);
			State = 1096;
			Match(LPAR);
			State = 1097;
			_localctx.Value = expression(0);
			State = 1098;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			Match(UNIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryArgTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SyscodeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SyscodeParser.COMMA, i);
		}
		public EntryArgTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryArgTypes; } }
	}

	[RuleVersion(0)]
	public EntryArgTypesContext entryArgTypes() {
		EntryArgTypesContext _localctx = new EntryArgTypesContext(Context, State);
		EnterRule(_localctx, 198, RULE_entryArgTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			Match(LPAR);
			State = 1103;
			typeSpecifier();
			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1104;
				Match(COMMA);
				State = 1105;
				typeSpecifier();
				}
				}
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1111;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(SyscodeParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(SyscodeParser.RPAR, 0); }
		public ReturnDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnDescriptor; } }
	}

	[RuleVersion(0)]
	public ReturnDescriptorContext returnDescriptor() {
		ReturnDescriptorContext _localctx = new ReturnDescriptorContext(Context, State);
		EnterRule(_localctx, 200, RULE_returnDescriptor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			Match(AS);
			State = 1114;
			Match(LPAR);
			State = 1115;
			typeSpecifier();
			State = 1116;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SyscodeParser.COMMA, 0); }
		public MemberSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSeparator; } }
	}

	[RuleVersion(0)]
	public MemberSeparatorContext memberSeparator() {
		MemberSeparatorContext _localctx = new MemberSeparatorContext(Context, State);
		EnterRule(_localctx, 202, RULE_memberSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndOfFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyscodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLinesContext emptyLines() {
			return GetRuleContext<EmptyLinesContext>(0);
		}
		public EndOfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endOfFile; } }
	}

	[RuleVersion(0)]
	public EndOfFileContext endOfFile() {
		EndOfFileContext _localctx = new EndOfFileContext(Context, State);
		EnterRule(_localctx, 204, RULE_endOfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 1120;
				emptyLines();
				}
			}

			State = 1123;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGNED() { return GetToken(SyscodeParser.ALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SyscodeParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASED() { return GetToken(SyscodeParser.BASED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN16() { return GetToken(SyscodeParser.BIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN32() { return GetToken(SyscodeParser.BIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN64() { return GetToken(SyscodeParser.BIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN8() { return GetToken(SyscodeParser.BIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(SyscodeParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(SyscodeParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SyscodeParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(SyscodeParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(SyscodeParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL() { return GetToken(SyscodeParser.DCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(SyscodeParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(SyscodeParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SyscodeParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(SyscodeParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SyscodeParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SyscodeParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(SyscodeParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(SyscodeParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(SyscodeParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SyscodeParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREVER() { return GetToken(SyscodeParser.FOREVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(SyscodeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(SyscodeParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SyscodeParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(SyscodeParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(SyscodeParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SyscodeParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(SyscodeParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT() { return GetToken(SyscodeParser.LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(SyscodeParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(SyscodeParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(SyscodeParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SyscodeParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(SyscodeParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SyscodeParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(SyscodeParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SyscodeParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(SyscodeParser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(SyscodeParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SyscodeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SyscodeParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SyscodeParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SyscodeParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SyscodeParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN16() { return GetToken(SyscodeParser.UBIN16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN32() { return GetToken(SyscodeParser.UBIN32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN64() { return GetToken(SyscodeParser.UBIN64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN8() { return GetToken(SyscodeParser.UBIN8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBIN() { return GetToken(SyscodeParser.UBIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDEC() { return GetToken(SyscodeParser.UDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(SyscodeParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(SyscodeParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SyscodeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SyscodeParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(SyscodeParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 206, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 576459652791795711L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 45: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 52: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,116,1128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,1,0,4,0,210,
		8,0,11,0,12,0,211,1,1,1,1,1,2,4,2,217,8,2,11,2,12,2,218,1,3,5,3,222,8,
		3,10,3,12,3,225,9,3,1,3,1,3,1,4,3,4,230,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,245,8,4,1,5,1,5,1,5,3,5,250,8,5,1,5,3,5,
		253,8,5,1,5,1,5,3,5,257,8,5,1,5,1,5,3,5,261,8,5,1,5,3,5,264,8,5,5,5,266,
		8,5,10,5,12,5,269,9,5,1,5,1,5,1,6,1,6,3,6,275,8,6,1,6,1,6,5,6,279,8,6,
		10,6,12,6,282,9,6,1,6,1,6,1,7,1,7,1,7,3,7,289,8,7,1,7,1,7,1,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,3,12,309,8,
		12,1,12,1,12,3,12,313,8,12,1,12,5,12,316,8,12,10,12,12,12,319,9,12,1,12,
		3,12,322,8,12,1,12,1,12,1,13,1,13,3,13,328,8,13,1,13,1,13,3,13,332,8,13,
		1,13,3,13,335,8,13,1,13,5,13,338,8,13,10,13,12,13,341,9,13,1,13,3,13,344,
		8,13,1,13,1,13,1,14,1,14,3,14,350,8,14,1,14,1,14,3,14,354,8,14,1,14,3,
		14,357,8,14,1,14,1,14,3,14,361,8,14,1,14,5,14,364,8,14,10,14,12,14,367,
		9,14,1,14,3,14,370,8,14,1,14,1,14,1,15,1,15,1,15,4,15,377,8,15,11,15,12,
		15,378,1,15,1,15,1,16,1,16,3,16,385,8,16,1,16,1,16,3,16,389,8,16,1,16,
		3,16,392,8,16,1,16,1,16,3,16,396,8,16,1,16,1,16,3,16,400,8,16,1,16,1,16,
		1,17,1,17,3,17,406,8,17,1,17,1,17,1,17,1,18,1,18,3,18,413,8,18,1,18,3,
		18,416,8,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,424,8,19,1,19,1,19,3,19,
		428,8,19,1,19,3,19,431,8,19,1,19,3,19,434,8,19,1,19,1,19,5,19,438,8,19,
		10,19,12,19,441,9,19,1,19,1,19,3,19,445,8,19,1,20,1,20,1,20,1,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,460,8,22,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,3,23,470,8,23,1,23,3,23,473,8,23,1,23,1,23,3,23,
		477,8,23,1,23,3,23,480,8,23,1,23,1,23,3,23,484,8,23,1,23,3,23,487,8,23,
		1,23,1,23,3,23,491,8,23,1,23,5,23,494,8,23,10,23,12,23,497,9,23,1,23,3,
		23,500,8,23,1,23,1,23,1,24,1,24,1,24,3,24,507,8,24,1,24,5,24,510,8,24,
		10,24,12,24,513,9,24,1,24,3,24,516,8,24,1,24,1,24,1,25,1,25,1,25,3,25,
		523,8,25,1,25,5,25,526,8,25,10,25,12,25,529,9,25,1,25,3,25,532,8,25,1,
		25,1,25,1,26,1,26,1,26,5,26,539,8,26,10,26,12,26,542,9,26,1,26,3,26,545,
		8,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,3,29,557,8,29,1,
		29,1,29,3,29,561,8,29,1,29,3,29,564,8,29,1,29,3,29,567,8,29,1,29,3,29,
		570,8,29,1,29,3,29,573,8,29,1,29,1,29,1,30,3,30,578,8,30,1,30,1,30,3,30,
		582,8,30,1,30,1,30,3,30,586,8,30,1,30,1,30,1,31,5,31,591,8,31,10,31,12,
		31,594,9,31,1,32,1,32,3,32,598,8,32,1,32,1,32,1,33,1,33,3,33,604,8,33,
		1,33,4,33,607,8,33,11,33,12,33,608,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		3,34,618,8,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,626,8,36,3,36,628,8,36,
		1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,640,8,38,1,39,1,
		39,1,39,3,39,645,8,39,1,39,3,39,648,8,39,1,39,3,39,651,8,39,1,39,3,39,
		654,8,39,1,39,3,39,657,8,39,1,39,3,39,660,8,39,1,39,3,39,663,8,39,1,39,
		3,39,666,8,39,1,39,3,39,669,8,39,1,39,3,39,672,8,39,1,39,3,39,675,8,39,
		1,39,3,39,678,8,39,1,39,3,39,681,8,39,1,39,3,39,684,8,39,1,39,3,39,687,
		8,39,1,39,3,39,690,8,39,1,39,3,39,693,8,39,1,39,3,39,696,8,39,3,39,698,
		8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,721,8,42,1,42,3,42,724,8,
		42,1,42,3,42,727,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,
		3,45,739,8,45,1,45,1,45,1,45,1,45,3,45,745,8,45,5,45,747,8,45,10,45,12,
		45,750,9,45,1,46,3,46,753,8,46,1,46,1,46,1,47,4,47,758,8,47,11,47,12,47,
		759,1,48,4,48,763,8,48,11,48,12,48,764,1,49,1,49,3,49,769,8,49,1,49,1,
		49,1,50,1,50,3,50,775,8,50,1,50,1,50,1,51,1,51,1,51,5,51,782,8,51,10,51,
		12,51,785,9,51,1,52,1,52,1,52,1,52,3,52,791,8,52,1,52,1,52,3,52,795,8,
		52,1,52,1,52,3,52,799,8,52,1,52,1,52,1,52,1,52,3,52,805,8,52,1,52,1,52,
		3,52,809,8,52,1,52,1,52,1,52,1,52,3,52,815,8,52,1,52,1,52,3,52,819,8,52,
		1,52,1,52,1,52,1,52,3,52,825,8,52,1,52,1,52,3,52,829,8,52,1,52,1,52,1,
		52,1,52,3,52,835,8,52,1,52,1,52,3,52,839,8,52,1,52,1,52,1,52,1,52,3,52,
		845,8,52,1,52,1,52,3,52,849,8,52,1,52,1,52,1,52,1,52,3,52,855,8,52,1,52,
		1,52,3,52,859,8,52,1,52,1,52,1,52,1,52,3,52,865,8,52,1,52,1,52,3,52,869,
		8,52,1,52,1,52,1,52,1,52,3,52,875,8,52,1,52,1,52,3,52,879,8,52,1,52,1,
		52,1,52,1,52,3,52,885,8,52,1,52,1,52,3,52,889,8,52,1,52,1,52,1,52,1,52,
		3,52,895,8,52,1,52,1,52,3,52,899,8,52,1,52,1,52,5,52,903,8,52,10,52,12,
		52,906,9,52,1,53,1,53,1,53,1,53,3,53,912,8,53,1,54,1,54,1,55,1,55,1,55,
		1,55,3,55,920,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,930,8,
		59,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
		64,1,64,1,64,3,64,948,8,64,1,64,1,64,3,64,952,8,64,1,65,1,65,1,65,5,65,
		957,8,65,10,65,12,65,960,9,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,
		1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,
		1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,5,80,993,8,80,10,80,12,80,
		996,9,80,1,81,1,81,1,81,1,81,5,81,1002,8,81,10,81,12,81,1005,9,81,1,81,
		1,81,1,82,1,82,1,82,1,82,5,82,1013,8,82,10,82,12,82,1016,9,82,1,82,1,82,
		1,83,3,83,1021,8,83,1,83,1,83,3,83,1025,8,83,1,83,1,83,3,83,1029,8,83,
		1,83,1,83,3,83,1033,8,83,5,83,1035,8,83,10,83,12,83,1038,9,83,1,83,3,83,
		1041,8,83,1,83,3,83,1044,8,83,1,84,1,84,1,85,1,85,3,85,1050,8,85,1,86,
		1,86,1,87,1,87,1,87,3,87,1057,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,3,88,1068,8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,90,1077,
		8,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,
		3,95,1092,8,95,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,99,1,99,
		1,99,1,99,5,99,1107,8,99,10,99,12,99,1110,9,99,1,99,1,99,1,100,1,100,1,
		100,1,100,1,100,1,101,1,101,1,102,3,102,1122,8,102,1,102,1,102,1,103,1,
		103,1,103,0,2,90,104,104,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,0,14,2,0,108,108,115,115,2,1,108,108,115,115,
		2,0,12,15,57,60,3,0,16,16,22,22,61,62,2,0,103,103,105,105,1,0,98,102,1,
		0,88,89,2,0,90,90,92,93,2,0,72,72,74,74,1,0,76,77,3,0,73,73,75,75,78,78,
		2,0,79,85,103,103,3,0,78,78,88,89,95,97,2,0,9,48,50,67,1244,0,209,1,0,
		0,0,2,213,1,0,0,0,4,216,1,0,0,0,6,223,1,0,0,0,8,229,1,0,0,0,10,246,1,0,
		0,0,12,272,1,0,0,0,14,285,1,0,0,0,16,292,1,0,0,0,18,296,1,0,0,0,20,300,
		1,0,0,0,22,304,1,0,0,0,24,306,1,0,0,0,26,325,1,0,0,0,28,347,1,0,0,0,30,
		373,1,0,0,0,32,382,1,0,0,0,34,403,1,0,0,0,36,410,1,0,0,0,38,444,1,0,0,
		0,40,446,1,0,0,0,42,449,1,0,0,0,44,459,1,0,0,0,46,461,1,0,0,0,48,503,1,
		0,0,0,50,519,1,0,0,0,52,535,1,0,0,0,54,548,1,0,0,0,56,551,1,0,0,0,58,554,
		1,0,0,0,60,577,1,0,0,0,62,592,1,0,0,0,64,595,1,0,0,0,66,606,1,0,0,0,68,
		617,1,0,0,0,70,619,1,0,0,0,72,627,1,0,0,0,74,629,1,0,0,0,76,634,1,0,0,
		0,78,641,1,0,0,0,80,699,1,0,0,0,82,701,1,0,0,0,84,726,1,0,0,0,86,728,1,
		0,0,0,88,733,1,0,0,0,90,735,1,0,0,0,92,752,1,0,0,0,94,757,1,0,0,0,96,762,
		1,0,0,0,98,766,1,0,0,0,100,772,1,0,0,0,102,778,1,0,0,0,104,790,1,0,0,0,
		106,911,1,0,0,0,108,913,1,0,0,0,110,919,1,0,0,0,112,921,1,0,0,0,114,923,
		1,0,0,0,116,925,1,0,0,0,118,929,1,0,0,0,120,931,1,0,0,0,122,933,1,0,0,
		0,124,937,1,0,0,0,126,940,1,0,0,0,128,951,1,0,0,0,130,953,1,0,0,0,132,
		961,1,0,0,0,134,963,1,0,0,0,136,965,1,0,0,0,138,967,1,0,0,0,140,969,1,
		0,0,0,142,971,1,0,0,0,144,973,1,0,0,0,146,975,1,0,0,0,148,977,1,0,0,0,
		150,979,1,0,0,0,152,981,1,0,0,0,154,983,1,0,0,0,156,985,1,0,0,0,158,987,
		1,0,0,0,160,989,1,0,0,0,162,997,1,0,0,0,164,1008,1,0,0,0,166,1020,1,0,
		0,0,168,1045,1,0,0,0,170,1049,1,0,0,0,172,1051,1,0,0,0,174,1056,1,0,0,
		0,176,1067,1,0,0,0,178,1069,1,0,0,0,180,1071,1,0,0,0,182,1078,1,0,0,0,
		184,1080,1,0,0,0,186,1082,1,0,0,0,188,1084,1,0,0,0,190,1086,1,0,0,0,192,
		1093,1,0,0,0,194,1095,1,0,0,0,196,1100,1,0,0,0,198,1102,1,0,0,0,200,1113,
		1,0,0,0,202,1118,1,0,0,0,204,1121,1,0,0,0,206,1125,1,0,0,0,208,210,7,0,
		0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,
		1,1,0,0,0,213,214,7,1,0,0,214,3,1,0,0,0,215,217,5,115,0,0,216,215,1,0,
		0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,5,1,0,0,0,220,
		222,3,8,4,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,
		0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,3,204,102,0,227,7,1,0,0,
		0,228,230,3,0,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,244,1,0,0,0,231,
		245,3,34,17,0,232,245,3,36,18,0,233,245,3,14,7,0,234,245,3,32,16,0,235,
		245,3,58,29,0,236,245,3,38,19,0,237,245,3,40,20,0,238,245,3,42,21,0,239,
		245,3,26,13,0,240,245,3,28,14,0,241,245,3,44,22,0,242,245,3,18,9,0,243,
		245,3,86,43,0,244,231,1,0,0,0,244,232,1,0,0,0,244,233,1,0,0,0,244,234,
		1,0,0,0,244,235,1,0,0,0,244,236,1,0,0,0,244,237,1,0,0,0,244,238,1,0,0,
		0,244,239,1,0,0,0,244,240,1,0,0,0,244,241,1,0,0,0,244,242,1,0,0,0,244,
		243,1,0,0,0,245,9,1,0,0,0,246,247,5,53,0,0,247,249,3,170,85,0,248,250,
		3,126,63,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,253,3,174,
		87,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,256,3,2,1,0,255,
		257,3,4,2,0,256,255,1,0,0,0,256,257,1,0,0,0,257,267,1,0,0,0,258,261,3,
		12,6,0,259,261,3,10,5,0,260,258,1,0,0,0,260,259,1,0,0,0,261,263,1,0,0,
		0,262,264,3,4,2,0,263,262,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,
		260,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,
		0,0,0,269,267,1,0,0,0,270,271,5,27,0,0,271,11,1,0,0,0,272,274,3,170,85,
		0,273,275,3,126,63,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,
		280,3,68,34,0,277,279,3,176,88,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
		1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,3,2,1,
		0,284,13,1,0,0,0,285,286,5,107,0,0,286,288,3,170,85,0,287,289,3,16,8,0,
		288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,3,2,1,0,291,15,
		1,0,0,0,292,293,5,110,0,0,293,294,3,118,59,0,294,295,5,111,0,0,295,17,
		1,0,0,0,296,297,5,34,0,0,297,298,3,90,45,0,298,299,3,2,1,0,299,19,1,0,
		0,0,300,301,5,110,0,0,301,302,3,104,52,0,302,303,5,111,0,0,303,21,1,0,
		0,0,304,305,3,24,12,0,305,23,1,0,0,0,306,308,5,44,0,0,307,309,3,4,2,0,
		308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,312,3,160,80,0,311,
		313,3,4,2,0,312,311,1,0,0,0,312,313,1,0,0,0,313,317,1,0,0,0,314,316,3,
		8,4,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,
		318,321,1,0,0,0,319,317,1,0,0,0,320,322,3,4,2,0,321,320,1,0,0,0,321,322,
		1,0,0,0,322,323,1,0,0,0,323,324,5,27,0,0,324,25,1,0,0,0,325,327,5,47,0,
		0,326,328,3,4,2,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,
		331,3,170,85,0,330,332,3,162,81,0,331,330,1,0,0,0,331,332,1,0,0,0,332,
		334,1,0,0,0,333,335,3,30,15,0,334,333,1,0,0,0,334,335,1,0,0,0,335,339,
		1,0,0,0,336,338,3,8,4,0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,
		0,339,340,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,342,344,3,4,2,0,343,
		342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,5,27,0,0,346,27,1,
		0,0,0,347,349,5,33,0,0,348,350,3,4,2,0,349,348,1,0,0,0,349,350,1,0,0,0,
		350,351,1,0,0,0,351,353,3,170,85,0,352,354,3,162,81,0,353,352,1,0,0,0,
		353,354,1,0,0,0,354,356,1,0,0,0,355,357,3,30,15,0,356,355,1,0,0,0,356,
		357,1,0,0,0,357,358,1,0,0,0,358,360,5,10,0,0,359,361,3,200,100,0,360,359,
		1,0,0,0,360,361,1,0,0,0,361,365,1,0,0,0,362,364,3,8,4,0,363,362,1,0,0,
		0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,369,1,0,0,0,367,
		365,1,0,0,0,368,370,3,4,2,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,
		0,0,0,371,372,5,27,0,0,372,29,1,0,0,0,373,374,5,43,0,0,374,376,5,110,0,
		0,375,377,5,42,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,
		379,1,0,0,0,379,380,1,0,0,0,380,381,5,111,0,0,381,31,1,0,0,0,382,384,5,
		29,0,0,383,385,3,4,2,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,
		386,388,3,170,85,0,387,389,3,4,2,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
		391,1,0,0,0,390,392,3,68,34,0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,
		1,0,0,0,393,395,3,202,101,0,394,396,3,4,2,0,395,394,1,0,0,0,395,396,1,
		0,0,0,396,397,1,0,0,0,397,399,3,166,83,0,398,400,3,4,2,0,399,398,1,0,0,
		0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,5,27,0,0,402,33,1,0,0,0,403,
		405,5,19,0,0,404,406,3,4,2,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,
		0,0,0,407,408,3,90,45,0,408,409,3,2,1,0,409,35,1,0,0,0,410,415,5,48,0,
		0,411,413,3,4,2,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,
		416,3,104,52,0,415,412,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,
		3,2,1,0,418,37,1,0,0,0,419,420,5,21,0,0,420,445,3,10,5,0,421,423,5,21,
		0,0,422,424,3,4,2,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,
		427,3,170,85,0,426,428,3,4,2,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,
		1,0,0,0,429,431,3,126,63,0,430,429,1,0,0,0,430,431,1,0,0,0,431,433,1,0,
		0,0,432,434,3,4,2,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,
		439,3,68,34,0,436,438,3,176,88,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,
		1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,443,3,2,1,
		0,443,445,1,0,0,0,444,419,1,0,0,0,444,421,1,0,0,0,445,39,1,0,0,0,446,447,
		5,56,0,0,447,448,3,10,5,0,448,41,1,0,0,0,449,450,5,40,0,0,450,451,3,120,
		60,0,451,452,5,10,0,0,452,453,3,118,59,0,453,454,3,2,1,0,454,43,1,0,0,
		0,455,460,3,52,26,0,456,460,3,46,23,0,457,460,3,48,24,0,458,460,3,50,25,
		0,459,455,1,0,0,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,
		45,1,0,0,0,461,462,5,24,0,0,462,463,3,90,45,0,463,464,5,103,0,0,464,465,
		3,104,52,0,465,466,5,55,0,0,466,469,3,104,52,0,467,468,5,18,0,0,468,470,
		3,104,52,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,473,3,4,
		2,0,472,471,1,0,0,0,472,473,1,0,0,0,473,490,1,0,0,0,474,476,3,54,27,0,
		475,477,3,4,2,0,476,475,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,480,
		3,56,28,0,479,478,1,0,0,0,479,480,1,0,0,0,480,491,1,0,0,0,481,483,3,56,
		28,0,482,484,3,4,2,0,483,482,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,
		487,3,54,27,0,486,485,1,0,0,0,486,487,1,0,0,0,487,491,1,0,0,0,488,491,
		3,54,27,0,489,491,3,56,28,0,490,474,1,0,0,0,490,481,1,0,0,0,490,488,1,
		0,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,495,1,0,0,0,492,494,3,8,4,0,
		493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,499,
		1,0,0,0,497,495,1,0,0,0,498,500,3,4,2,0,499,498,1,0,0,0,499,500,1,0,0,
		0,500,501,1,0,0,0,501,502,5,27,0,0,502,47,1,0,0,0,503,504,5,24,0,0,504,
		506,3,54,27,0,505,507,3,56,28,0,506,505,1,0,0,0,506,507,1,0,0,0,507,511,
		1,0,0,0,508,510,3,8,4,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,
		0,511,512,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,514,516,3,4,2,0,515,
		514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,518,5,27,0,0,518,49,1,
		0,0,0,519,520,5,24,0,0,520,522,3,56,28,0,521,523,3,54,27,0,522,521,1,0,
		0,0,522,523,1,0,0,0,523,527,1,0,0,0,524,526,3,8,4,0,525,524,1,0,0,0,526,
		529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,
		0,0,0,530,532,3,4,2,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,
		533,534,5,27,0,0,534,51,1,0,0,0,535,536,5,24,0,0,536,540,5,41,0,0,537,
		539,3,8,4,0,538,537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,
		0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,543,545,3,4,2,0,544,543,1,0,0,0,
		544,545,1,0,0,0,545,546,1,0,0,0,546,547,5,27,0,0,547,53,1,0,0,0,548,549,
		5,67,0,0,549,550,3,104,52,0,550,55,1,0,0,0,551,552,5,65,0,0,552,553,3,
		104,52,0,553,57,1,0,0,0,554,556,5,35,0,0,555,557,3,4,2,0,556,555,1,0,0,
		0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,3,60,30,0,559,561,3,4,2,0,560,
		559,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,564,3,66,33,0,563,562,
		1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,567,3,4,2,0,566,565,1,0,0,
		0,566,567,1,0,0,0,567,569,1,0,0,0,568,570,3,64,32,0,569,568,1,0,0,0,569,
		570,1,0,0,0,570,572,1,0,0,0,571,573,3,4,2,0,572,571,1,0,0,0,572,573,1,
		0,0,0,573,574,1,0,0,0,574,575,5,27,0,0,575,59,1,0,0,0,576,578,3,4,2,0,
		577,576,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,581,3,104,52,0,580,
		582,3,4,2,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,585,5,
		54,0,0,584,586,3,4,2,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,
		587,588,3,62,31,0,588,61,1,0,0,0,589,591,3,8,4,0,590,589,1,0,0,0,591,594,
		1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,63,1,0,0,0,594,592,1,0,0,0,
		595,597,5,26,0,0,596,598,3,4,2,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,
		1,0,0,0,599,600,3,62,31,0,600,65,1,0,0,0,601,603,5,25,0,0,602,604,3,4,
		2,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,607,3,60,30,0,
		606,601,1,0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,67,
		1,0,0,0,610,618,3,72,36,0,611,618,3,74,37,0,612,618,3,76,38,0,613,618,
		3,78,39,0,614,618,3,80,40,0,615,618,3,82,41,0,616,618,3,70,35,0,617,610,
		1,0,0,0,617,611,1,0,0,0,617,612,1,0,0,0,617,613,1,0,0,0,617,614,1,0,0,
		0,617,615,1,0,0,0,617,616,1,0,0,0,618,69,1,0,0,0,619,620,5,10,0,0,620,
		621,3,170,85,0,621,71,1,0,0,0,622,628,7,2,0,0,623,625,7,3,0,0,624,626,
		3,100,50,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,622,1,0,
		0,0,627,623,1,0,0,0,628,73,1,0,0,0,629,630,5,17,0,0,630,631,5,110,0,0,
		631,632,3,118,59,0,632,633,5,111,0,0,633,75,1,0,0,0,634,635,5,52,0,0,635,
		636,5,110,0,0,636,637,3,118,59,0,637,639,5,111,0,0,638,640,5,66,0,0,639,
		638,1,0,0,0,639,640,1,0,0,0,640,77,1,0,0,0,641,697,5,28,0,0,642,698,1,
		0,0,0,643,645,3,198,99,0,644,643,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,
		0,646,648,3,200,100,0,647,646,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,
		649,651,5,66,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,698,1,0,0,0,652,654,
		3,198,99,0,653,652,1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,657,5,66,
		0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,660,3,200,100,
		0,659,658,1,0,0,0,659,660,1,0,0,0,660,698,1,0,0,0,661,663,3,200,100,0,
		662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,666,3,198,99,0,665,
		664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,669,5,66,0,0,668,667,1,
		0,0,0,668,669,1,0,0,0,669,698,1,0,0,0,670,672,3,200,100,0,671,670,1,0,
		0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,5,66,0,0,674,673,1,0,0,0,674,
		675,1,0,0,0,675,677,1,0,0,0,676,678,3,198,99,0,677,676,1,0,0,0,677,678,
		1,0,0,0,678,698,1,0,0,0,679,681,5,66,0,0,680,679,1,0,0,0,680,681,1,0,0,
		0,681,683,1,0,0,0,682,684,3,200,100,0,683,682,1,0,0,0,683,684,1,0,0,0,
		684,686,1,0,0,0,685,687,3,198,99,0,686,685,1,0,0,0,686,687,1,0,0,0,687,
		698,1,0,0,0,688,690,5,66,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,692,1,
		0,0,0,691,693,3,198,99,0,692,691,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,
		0,694,696,3,200,100,0,695,694,1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,
		697,642,1,0,0,0,697,644,1,0,0,0,697,653,1,0,0,0,697,662,1,0,0,0,697,671,
		1,0,0,0,697,680,1,0,0,0,697,689,1,0,0,0,698,79,1,0,0,0,699,700,5,39,0,
		0,700,81,1,0,0,0,701,702,5,46,0,0,702,83,1,0,0,0,703,727,5,15,0,0,704,
		727,5,12,0,0,705,727,5,13,0,0,706,727,5,14,0,0,707,727,5,60,0,0,708,727,
		5,57,0,0,709,727,5,58,0,0,710,727,5,59,0,0,711,727,5,16,0,0,712,727,5,
		61,0,0,713,727,5,22,0,0,714,727,5,62,0,0,715,727,5,52,0,0,716,727,5,17,
		0,0,717,727,5,39,0,0,718,720,5,28,0,0,719,721,3,198,99,0,720,719,1,0,0,
		0,720,721,1,0,0,0,721,723,1,0,0,0,722,724,3,200,100,0,723,722,1,0,0,0,
		723,724,1,0,0,0,724,727,1,0,0,0,725,727,5,46,0,0,726,703,1,0,0,0,726,704,
		1,0,0,0,726,705,1,0,0,0,726,706,1,0,0,0,726,707,1,0,0,0,726,708,1,0,0,
		0,726,709,1,0,0,0,726,710,1,0,0,0,726,711,1,0,0,0,726,712,1,0,0,0,726,
		713,1,0,0,0,726,714,1,0,0,0,726,715,1,0,0,0,726,716,1,0,0,0,726,717,1,
		0,0,0,726,718,1,0,0,0,726,725,1,0,0,0,727,85,1,0,0,0,728,729,3,90,45,0,
		729,730,3,88,44,0,730,731,3,104,52,0,731,732,3,2,1,0,732,87,1,0,0,0,733,
		734,7,4,0,0,734,89,1,0,0,0,735,736,6,45,-1,0,736,738,3,92,46,0,737,739,
		3,94,47,0,738,737,1,0,0,0,738,739,1,0,0,0,739,748,1,0,0,0,740,741,10,2,
		0,0,741,742,5,112,0,0,742,744,3,92,46,0,743,745,3,94,47,0,744,743,1,0,
		0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,740,1,0,0,0,747,750,1,0,0,0,748,
		746,1,0,0,0,748,749,1,0,0,0,749,91,1,0,0,0,750,748,1,0,0,0,751,753,3,96,
		48,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,3,170,85,
		0,755,93,1,0,0,0,756,758,3,100,50,0,757,756,1,0,0,0,758,759,1,0,0,0,759,
		757,1,0,0,0,759,760,1,0,0,0,760,95,1,0,0,0,761,763,3,98,49,0,762,761,1,
		0,0,0,763,764,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,97,1,0,0,0,766,
		768,3,170,85,0,767,769,3,100,50,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
		770,1,0,0,0,770,771,5,106,0,0,771,99,1,0,0,0,772,774,5,110,0,0,773,775,
		3,102,51,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,111,
		0,0,777,101,1,0,0,0,778,783,3,104,52,0,779,780,5,109,0,0,780,782,3,104,
		52,0,781,779,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,
		103,1,0,0,0,785,783,1,0,0,0,786,787,6,52,-1,0,787,791,3,106,53,0,788,791,
		3,122,61,0,789,791,3,124,62,0,790,786,1,0,0,0,790,788,1,0,0,0,790,789,
		1,0,0,0,791,904,1,0,0,0,792,794,10,11,0,0,793,795,3,4,2,0,794,793,1,0,
		0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,798,3,142,71,0,797,799,3,4,2,0,
		798,797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,801,3,104,52,11,801,
		903,1,0,0,0,802,804,10,10,0,0,803,805,3,4,2,0,804,803,1,0,0,0,804,805,
		1,0,0,0,805,806,1,0,0,0,806,808,3,148,74,0,807,809,3,4,2,0,808,807,1,0,
		0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,811,3,104,52,11,811,903,1,0,0,
		0,812,814,10,9,0,0,813,815,3,4,2,0,814,813,1,0,0,0,814,815,1,0,0,0,815,
		816,1,0,0,0,816,818,3,146,73,0,817,819,3,4,2,0,818,817,1,0,0,0,818,819,
		1,0,0,0,819,820,1,0,0,0,820,821,3,104,52,10,821,903,1,0,0,0,822,824,10,
		8,0,0,823,825,3,4,2,0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,
		826,828,3,144,72,0,827,829,3,4,2,0,828,827,1,0,0,0,828,829,1,0,0,0,829,
		830,1,0,0,0,830,831,3,104,52,9,831,903,1,0,0,0,832,834,10,7,0,0,833,835,
		3,4,2,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,838,3,140,
		70,0,837,839,3,4,2,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,
		841,3,104,52,8,841,903,1,0,0,0,842,844,10,6,0,0,843,845,3,4,2,0,844,843,
		1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,848,3,156,78,0,847,849,3,4,
		2,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,851,3,104,52,7,
		851,903,1,0,0,0,852,854,10,5,0,0,853,855,3,4,2,0,854,853,1,0,0,0,854,855,
		1,0,0,0,855,856,1,0,0,0,856,858,3,150,75,0,857,859,3,4,2,0,858,857,1,0,
		0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,3,104,52,6,861,903,1,0,0,0,
		862,864,10,4,0,0,863,865,3,4,2,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,
		1,0,0,0,866,868,3,152,76,0,867,869,3,4,2,0,868,867,1,0,0,0,868,869,1,0,
		0,0,869,870,1,0,0,0,870,871,3,104,52,5,871,903,1,0,0,0,872,874,10,3,0,
		0,873,875,3,4,2,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,
		878,3,154,77,0,877,879,3,4,2,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,
		1,0,0,0,880,881,3,104,52,4,881,903,1,0,0,0,882,884,10,2,0,0,883,885,3,
		4,2,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,888,3,136,68,
		0,887,889,3,4,2,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,
		891,3,104,52,3,891,903,1,0,0,0,892,894,10,1,0,0,893,895,3,4,2,0,894,893,
		1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,3,138,69,0,897,899,3,4,
		2,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,3,104,52,2,
		901,903,1,0,0,0,902,792,1,0,0,0,902,802,1,0,0,0,902,812,1,0,0,0,902,822,
		1,0,0,0,902,832,1,0,0,0,902,842,1,0,0,0,902,852,1,0,0,0,902,862,1,0,0,
		0,902,872,1,0,0,0,902,882,1,0,0,0,902,892,1,0,0,0,903,906,1,0,0,0,904,
		902,1,0,0,0,904,905,1,0,0,0,905,105,1,0,0,0,906,904,1,0,0,0,907,912,3,
		110,55,0,908,912,3,108,54,0,909,912,3,120,60,0,910,912,3,90,45,0,911,907,
		1,0,0,0,911,908,1,0,0,0,911,909,1,0,0,0,911,910,1,0,0,0,912,107,1,0,0,
		0,913,914,5,87,0,0,914,109,1,0,0,0,915,920,3,114,57,0,916,920,3,116,58,
		0,917,920,3,112,56,0,918,920,3,118,59,0,919,915,1,0,0,0,919,916,1,0,0,
		0,919,917,1,0,0,0,919,918,1,0,0,0,920,111,1,0,0,0,921,922,5,4,0,0,922,
		113,1,0,0,0,923,924,5,7,0,0,924,115,1,0,0,0,925,926,5,5,0,0,926,117,1,
		0,0,0,927,930,5,8,0,0,928,930,5,6,0,0,929,927,1,0,0,0,929,928,1,0,0,0,
		930,119,1,0,0,0,931,932,5,114,0,0,932,121,1,0,0,0,933,934,5,110,0,0,934,
		935,3,104,52,0,935,936,5,111,0,0,936,123,1,0,0,0,937,938,3,158,79,0,938,
		939,3,104,52,0,939,125,1,0,0,0,940,941,5,110,0,0,941,942,3,130,65,0,942,
		943,5,111,0,0,943,127,1,0,0,0,944,945,3,104,52,0,945,946,5,68,0,0,946,
		948,1,0,0,0,947,944,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,952,3,
		104,52,0,950,952,5,90,0,0,951,947,1,0,0,0,951,950,1,0,0,0,952,129,1,0,
		0,0,953,958,3,128,64,0,954,955,5,109,0,0,955,957,3,128,64,0,956,954,1,
		0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,131,1,0,0,0,
		960,958,1,0,0,0,961,962,3,104,52,0,962,133,1,0,0,0,963,964,3,104,52,0,
		964,135,1,0,0,0,965,966,5,70,0,0,966,137,1,0,0,0,967,968,5,71,0,0,968,
		139,1,0,0,0,969,970,5,69,0,0,970,141,1,0,0,0,971,972,5,86,0,0,972,143,
		1,0,0,0,973,974,7,5,0,0,974,145,1,0,0,0,975,976,7,6,0,0,976,147,1,0,0,
		0,977,978,7,7,0,0,978,149,1,0,0,0,979,980,7,8,0,0,980,151,1,0,0,0,981,
		982,7,9,0,0,982,153,1,0,0,0,983,984,7,10,0,0,984,155,1,0,0,0,985,986,7,
		11,0,0,986,157,1,0,0,0,987,988,7,12,0,0,988,159,1,0,0,0,989,994,3,170,
		85,0,990,991,5,106,0,0,991,993,3,170,85,0,992,990,1,0,0,0,993,996,1,0,
		0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,161,1,0,0,0,996,994,1,0,0,0,997,
		998,5,110,0,0,998,1003,3,170,85,0,999,1000,5,109,0,0,1000,1002,3,170,85,
		0,1001,999,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,
		0,1004,1006,1,0,0,0,1005,1003,1,0,0,0,1006,1007,5,111,0,0,1007,163,1,0,
		0,0,1008,1009,5,110,0,0,1009,1014,5,8,0,0,1010,1011,5,109,0,0,1011,1013,
		5,8,0,0,1012,1010,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,
		1,0,0,0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1018,5,111,0,0,1018,165,
		1,0,0,0,1019,1021,3,4,2,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,
		1,0,0,0,1022,1024,3,168,84,0,1023,1025,3,4,2,0,1024,1023,1,0,0,0,1024,
		1025,1,0,0,0,1025,1036,1,0,0,0,1026,1028,3,202,101,0,1027,1029,3,4,2,0,
		1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1032,3,168,
		84,0,1031,1033,3,4,2,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1035,1,
		0,0,0,1034,1026,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,
		1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1039,1041,3,202,101,0,1040,
		1039,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,1044,3,4,2,0,1043,
		1042,1,0,0,0,1043,1044,1,0,0,0,1044,167,1,0,0,0,1045,1046,3,170,85,0,1046,
		169,1,0,0,0,1047,1050,3,206,103,0,1048,1050,5,113,0,0,1049,1047,1,0,0,
		0,1049,1048,1,0,0,0,1050,171,1,0,0,0,1051,1052,5,66,0,0,1052,173,1,0,0,
		0,1053,1057,5,9,0,0,1054,1057,5,63,0,0,1055,1057,3,190,95,0,1056,1053,
		1,0,0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,175,1,0,0,0,1058,1068,
		3,178,89,0,1059,1068,3,180,90,0,1060,1068,3,182,91,0,1061,1068,3,184,92,
		0,1062,1068,3,186,93,0,1063,1068,3,188,94,0,1064,1068,3,190,95,0,1065,
		1068,3,192,96,0,1066,1068,3,194,97,0,1067,1058,1,0,0,0,1067,1059,1,0,0,
		0,1067,1060,1,0,0,0,1067,1061,1,0,0,0,1067,1062,1,0,0,0,1067,1063,1,0,
		0,0,1067,1064,1,0,0,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,177,1,0,
		0,0,1069,1070,5,20,0,0,1070,179,1,0,0,0,1071,1076,5,9,0,0,1072,1073,5,
		110,0,0,1073,1074,3,104,52,0,1074,1075,5,111,0,0,1075,1077,1,0,0,0,1076,
		1072,1,0,0,0,1076,1077,1,0,0,0,1077,181,1,0,0,0,1078,1079,5,63,0,0,1079,
		183,1,0,0,0,1080,1081,5,30,0,0,1081,185,1,0,0,0,1082,1083,5,37,0,0,1083,
		187,1,0,0,0,1084,1085,5,51,0,0,1085,189,1,0,0,0,1086,1091,5,11,0,0,1087,
		1088,5,110,0,0,1088,1089,3,104,52,0,1089,1090,5,111,0,0,1090,1092,1,0,
		0,0,1091,1087,1,0,0,0,1091,1092,1,0,0,0,1092,191,1,0,0,0,1093,1094,5,50,
		0,0,1094,193,1,0,0,0,1095,1096,5,36,0,0,1096,1097,5,110,0,0,1097,1098,
		3,104,52,0,1098,1099,5,111,0,0,1099,195,1,0,0,0,1100,1101,5,64,0,0,1101,
		197,1,0,0,0,1102,1103,5,110,0,0,1103,1108,3,68,34,0,1104,1105,5,109,0,
		0,1105,1107,3,68,34,0,1106,1104,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,
		0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,1111,1112,
		5,111,0,0,1112,199,1,0,0,0,1113,1114,5,10,0,0,1114,1115,5,110,0,0,1115,
		1116,3,68,34,0,1116,1117,5,111,0,0,1117,201,1,0,0,0,1118,1119,5,109,0,
		0,1119,203,1,0,0,0,1120,1122,3,4,2,0,1121,1120,1,0,0,0,1121,1122,1,0,0,
		0,1122,1123,1,0,0,0,1123,1124,5,0,0,1,1124,205,1,0,0,0,1125,1126,7,13,
		0,0,1126,207,1,0,0,0,158,211,218,223,229,244,249,252,256,260,263,267,274,
		280,288,308,312,317,321,327,331,334,339,343,349,353,356,360,365,369,378,
		384,388,391,395,399,405,412,415,423,427,430,433,439,444,459,469,472,476,
		479,483,486,490,495,499,506,511,515,522,527,531,540,544,556,560,563,566,
		569,572,577,581,585,592,597,603,608,617,625,627,639,644,647,650,653,656,
		659,662,665,668,671,674,677,680,683,686,689,692,695,697,720,723,726,738,
		744,748,752,759,764,768,774,783,790,794,798,804,808,814,818,824,828,834,
		838,844,848,854,858,864,868,874,878,884,888,894,898,902,904,911,919,929,
		947,951,958,994,1003,1014,1020,1024,1028,1032,1036,1040,1043,1049,1056,
		1067,1076,1091,1108,1121
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
