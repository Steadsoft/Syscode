// any variable declared in the global scope MUST be explicitly declared as static
// if it is not declared as external then it is internal, there is no 'internal' keyword.

hex = 01F5 33DA 0F02 11B9 {h}
bin = +1001 1101 0010 0011 {b}

targ = x + y * z - (d * k)

dcl global_count(32) bin16 static          // this defaults to internal
dcl global_rate  bin16 static external // this is only legal in the global scope nn inside a proc

// we must not accept a scope inside of a proc/func 
// a scope can only contain procs/funcs, declared data (vars, structs but must be static ext), types

dcl get_date entry (bin32) as (string(64)) based based

dcl bin builtin static static 

// a "package" in PL/I is rather weak, it's not really a proper namespace. 
// dcl utils.set_date (bin64)

// SEE: https://www.ibm.com/docs/en/epfz/6.2.0?topic=organization-packages

dcl goto bin16 aligned(1) bin(32) var

dcl throw string(32) bin(16)

dcl name string(16)
dcl addr string(64, utf16)
dcl state string(16, sbe)
dcl region string(32, utf8)


global_rate = -  100

binar = -1001 0111 1101{b}

hexsum = -1e44{h} + 75a2{h}

speed = -2400 1e34{h}  // signed hex
rate = +1200 // signed dec
velocity = 3400{h} // unsigned hex
errors = bin(-2F04 {h}, 16) // signed 16 bit value 

dcl struct if
       struct then
       end
       struct else
          struct struct
          end
       end
end

// "packed" here, means align all contained elements on the next avaiable byte/bit 

dcl struct RCC at (1200 4300 8A00 0010{h}) packed order (asc)
    SW              bit(3)
    SWS             bit(3)
    STOPWUCK        bit(1)
    STOPKERWUCK     bit(1)
    RTCPRE          bit(6)
    HRTIMSEL        bit(1)
    TIMPRE          bit(1)
    RESERVED        bit(2) pad
    MCO(2)          as MCO
    RESERVED        bit(8) pad
end

type struct MCO 
    PRE             bit(4)
    SEL             bit(3)
end

proc main (a,b,c) options(main) // outermost, therefore has external scope, full name: utilities.main

    dcl a bin8 var
    dcl b ubin16
    dcl bits bit(128)

    then = bin(100,16) + bin(75,16); 

    dcl c bin(32) aligned(2 * 23) static internal external
    dcl d bin(32) static aligned(2 * 23) external internal

    dcl structure while packed
        struct inner1
            field1_1 bin8
            field1_1 bin8 offset(8)
            unused bit(8) pad
        end
        struct inner2
            field2_1 bin8
            unused bit(4) pad
            field2_2 bin8
        end
    end
 
    dcl a bin(10,4) static based (p) 

    dcl large(10 + a) ubin(71) init(1234)

    date = get_date(123)

    outer.inner1.dont.age = -9

    do @main loop
        error_count += 1

        if error_count > 100 then
           leave 
        else
           proceed main
        end
    end

    outer.inner1.field1_2 = 1000
    outer(a,b,c).inner1.field1_2 = 1000

    none.missing.rate = 1000

    outer.inner3.field2_1 = 500

    call reset_database(x,y,z)

    ord = 23  +  45    // ordinary
    sat = 23 (+) 45    // saturated
    sum = 23 [+] 45    // overflow aware

    if @main overflowed then
       if uptime > 1000 then
          if procs > 32 then
             if not_set then
                not_set = false;
             else 
                leave main
             end
           end
        end
          
        if retries = 0 then

        logic = arc <@ b << k & <& H

        end
    end

    master_ptr(10) -> pointer_table(x).rate_ptr -> counts = 23

    if big < small then
       goto done
    elif big > small then
       goto undone
    elif big = small then
       return;
    end

    return junk.trash(x)

end

goto reboot

