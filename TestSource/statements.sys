
/* Unit test input to ensure error free parse testing        */
/* and pushing the grammar's limits with respect             */
/* keyword identifiers, statement splittig and termination.  */

/* 
    block comment with newlines in
*/



/* declarations */



/* alignment */
/* when applied to a struct the attributes is applied to every contained member that does not have an explicit */
/* alignment */

procedure main (root)

dcl starter bin8 var 
dcl array(10) bin(22)
dcl msg string
dcl msg string (1,2)
dcl frequency bin(32,8)
dcl rates bin("helllo")
dcl counters(100) dec(10) unaligned
dcl target label
dcl message string(-33)
dcl report string(128) var

scope systems.support

end /* scope */



dcl array(0:10) bin8 aligned

@i_am_a_place

@i_am_a_place(3) 

hex  = 02e4 983d 88cf:H 
oct  = 1245 334 22222:o
bin  = 0110 1001 1101:b

call reboot(9)

goto i_am_a_place(5)

goto i_am_a_place(target)

dcl struct bin(99,"p")

dcl struct test(100,100) aligned 
        struct bulk
            charlie      bin8
            aligned bin8 
        end               // struct named end
        struct block (a,b) 
            struct inner
                    // empty struct
            end
        end
        struct collect 
                    // empty struct
        end
        charlie(x,y) bin8 aligned // comment     
        charlie bin8
        charlie bin8
        aligned bin16
        struct aligned aligned
        
        end
        charlie bin8
    end
type struct  isr_register   // field named 'type'
    mode     bit(2)
    max      bit(3)
    mas      bit(9)
end

end 

dcl dcl (10) string(44)

dcl target label

target = that_other_label

total = total + 1

goto target

dcl  handler(32) entry(bin8, string)

call handler(J)(10,"hello")

proc dummy

    dcl arg bin(33)
    dcl user bin8
end




type struct A
        struct B
            counter bin8
            lister  bin8
        end 
       printer bin8
       router as classmap
end

  

type struct control_block(10) aligned
       header string (32)
       list_length bin (16) unaligned
end /* struct */

dcl overlay as control_block const

procedure startup (arg1,arg2,arg3)

    return 

    function calculate(a,b,c) as bin(25)
        a = b / (c + a)
        return a
    end   

end   /* proc  */

/* some procedures */

@this_is_another_label

procedure shutdown 

    if a = b then
       return
    end

end /* proc */

/* another sope block */

scope utilities

    proc reset_page_table (table_ptr)

        if then >= proc then
            call = return
        else
            elif = call (if)
        end

        call startup (1,2,3)

        return (doomsday)

    end /* proc */

    type struct metype
        bin8 bin8
        if   string(16)
        then dec(10)
        else bit(24)
        dcl  bin32
        end  bin64 aligned
    end /* struct */




    name.other(1,2,3)(a,b,c) = 123 



    name(1,2,3).other(a,b,c) = 123

    return (speed * scale + length)




    do while (expressionw) 

    end

    do until (expressionu) 

    end 

    do loop
       count = count + 1
    end

    do x = a to b by c  

    end

    do x = 1 to 100 while (size < 100)

    end

    do x = 2 to 100  until (size < 100)

    end

    do x = 3 to 100 by 0 while (running) until (size < 100)

    end

    do x = 4 to 100   until (running)   while size < 100

    end

    do while (still_time) until no_space_left

    end

    do until (still_time) while no_space_left  // In the AST a while loop with an until condition should be treated as indistinguishable from a until loop with a while condition

    end

    do while (still_time) 
        do until no_space_left
            fast = slow
        end
    end

    do a = 10 to 1000
    while (c < x)
        count = effoff(s)
    
    end

    do a = 10 to 1000 while (c < x)
            count = effoff(s)
    end    

    a = <& G        // and all the bits in G
    b = <| b
    v = <^ Julia

    bits &= 5
    bits |= 10
    bits ^= 100

    bits <<= 5
    bits >>= 7

    bite @>= 3  // bits = bits @> 3
    bits <@= 5  // bits = bits <@ 5


    /*

    // not real 

    jumpto target(i)

    compute target(x)

    target(1)

    exit
    target(2)

    exit

    target(3)

    */




    //end // proc


    a = 4
end
//end /* proc main */
